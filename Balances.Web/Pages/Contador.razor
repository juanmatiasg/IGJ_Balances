@page "/Contador"
@using Balances.DTO;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using System.Globalization;
@inject ISessionClientService sesionService
@inject IBalanceClientService balanceService
@inject IContadorClientService contadorService
@inject ISessionClientService sessionService


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Datos del Contador Certificante</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>

<body>


    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="Contador" TramiteIniciado="true"></Navegacion>
   

    <div class="container-fluid">
            <div class="col">
                <div class="mt-4 mb-4 d-flex justify-content-center">
                    <div class="card w-50">
                        <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                            Datos del Contador Certificante
                        </div>
                        <div class="card-body">
                            <div>
                                <div class="form-group">
                                    <label for="contadorNombre">Nombre</label>
                                    <input type="text" class="form-control" id="contadorNombre" :value="form.nombre"  required @bind="modelo.Nombre" @onblur=postContador>
                                    <small id="msgError" class="text-danger">@msgErrorNombre</small>
                                </div>

                                <div class="form-group">
                                    <label for="ContadorApellido">Apellido</label>
                                    <input type="text" class="form-control" id="ContadorApellido" :value="form.apellido"  required @bind="modelo.Apellido" @onblur=postContador>
                                    <small id="msgError" class="text-danger">@msgErrorApellido</small>
                                </div>


                            <div class="form-group">
                                <label for="tipoDocumento">Tipo de Documento</label>
                                <select class="form-select" @bind="modelo.TipoDocumento" @onblur="postContador">
                                    <option value="">--- Seleccionar un tipo de documento ---</option>
                                    <option value="DNI">DNI</option>
                                    <option value="Pasaporte">Pasaporte</option>
                                    <option value="Cedula">Cédula</option>
                                </select>
                                <small id="msgErrorTipoDocumento" class="text-danger">@msgErrorTipoDocumento</small>
                            </div>
                            
                            <div class="form-group">
                                <label for="contadorNroDocumento">Número de Documento</label>
                                <input type="text" class="form-control" id="contadorNroDocumento" :value="form.nroDocumento"  required @bind="modelo.NroDocumento" @onblur=postContador>
                                <small id="msgError" class="text-danger">@msgErrorNroDoc</small>

                            </div>

                            <div class="form-group">
                                <label for="contadorNuFiscal">Nro. de Identificación Fiscal</label>
                                <input type="text" class="form-control" id="contadorNuFiscal" :value="form.nroFiscal"  required @bind="modelo.NroFiscal" @onblur=postContador>
                                <small id="msgError" class="text-danger">@msgErrorNroIdFiscal</small>


                            </div>

                            <div class="form-group">
                                <label for="tomo">Tomo</label>
                                <input type="text" class="form-control" id="tomo" :value="form.tomo"  required @bind="modelo.Tomo" @onblur=postContador>
                                <small id="msgError" class="text-danger">@msgErrorTomo</small>

                            </div>

                            <div class="form-group">
                                <label for="folio">Folio</label>
                                <input type="text" class="form-control" id="folio" :value="form.folio"  required @bind="modelo.Folio" @onblur=postContador>
                                <small id="msgError" class="text-danger">@msgErrorFolio</small>

                            </div>

                            <div class="form-group">
                                <label for="feInformeAuditorExt">Fecha del Informe del Auditor Externo</label>
                                <input type="date" class="form-control" id="feInformeAuditorExt" :value="form.fechaInformeAuditorExt"  required @bind="modelo.FechaInformeAuditorExt" @onblur=postContador>
                                <small id="msgErrorFechaInformeAuditorExt" class="text-danger">@msgErrorFechaInformeAuditorExt</small>

                            </div>

                            <div class="form-group">
                                <label for="nroLegalInfoAudExt">Nro. de Legalización del Informe del Auditor Externo</label>
                                <input type="text" class="form-control" id="nroLegalInfoAudExt" :value="form.nroLegalInfoAudExt" required @bind="modelo.NroLegalInfoAudExt" @onblur=postContador>
                                <small id="msgError" class="text-danger">@msgErrorNroLegInf</small>

                            </div>



                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>


</body>

</html>


@code {
    [Parameter] public string? TipoEntidad { get; set; }
    private string[] tiposDocumentos = { "DNI", "Pasaporte", "Cédula" };
    private string tipoDocSeleccionado = "";


    private ResponseDTO<BalanceDto> modeloRespuesta = new ResponseDTO<BalanceDto>();
    private ContadorDto modelo = new ContadorDto();


    private string msgErrorNombre = "";
    private string msgErrorApellido = "";
    private string msgErrorNroDoc = "";
    private string msgErrorFolio = "";
    private string msgErrorTomo = "";
    private string msgErrorNroLegInf = "";
    private string msgErrorNroIdFiscal = "";
    private string msgErrorFechaInformeAuditorExt = "";
    private string msgErrorTipoDocumento = "";



    protected override async Task OnInitializedAsync()
    {

        await Load();

        await base.OnInitializedAsync();
    }


    private bool IsSelected(string value)
    {
        return modelo.TipoDocumento == value;
    }



    private async Task<ResponseDTO<BalanceDto>> Load()
    {
        ResponseDTO<BalanceDto> rsp = new();
        try
        {

            var idSession = await sesionService.GetSessionBalanceId();
            rsp = await balanceService.getBalance(idSession);

            if (rsp.IsSuccess)
            {


                TipoEntidad = rsp.Result.Caratula.Entidad.TipoEntidad;
                modelo.id = rsp.Result.Id;
                modelo.Nombre = rsp.Result.Contador.Nombre;
                modelo.Apellido = rsp.Result.Contador.Apellido;   
                modelo.TipoDocumento = rsp.Result.Contador.TipoDocumento;
                modelo.NroDocumento = rsp.Result.Contador.NroDocumento;
                modelo.NroFiscal = rsp.Result.Contador.NroFiscal;
                modelo.Tomo = rsp.Result.Contador.Tomo;
                modelo.Folio = rsp.Result.Contador.Folio;
                modelo.FechaInformeAuditorExt = rsp.Result.Contador.FechaInformeAuditorExt;
                modelo.NroLegalInfoAudExt = rsp.Result.Contador.NroLegalInfoAudExt;


            }
            else
            {
                rsp.Message = $"error al obtener el contador {rsp.Message}";
            }


            StateHasChanged();

        }
        catch (Exception ex)
        {
            rsp.Message = $"error al obtener el contador {ex.Message}";
        }

        return rsp;
    }


    private async Task<ResponseDTO<BalanceDto>> postContador()
    {
        ResponseDTO<BalanceDto> respuesta = new();
        respuesta.IsSuccess = false;
        try
        {
            if (checkData())
            {
                //modelo.TipoDocumento = tipoDocSeleccionado;
                respuesta = await contadorService.postContador(modelo);
                respuesta.IsSuccess = true;

            }

        }

        catch (Exception ex)
        {
            respuesta.Message = ex.Message;

        }
        return respuesta;

    }




    private bool checkData()
    {

        // Apellido
        if (!string.IsNullOrEmpty(modelo.Nombre))
        {
            if (Validator.IsNumeric(modelo.Nombre))
            {
                msgErrorNombre = "No puedes ingresar un valor numérico";
                return false;
            }
            else
            {
                msgErrorNombre = "";

            }
        }
        else
        {
            msgErrorNombre = "El campo no puede estar vacio";
            return false;
        }



        // Apellido
        if (!string.IsNullOrEmpty(modelo.Apellido))
        {
            if (Validator.IsNumeric(modelo.Apellido))
            {
                msgErrorApellido = "No puedes ingresar un valor numérico";
                return false;
            }
            else
            {
                msgErrorApellido = "";

            }
        }
        else
        {
            msgErrorApellido = "El campo no puede estar vacio";
            return false;
        }

        // TipoDocumento
        if (string.IsNullOrEmpty(modelo.TipoDocumento))
        {
            msgErrorTipoDocumento = "Debes seleccionar un tipo de documento";
            return false;
        }
        else
        {
            msgErrorTipoDocumento = "";
        }

        // NroDocumento
        if (!string.IsNullOrEmpty(modelo.NroDocumento))
        {
            if (!Validator.IsNumeric(modelo.NroDocumento))
            {
                msgErrorNroDoc = "No puedes ingresar caracteres en el campo NroDocumento";
                return false;
            }
            else
            {
                msgErrorNroDoc = "";
            }
        }
        else
        {
            msgErrorNroDoc = "El campo no puede estar vacio";
            return false;
        }


        // NroFiscal
        if (!string.IsNullOrEmpty(modelo.NroFiscal))
        {
            if (!Validator.IsNumeric(modelo.NroFiscal))
            {
                msgErrorNroIdFiscal = "No puedes ingresar caracteres en el campo NroFiscal";
                return false;
            }
            else
            {
                msgErrorNroIdFiscal = "";
            }
        }

        else
        {
            msgErrorNroIdFiscal = "El campo no puede estar vacio";
            return false;
        }

        // Tomo
        if (!string.IsNullOrEmpty(modelo.Tomo))
        {
            msgErrorTomo = "";
        }
        else
        {
            msgErrorTomo = "El campo no puede estar vacio";
            return false;
        }

        // Folio
        if (!string.IsNullOrEmpty(modelo.Folio))
        {
            msgErrorFolio = "";
        }
        else
        {
            msgErrorFolio = "El campo no puede estar vacio";
            return false;
        }

        // FechaInformeAuditorExt
        if (modelo.FechaInformeAuditorExt != null)
        {
            msgErrorFechaInformeAuditorExt = "";

        }
        else
        {
            msgErrorFechaInformeAuditorExt = "Seleccioná la fecha correspondiente";
            return false;
        }


        // NroLegalInfoAudExt
        if (!string.IsNullOrEmpty(modelo.NroLegalInfoAudExt))
        {
            if (!Validator.IsNumeric(modelo.NroLegalInfoAudExt))
            {
                msgErrorNroLegInf = "No puedes ingresar caracteres en el campo NroLegalInfoAudExt";
                return false;
            }
            else
            {
                msgErrorNroLegInf = "";           
            }
        }
        else
        {
            msgErrorNroLegInf = "El campo no puede estar vacio";
            return false;
        }

        msgErrorNombre = "";
        msgErrorTomo = "";
        msgErrorApellido = "";
        msgErrorNroIdFiscal = "";
        msgErrorNroLegInf = "";
        msgErrorNroDoc = "";
        msgErrorTipoDocumento = "";
        msgErrorFechaInformeAuditorExt = "";


        return true;
    }

  

}
