@page "/Contador/{balid?}"
@using Balances.DTO;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using System.Globalization;
@using FluentValidation.Results
@inject ISessionClientService sesionService
@inject IBalanceClientService balanceService
@inject IContadorClientService contadorService
@inject ISessionClientService sessionService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NotificationService notificationService


<Navegacion PaginaActiva="Contador" TramiteIniciado="true" balid="@balid"></Navegacion>

<div class="container ">
    <EditForm Model="modelo" class="d-flex gap-3 p-1 flex-column">

        <div class="d-flex gap-1" style="color:#15153D">

            <!--socio presentante-->
            <div class="card d-flex justify-content-between w-50">


                <div class="card-header " style="color: white; font-weight: bold; text-align: center; background-color:#15153D;">
                    Datos del Contador Presentante
                </div>

                <div class="card-body d-flex flex-column gap-2 w-100 ">

                    <FluentValidationValidator />

                    <div class="d-flex gap-1 ">

                        <RadzenStack Style="width:50%">
                            <RadzenFormField Text="Nombre">
                                <RadzenTextBox @bind-Value="@modelo.Nombre" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> modelo.Nombre)" />

                        </RadzenStack>


                        <RadzenStack Style="width:50%">
                            <RadzenFormField Text="Apellido">
                                <RadzenTextBox @bind-Value="@modelo.Apellido" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> modelo.Apellido)" />

                        </RadzenStack>
                    </div>


                    <div class="d-flex justify-content-between w-100 gap-1">

                        <RadzenStack Style="width:30%;">
                            <RadzenFormField Text="Tipo de Documento">
                                <RadzenDropDown @bind-Value=@modelo.TipoDocumento Data=@tiposDocumentos Name="DropDownBindValue" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> modelo.TipoDocumento)" />
                        </RadzenStack>

                        <RadzenStack Style="width:30%;">
                            <RadzenFormField Style="width:100%" Text="CUIL/CUIT">
                                <RadzenTextBox @bind-Value="@modelo.NroFiscal" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> @modelo.NroFiscal)" />
                        </RadzenStack>

                        <RadzenStack Style="width:30%;">
                            <RadzenFormField Style="width:100%" Text="Documento">
                                <RadzenTextBox @bind-Value="@modelo.NroDocumento" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> @modelo.NroDocumento)" />
                        </RadzenStack>

                    </div>


                    <div class="card w-100">

                        <div class="card-header " style="font-weight: 400;">
                            Datos de la Matricula
                        </div>

                        <div class="card-body d-flex gap-1 w-100">
                            <RadzenFormField class="w-25" Text="Tomo">
                                <RadzenTextBox @bind-Value="@modelo.Tomo" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> @modelo.Tomo)" />


                            <RadzenFormField class="w-25" Text="Folio">
                                <RadzenTextBox @bind-Value="@modelo.Folio" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> @modelo.Folio)" />

                        </div>
                    </div>


                </div>


            </div>

            <!--SOCIO ESTUDIO-->
            <div class="card d-flex justify-content-between w-50">


                <div class="card-header" style="color: white; font-weight: bold; text-align: center; background-color:#15153D;">
                    Datos del Estudio
                </div>

                <div class="card-body d-flex flex-column gap-2 align-items-center ">

                    <RadzenStack>
                        <RadzenLabel Style="font-size:large; font-weight:700" Component="CheckBox3">
                            <RadzenCheckBox @bind-Value="@modelo.EsSocioEstudio" Name="CheckBox3" />
                            Actúa en carácter de Socio de Estudio Contable
                        </RadzenLabel>
                        <ValidationMessage For="@(()=> modelo.EsSocioEstudio)" />


                    </RadzenStack>


                    <div class="d-flex gap-1 w-100 ">

                        <RadzenStack class="w-25">
                            <RadzenFormField Text="Tomo">
                                <RadzenTextBox @bind-Value="@modelo.TomoEstudio" Disabled="@(modelo.EsSocioEstudio ? false : true)" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> @modelo.TomoEstudio)" />
                        </RadzenStack>


                        <RadzenStack class="w-25">
                            <RadzenFormField Text="Folio">
                                <RadzenTextBox @bind-Value="@modelo.FolioEstudio" Disabled="@(modelo.EsSocioEstudio ? false : true)" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> @modelo.FolioEstudio)" />
                        </RadzenStack>
                    </div>
                </div>

            </div>

        </div>

        <!-- Informe-->
        <div class="card">

            <div class="card-header" style="color: white; font-weight: bold; text-align: center; background-color:#15153D;">
                Datos del informe del Auditor Externo
            </div>

            <div class="card-body">

                <div class="d-flex">
                    <div class="w-50">

                        <RadzenFormField Text="Fecha" class="mt-1">
                            <RadzenDatePicker @bind-Value="@modelo.FechaInformeAuditorExt" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Placeholder="dd/mm/yyyy" />
                            <ValidationMessage For="@(()=> @modelo.FechaInformeAuditorExt)" />
                        </RadzenFormField>


                        <RadzenFormField Text="Nro. de Legalización" class="mt-1">
                            <RadzenTextBox @bind-Value="@modelo.NroLegalInfoAudExt" />
                            <ValidationMessage For="@(()=> @modelo.NroLegalInfoAudExt)" />
                        </RadzenFormField>

                    </div>

                    <RadzenFormField Text="Opinion" class="mt-1 w-50">

                        <select class="form-select" @bind="modelo.Opinion">
                            <option value="">--- Seleccionar una opinion ---</option>
                            <option value="Favorable">Favorable</option>
                            <option value="Desfavorable">Desfavorable</option>

                        </select>
                    </RadzenFormField>
                    <ValidationMessage For="@(()=> modelo.Opinion)" />

                </div>

                <RadzenFormField Text="Observaciones" Style="width:100%">
                    <RadzenTextArea @bind-Value="@modelo.Observaciones" />
                </RadzenFormField>
            </div>
        </div>

        <RadzenStack class="m-auto text-center">
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" Click="@postContador" ButtonStyle="ButtonStyle.Primary">Guardar</RadzenButton>
        </RadzenStack>

    </EditForm>
</div>


@code {
    [Parameter]
    public string? TipoEntidad { get; set; }

    private string[] tiposDocumentos =
    {
            "DNI",
            "Pasaporte"
    };
    [Parameter]
    public string? balid { get; set; }

    [Parameter]
    public string sesionId { get; set; }

    private ContadorDto modelo = new ContadorDto();

    protected override async Task OnInitializedAsync()
    {
        await Load();
        await base.OnInitializedAsync();
    }



    private async Task<ResponseDTO<BalanceDto>> Load()
    {
        ResponseDTO<BalanceDto> rsp = new();
        try
        {
            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();
                sesionId = sesionRespuesta.Result;
                await sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rst = await sesionService.getBalanceId(sesionId);
                if (rst is not null)
                {
                    balid = rst;
                    rsp = await balanceService.getBalance(balid);
                    if (rsp.IsSuccess)
                    {
                        TipoEntidad = rsp.Result.Caratula.Entidad.TipoEntidad;
                        modelo.Nombre = rsp.Result.Contador.Nombre;
                        modelo.Apellido = rsp.Result.Contador.Apellido;
                        modelo.TipoDocumento = rsp.Result.Contador.TipoDocumento;
                        modelo.NroDocumento = rsp.Result.Contador.NroDocumento;
                        modelo.NroFiscal = rsp.Result.Contador.NroFiscal;
                        modelo.Tomo = rsp.Result.Contador.Tomo;
                        modelo.Folio = rsp.Result.Contador.Folio;
                        modelo.FechaInformeAuditorExt = rsp.Result.Contador.FechaInformeAuditorExt;
                        modelo.NroLegalInfoAudExt = rsp.Result.Contador.NroLegalInfoAudExt;
                        modelo.EsSocioEstudio = rsp.Result.Contador.EsSocioEstudio;
                        modelo.Observaciones = rsp.Result.Contador.Observaciones;
                        modelo.Opinion = rsp.Result.Contador.Opinion;
                        modelo.TomoEstudio = rsp.Result.Contador.TomoEstudio;
                        modelo.FolioEstudio = rsp.Result.Contador.FolioEstudio;
                    }
                    else
                    {
                        rsp.Message = $"error al obtener el contador {rsp.Message}";
                    }
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            rsp.Message = $"error al obtener el contador {ex.Message}";
        }

        return rsp;
    }

    private async Task<ResponseDTO<BalanceDto>> postContador()
    {
        ResponseDTO<BalanceDto> respuesta = new();
        respuesta.IsSuccess = false;
        try
        {

            ContadorValidator contadorValidator = new();

            modelo.SesionId = sesionId;


            ValidationResult result = contadorValidator.Validate(modelo);

            if (result.IsValid)
            {

                respuesta = await contadorService.postContador(modelo);
                if (respuesta.IsSuccess)
                {

                    notificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 3000,
                            Summary = "Datos guardados correctamente"
                        });
                }

            }

        }

        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 3000,
                    Summary = "No se pudieron guardar los datos"
                });

        }
        return respuesta;

    }
}
