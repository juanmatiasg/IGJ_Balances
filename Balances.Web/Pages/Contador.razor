@page "/Contador/{balid?}"
@using Balances.DTO;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using System.Globalization;
@using FluentValidation.Results
@inject ISessionClientService sesionService
@inject IBalanceClientService balanceService
@inject IContadorClientService contadorService
@inject ISessionClientService sessionService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Datos del Contador Certificante</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    
</head>

<body>


    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="Contador" TramiteIniciado="true"></Navegacion>


    <div class="container-fluid">
            <div class="col">
                <div class="mt-4 mb-4 d-flex justify-content-center">
                    <div class="card w-50">
                        <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                            Datos del Contador Certificante
                        </div>
                        <div class="card-body">
                        <EditForm Model="modelo">
                            <FluentValidationValidator />

                            <div class="form-group mt-2">
                                <RadzenFormField Text="Nombre" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelo.Nombre" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> modelo.Nombre)" />
                            </div>

                            <div class="form-group mt-2">
                                <RadzenFormField Text="Apellido" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelo.Apellido" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> modelo.Apellido)" />
                            </div>
                            <div class="form-group">
                                <label for="tipoDocumento">Tipo de Documento</label>
                                <select class="form-select" @bind="modelo.TipoDocumento">
                                    <option value="">--- Seleccionar un tipo de documento ---</option>
                                    <option value="DNI">DNI</option>
                                    <option value="Pasaporte">Pasaporte</option>
                                    <option value="Cedula">Cédula</option>
                                </select>
                                <ValidationMessage For="@(()=> modelo.TipoDocumento)" />
                            </div>

                            <div class="form-group mt-2">
                                <RadzenFormField Text="Numero de Documento" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelo.NroDocumento" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelo.NroDocumento)" />
                            </div>

                            <div class="form-group mt-2">
                                <RadzenFormField Text="Nro. de CUIL/CUIT" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelo.NroFiscal" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelo.NroFiscal)" />
                            </div>

                            <div class="form-group mt-2">
                                <RadzenFormField Text="Tomo" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelo.Tomo" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelo.Tomo)" />
                            </div>

                            <div class="form-group mt-2">
                                <RadzenFormField Text="Folio" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelo.Folio" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelo.Folio)" />
                            </div>
                            <div class="form-group mt-2">
                                <RadzenFormField Text="Fecha del informe del Auditor Externo" Style="width:100%">
                                    <RadzenDatePicker @bind-Value="@modelo.FechaInformeAuditorExt" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType"  Placeholder="dd/mm/yyyy" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelo.FechaInformeAuditorExt)" />
                            </div>
                            <div class="form-group mt-2">
                                <RadzenFormField Text="Nro. de Legalización del Informe del Auditor Externo" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelo.NroLegalInfoAudExt" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelo.NroLegalInfoAudExt)" />
                            </div>
                            <RadzenStack class="d-flex justify-content-center mt-2">
                                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Click="@postContador" ButtonStyle="ButtonStyle.Primary">Agregar</RadzenButton>
                            </RadzenStack>
                        </EditForm>
                    </div>
                </div>

            </div>
        </div>
    </div>


</body>

</html>


@code {
    [Parameter] public string? TipoEntidad { get; set; }
    private string[] tiposDocumentos = { "DNI", "Pasaporte", "Cédula" };
    private string tipoDocSeleccionado = "";
    [Parameter]
    public string? balid { get; set; }
    [Parameter]
    public string sesionId { get; set; }

    private ResponseDTO<BalanceDto> modeloRespuesta = new ResponseDTO<BalanceDto>();
    private ContadorDto modelo = new ContadorDto();

    protected override async Task OnInitializedAsync()
    {

        await Load();

        await base.OnInitializedAsync();
    }


    private bool IsSelected(string value)
    {
        return modelo.TipoDocumento == value;
    }



    private async Task<ResponseDTO<BalanceDto>> Load()
    {
        ResponseDTO<BalanceDto> rsp = new();
        try
        {

            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();

                sesionId = sesionRespuesta.Result;
                sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rst = await sesionService.getBalanceId(sesionId);

                if (rst is not null)
                {
                    balid = rst;
                    rsp  = await balanceService.getBalance(balid);

                    if (rsp.IsSuccess)
                    {


                        TipoEntidad = rsp.Result.Caratula.Entidad.TipoEntidad;
                        modelo.Nombre = rsp.Result.Contador.Nombre;
                        modelo.Apellido = rsp.Result.Contador.Apellido;
                        modelo.TipoDocumento = rsp.Result.Contador.TipoDocumento;
                        modelo.NroDocumento = rsp.Result.Contador.NroDocumento;
                        modelo.NroFiscal = rsp.Result.Contador.NroFiscal;
                        modelo.Tomo = rsp.Result.Contador.Tomo;
                        modelo.Folio = rsp.Result.Contador.Folio;
                        modelo.FechaInformeAuditorExt = rsp.Result.Contador.FechaInformeAuditorExt;
                        modelo.NroLegalInfoAudExt = rsp.Result.Contador.NroLegalInfoAudExt;


                    }

                    else
                    {
                        rsp.Message = $"error al obtener el contador {rsp.Message}";
                    }

                }


                StateHasChanged();
            }


        }
        catch (Exception ex)
        {
            rsp.Message = $"error al obtener el contador {ex.Message}";
        }

        return rsp;
    }


    private async Task<ResponseDTO<BalanceDto>> postContador()
    {
        ResponseDTO<BalanceDto> respuesta = new();
        respuesta.IsSuccess = false;
        try
        {

            ContadorValidator contadorValidator = new();

            modelo.SesionId = sesionId;

            // respuesta = await contadorService.postContador(modelo);

            ValidationResult result = contadorValidator.Validate(modelo);

            if (result.IsValid)
            {
                respuesta = await contadorService.postContador(modelo);
               
            }
            
        }

        catch (Exception ex)
        {
            respuesta.Message = ex.Message;

        }
        return respuesta;

    }






  

  

}
