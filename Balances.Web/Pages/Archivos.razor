@page "/Archivos"
@using Balances.DTO;
@using Balances.Model;
@using Balances.Web.Services.Implementation;
@using Microsoft.AspNetCore.Http;
@using BlazorInputFileExtended;
@using Microsoft.AspNetCore.Http.Internal;
@using System.Net.Http.Headers;
@using Microsoft.Extensions.Primitives;
@using System.Security.Cryptography;
@inject IArchivosService archivoService


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Archivos</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">


</head>

<body>

    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="Archivos" TramiteIniciado="true"></Navegacion>

    <!---------------------------------------------------------------->
    <div class="container-fluid mt-5">
        <h2 class="text-center" style="margin-bottom: 20px; color: #0375bc; font-weight: bold;">
            Archivos
        </h2>
        <div class="row">
            <!-- Tarjeta: Enviar Archivos -->
            <div class="col">
                <div class="card">
                    <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                        Enviar Archivos
                    </div>
                    <div class="card-body">
                        <form>
                            <div class="form-group">
                                <label for="tipoArchivo">Tipo de Archivo</label>
                                <select class="form-select" @bind="@categoria">
                                    <option selected>Seleccionar...</option>
                                    <option value="Estado Contable">Estado Contable</option>
                                    <option value="Acta reunión organo">Acta reunión organo</option>
                                    <option value="Acta reunión administradores">Acta reunión administradores</option>
                                    <option value="Registro Asistencia">Registro Asistencia</option>
                                    <option value="Informe Fiscalizacion">Informe Fiscalizacion</option>
                                    <option value="Otro">Otro</option>
                                </select>
                            </div>
                           

                            <div class="col">
                                <InputFile OnChange="@HandleFileUpload" multiple />
                                <button type="button" @onclick="UploadFile">Subir Archivo</button>
                            </div>

                        </form>
                        <div class="d-flex justify-content-center">
                            <small id="fechaError" class="text-danger">@msgError</small>
                        </div>
                    </div>
                </div>
            </div>
          
            <!-- Tarjeta: Archivo Recibido -->
            <div class="col">
                <div class="card">
                    <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                        Archivo Recibido
                    </div>
                    <div class="card-body">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                
                                    <th scope="col">Nombre</th>
                                    <th scope="col">Tipo</th>
                                    <th scope="col">Hash</th>
                                    <th scope="col">Fecha de Creación</th>
                                    <th scope="col">Tamaño</th>
                                    <th scope="col">Acción</th>
                                </tr>
                            </thead>
                            @if (listArchivo.Count > 0)
                            {
                                @foreach (var archivo in listArchivo)
                                {
                                    <tbody>
                                        <tr>
                                            <td>@(archivo.NombreArchivo.Length > 10 ? archivo.NombreArchivo.Substring(0, 10) + "..." : archivo.NombreArchivo)</td>
                                            <td>@(archivo.Categoria.Length > 10 ? archivo.Categoria.Substring(0, 10) + "..." : archivo.Categoria)</td>
                                            <td>@archivo.Hash</td>
                                            <td>@archivo.FechaCreacion.ToString("dd/MM/yyyy")</td>
                                            <td>@archivo.Tamaño @conversionesDeArchivos(archivo.Tamaño)</td>
                                            <td>
                                                <button type="button" class="btn btn-danger" @onclick="() => deleteArchivo(archivo)">Eliminar</button>
                                            </td>
                                        </tr>
                                    </tbody>
                                }
                            }
                        </table>
                        <small id="fechaError" class="text-danger">@msgError</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

</body>

</html>


@code {

    [Parameter] public string? TipoEntidad { get; set; }

    private string categoria = "";
    private string msgError = "";
    private IReadOnlyList<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private List<FileDTO> listArchivo = new List<FileDTO>();


    protected override async void OnInitialized()
    {
        await Load();
        base.OnInitialized();
    }

    private async Task Load()
    {
        try
        {
            var idSession = await archivoService.getSession();

            if (idSession.IsSuccess)
            {
                var response = await archivoService.getBalance(idSession.Result);

                if (idSession.IsSuccess == true)
                {

                    try
                    {
                        TipoEntidad = response.Result.Caratula.Entidad.TipoEntidad;
                        var rspArchivos = response.Result.Archivos;

                        StateHasChanged();

                    }
                    catch (Exception ex)
                    {

                       response.Message = $"GetBalance: Hubo un problema con la solicitud fetch: {ex.Message}";
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }

    private void setListArchivos(List<Archivo> list)
    {
        if(list.Count>0){

            var archivo = new FileDTO();

            list.ForEach(x =>
            {
                archivo.NombreArchivo = x.NombreArchivo;
                archivo.Categoria = x.Categoria;
                archivo.Hash = x.Hash;
                archivo.Tamaño = x.Tamaño;
                archivo.FechaCreacion = x.FechaCreacion;

            });

            this.listArchivo.Add(archivo);
        }
    }

    private string conversionesDeArchivos(long file)
    {
        // Tamaño del archivo en bytes (esto podría provenir de tu archivo subido)
        long fileSizeInBytes = file;


        if (fileSizeInBytes < 1024)
        {

            return "Bytes";
        }
        else if (fileSizeInBytes < 1024 * 1024)
        {
            double fileSizeInKB = (double)fileSizeInBytes / 1024;
            return "KB";

        }
        else if (fileSizeInBytes < 1024L * 1024 * 1024)
        {
            double fileSizeInMB = (double)fileSizeInBytes / (1024 * 1024);
            return "MB";

        }
        else if (fileSizeInBytes < 1024L * 1024 * 1024 * 1024)
        {
            double fileSizeInGB = (double)fileSizeInBytes / (1024 * 1024 * 1024);
            return "GB";

        }
        else
        {
            double fileSizeInTB = (double)fileSizeInBytes / (1024L * 1024 * 1024 * 1024);
            return "TB";
        }

    }




    private  void HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            foreach (var file in e.GetMultipleFiles())
            {
                if (file.Size <= 2097152) // 2 MB in bytes (1 MB = 1024 * 1024 bytes)
                {
                    selectedFiles = e.GetMultipleFiles();
                }
                else
                {
                    // Display an error message or prevent further processing
                    msgError = $"El archivo {file.Name} supera el tamaño máximo permitido de 2 MB";
                    break; // Stop processing further files once an error is encountered
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: HandleFileUpload {ex.Message}");
        }


    }

    private async Task<ResponseDTO<BalanceDto>> UploadFile()
    {
 
       

        var response = new ResponseDTO<BalanceDto>();

        try
        {
            if (selectedFiles.Count > 0 && !string.IsNullOrEmpty(categoria))
            {
                //var totalSize = selectedFiles.Sum(file => file.Size);

                var archivos = new FileDTO();

                foreach (var file in selectedFiles)
                {
                    // Check if the file size exceeds the limit
                    if (file.Size > 2097152)
                    {
                        response.Message = $"File '{file.Name}' exceeds the maximum allowed size.";
                        msgError = $"File '{file.Name}' exceeds the maximum allowed size.";

                        return response;
                    }

                    var binario = await ToByteArrayAsync(file.OpenReadStream());


                    archivos.DatosBinarios = binario;
                    archivos.Tamaño = binario.Length;
                    archivos.ContentType = file.ContentType;
                    archivos.Categoria = categoria;
                    archivos.NombreArchivo = file.Name;
                    archivos.Hash = Convert.ToHexString(SHA256.HashData(binario));


                    //archivos.Add(f);
                    listArchivo.Add(archivos);
                 
                }
    
                response = await archivoService.uploadArchivo(selectedFiles, categoria);

                if (response.IsSuccess)
                {
                    StateHasChanged();
                }
                else
                {
                    response.Message = $"Error uploading files";
                }
            }
            else
            {
                response.Message = $"El campo categoria no puede estar vacio";
            }
        }
        catch (Exception ex)
        {
            response.Message = $"An error occurred while uploading files: {ex.Message}";
        }
      
            
       

        return response;
    }



    private async Task<ResponseDTO<BalanceDto>> deleteArchivo(FileDTO archivo)
    {
        var response = new ResponseDTO<BalanceDto>();
        try
        {
            response = await archivoService.deleteArchivo(archivo);

            if (response.IsSuccess)
            {
                listArchivo.Remove(archivo);

            }


        }
        catch (Exception ex)
        {
            response.Message = ex.Message;
        }
        return response;
    }

    private async Task<byte[]> ToByteArrayAsync(Stream stream)
    {
        using (var memoryStream = new MemoryStream())
        {
            await stream.CopyToAsync(memoryStream);
            return memoryStream.ToArray();
        }
    }




}
