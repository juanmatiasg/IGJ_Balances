@page "/Archivos"
@using Balances.DTO;
@using Balances.Model;
@using Balances.Web.Services.Implementation;
@using Microsoft.AspNetCore.Http;
@using BlazorInputFileExtended;
@using Microsoft.AspNetCore.Http.Internal;
@using System.Net.Http.Headers;
@using Microsoft.Extensions.Primitives;
@inject IArchivosService archivoService


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Archivos</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">


</head>

<body>
    <!--Navegacion-->
    <div class="d-flex justify-content-center align-items-center">
        <h3 class="fs-2 font-weight mt-4 mb-4">
            <p>Entidad:</p>
        </h3>
    </div>

   <Navegacion></Navegacion>

    <!---------------------------------------------------------------->
    <div class="container mt-5">
        <h2 class="text-center" style="margin-bottom: 20px; color: #0375bc; font-weight: bold;">
            Archivos
        </h2>
        <div class="row">
            <!-- Tarjeta: Enviar Archivos -->
            <div class="col">
                <div class="card">
                    <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                        Enviar Archivos
                    </div>
                    <div class="card-body">
                        <form>
                            <div class="form-group">
                                <label for="tipoArchivo">Tipo de Archivo</label>
                                <select class="form-select" @bind="@categoria">
                                    <option selected>Seleccionar...</option>
                                    <option value="Estado Contable">Estado Contable</option>
                                    <option value="Acta reunión organo">Acta reunión organo</option>
                                    <option value="Acta reunión administradores">Acta reunión administradores</option>
                                    <option value="Registro Asistencia">Registro Asistencia</option>
                                    <option value="Informe Fiscalizacion">Informe Fiscalizacion</option>
                                    <option value="Otro">Otro</option>
                                </select>
                            </div>
                            <div class="col">
                                <InputFile OnChange="@HandleFileUpload" multiple />
                                <button type = "button"  @onclick="UploadFile">Subir Archivo</button>
                            </div>

                        </form>
                    </div>
                </div>
            </div>
          
            <!-- Tarjeta: Archivo Recibido -->
            <div class="col">
                <div class="card">
                    <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                        Archivo Recibido
                    </div>
                    <div class="card-body">
                        <table class="table vh-20">
                            <thead>
                                <tr>
                                    <th scope="col"></th>
                                    <th scope="col">Nombre</th>
                                    <th scope="col">Tipo</th>
                                    <th scope="col">Hash</th>
                                    <th scope="col">Fecha de Creación</th>
                                    <th scope="col">Tamaño</th>
                                    <th scope="col">Acción</th>
                                </tr>
                            </thead>
                            @foreach (var archivo in listArchivo)
                            {
                                <tbody>
                                    <tr>
                                        <th scope="row"></th>
                                        <td>@archivo.NombreArchivo</td>
                                        <td>@(categoria.Length > 10 ? categoria.Substring(0, 10) + "..." : categoria)</td>
                                        <td>@(archivo.Hash.Length > 10 ? archivo.Hash.Substring(0, 10) + "..." : archivo.Hash)</td>
                                        <td>@archivo.FechaCreacion</td>
                                        <td>@archivo.Tamaño</td>
                                        <td>
                                            <button type="button" class="btn btn-danger" @onclick="() => deleteArchivo(archivo)">Eliminar</button>
                                        </td>
                                    </tr>
                                </tbody>

                            }
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

</body>

</html>


@code {

    private string categoria = "";
    private IReadOnlyList<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private List<Archivo> listArchivo = new List<Archivo>();



    private  void HandleFileUpload(InputFileChangeEventArgs e)
    {


        selectedFiles = e.GetMultipleFiles();


        foreach (var file in selectedFiles)
        {
            var archivo = new Archivo
                {
                  
                    Categoria = categoria,
                    NombreArchivo = file.Name,
                    Tamaño = file.Size,
                    ContentType = file.ContentType
                };

            listArchivo.Add(archivo);
        }
    }

    private async Task<ResponseDTO<BalanceDto>> UploadFile()
    {
        var response = new ResponseDTO<BalanceDto>();

        if (selectedFiles.Count > 0 && categoria != null)
        {

           
            response = await archivoService.uploadArchivo(selectedFiles, categoria);


            if (response.IsSuccess)
            {
                resultArchivos(response.Result.Archivos);
                StateHasChanged();

            }
            else
            {
                response.Message = $"Error uploading files";
            }



        }
        else
        {
            response.Message = $"El campo categoria no puede estar vacio";
        }


        return response;
    }





    private void resultArchivos(ICollection<Archivo> files)
    {
        // Clear the existing elements and add the new ones
        //listArchivo.Clear();
        if (files != null)
        {
            foreach(var file in files)
            {
                listArchivo.Add(file);
            }

        }


    }

    private async Task<ResponseDTO<BalanceDto>> deleteArchivo(Archivo archivo)
    {
        var response = new ResponseDTO<BalanceDto>();
        try
        {
            response = await archivoService.deleteArchivo(archivo);

            if (response.IsSuccess)
            {
                listArchivo.Remove(archivo);

            }


        }
        catch (Exception ex)
        {
            response.Message = ex.Message;
        }
        return response;
    }
  


}
