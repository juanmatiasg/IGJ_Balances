@page "/Books/{balid?}"
@using Balances.DTO;
@using Balances.Model;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using System.Text;
@using System.Reflection;
@inject ILibrosClientService serviceLibro;
@inject IBalanceClientService balanceService
@inject ISessionClientService sesionService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<Navegacion PaginaActiva="Libros" TramiteIniciado="true" balid="@balid"></Navegacion>


<div class="container-fluid mt-2 mb-4">
    <div class="card">

        <div class="card-header" style="color: #FFF;background-color:#15153D; font-weight: bold; text-align: center;">
            Datos de Libros
        </div>
        <div class="col p-4 d-flex justify-content-center flex-column">
          
            @foreach(var libro in libros.ObtenerLibros()){
                
                <RadzenRow>
                        <RadzenStack class="col-md-2 mt-1 pt-1 pb-1">
                            <RadzenLabel>@libro.Tipo</RadzenLabel>
                        </RadzenStack>
                        
                        <RadzenStack class="col-md-1  mt-1">
                            <RadzenFormField Text="Nombre del Libro" Style="width:100%">
                                <RadzenTextBox @bind-Value="@libro.Nombre" Change="OnBlurHandler"/>
                            </RadzenFormField>
                            <small id="msgError" class="text-danger">@msgErrorNombre</small>

                        </RadzenStack>

                        <RadzenStack class="col-md-1  mt-1">
                            <RadzenFormField Text="Nro.Rúbrica" Style="width:100%">
                            <RadzenTextBox @bind-Value="@libro.NumeroRubrica" Change="OnBlurHandler" />
                            </RadzenFormField>
                            <small id="msgError" class="text-danger">@msgErrorNroRubrica</small>
                        </RadzenStack>

                        <RadzenStack class="col-md-1  mt-1">
                            <RadzenFormField Text="Fecha Rúbrica" Style="width:100%">
                            <RadzenDatePicker @bind-Value="@libro.FechaRubrica" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Placeholder="dd/mm/yyyy" Change="OnBlurHandler" />
                            </RadzenFormField>
                            <small id="msgError" class="text-danger">@msgErrorFechaRubrica</small>
                         </RadzenStack>

                        <RadzenStack class="col-md-1  mt-1">
                            <RadzenFormField Text="Folio" Style="width:100%">
                            <RadzenTextBox @bind-Value="@libro.FolioObraTranscripcion" Change="OnBlurHandler" />
                            </RadzenFormField>
                        <small id="msgError" class="text-danger">@msgErrorFolio</small>

                        </RadzenStack>
                      

                        <RadzenStack class="col-md-1  mt-1">
                            <RadzenFormField Text="Fecha Última Registración" Style="width:100%">
                            <RadzenDatePicker @bind-Value="@libro.FechaUltimaRegistracion" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Placeholder="dd/mm/yyyy" Change="OnBlurHandler" />
                            </RadzenFormField>
                             <small id="msgError" class="text-danger">@msgErrorFechaUltimaRegistracion</small>
                        </RadzenStack>

                        <RadzenStack class="col-md-1  mt-1">
                            <RadzenFormField Text="Folio de la Últ Reg" Style="width:100%">
                            <RadzenTextBox @bind-Value="@libro.FolioUltimaRegistracion" Change="OnBlurHandler" />
                            </RadzenFormField>
                            <small id="msgError" class="text-danger">@msgErrormsgErrorFolioUltimaRegistracion</small>
                        </RadzenStack>

                        <RadzenStack class="col-md-2 mt-1">
                                @if (libro.Tipo.Equals(ESTADO_CONTABLE) || libro.Tipo.Equals(INFORME_ORGANO))
                                {                              
                                        <div class="form-check">
                                            <RadzenCheckBox @bind-Value="libro.NoSabeNoContesta" onchange="OnBlurHandler" />
                                            <label>N/C</label>
                                        </div>                               
                          
                                }
                        </RadzenStack>
                </RadzenRow>
             
             }
          
        </div>
    </div>

   
</div>


@code {
    ListaDeLibrosDTO libros = new ListaDeLibrosDTO();
    LibrosDto libroDto = new LibrosDto();

    [Parameter]
    public string? TipoEntidad { get; set; }

    [Parameter]
    public string? balid { get; set; }

    [Parameter]
    public string sesionId { get; set; }

    private string msgErrorFolio = "";
    private string msgErrorNroRubrica = "";
    private string msgErrorNombre = "";
    private string msgErrorFechaRubrica = "";
    private string msgErrorFechaUltimaRegistracion = "";
    private string msgErrormsgErrorFolioUltimaRegistracion = "";
    private const string ESTADO_CONTABLE = "Estados Contables Consolidados";
    private const string INFORME_ORGANO = "Informe Organo Fiscalización";


    protected override void OnInitialized()
    {
        libros.AgregarLibrosDeLibrosDto(libroDto);       
        Load();
        base.OnInitialized();
    }
    private async Task Load()
    {
        ResponseDTO<BalanceDto> rsp = new();
        try
        {
            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();
                sesionId = sesionRespuesta.Result;
                sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rst = await sesionService.getBalanceId(sesionId);
                if (rst is not null)
                {
                    balid = rst;
                    rsp = await balanceService.getBalance(balid);
                    if (rsp.IsSuccess)
                    {
                        TipoEntidad = rsp.Result.Caratula.Entidad.TipoEntidad;
                        setLibros(rsp.Result.Libros);
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");
        }
    }

    private void setLibros(LibrosDto libros)
    {
        if (libros != null)
        {
            this.libros.Limpiar();
            this.libros.AgregarLibrosDeLibrosDto(libros);
        }
    }

    private async Task<ResponseDTO<BalanceDto>> OnBlurHandler()
    {
        ResponseDTO<BalanceDto> respuesta = new();
        try
        {
          
           // librosDto.SessionId = sesionId;
           // respuesta = await serviceLibro.insertLibros(libros);
           
        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }

        return respuesta;
    }


    /*
    [Parameter]
    public bool NoSabeONoConstesta { get; set; }

    [Parameter]
    public EventCallback<LibroDto> OnBlur { get; set; }


    private async Task OnBlurHandler()
        {
        await OnBlur.InvokeAsync(libroP);

        if (checkData())
            {
            await OnBlur.InvokeAsync(libroP);
    }
    }

    private bool checkData()
        {
        // Nombre
        if (string.IsNullOrEmpty(libroP.Nombre))
            {
            msgErrorNombre = "El campo no puede estar vacío";
        return false;
        }
        else if (Validator.IsNumeric(libroP.Nombre))
            {
            msgErrorNombre = "No puedes ingresar un valor numérico";
        return false;
        }
        else
            {
            msgErrorNombre = "";
        }

        // Nro Rubrica
        if (string.IsNullOrEmpty(libroP.NumeroRubrica))
            {
            msgErrorNroRubrica = "El campo no puede estar vacío";
        return false;
        }
        else if (!Validator.IsNumeric(libroP.NumeroRubrica))
            {
            msgErrorNroRubrica = "No puedes ingresar caracteres";
        return false;
        }
        else
            {
            msgErrorNroRubrica = "";
        }

        // Fecha Rubrica
        if (libroP.FechaRubrica == null)
            {
            msgErrorFechaRubrica = "No seleccionaste la fecha correspondiente";
        return false;
        }
        else
            {
            msgErrorFechaRubrica = "";
        }

        // Folio Obra Transcripcion
        if (string.IsNullOrEmpty(libroP.FolioObraTranscripcion))
            {
            msgErrorFolio = "El campo no puede estar vacío";
        return false;
        }
        else
            {
            msgErrorFolio = "";
        }

        // FechaUltimaRegistracion
        if (libroP.FechaUltimaRegistracion == null)
            {
            msgErrorFechaUltimaRegistracion = "No seleccionaste la fecha correspondiente";
        return false;
        }
        else
            {
            msgErrorFechaUltimaRegistracion = "";
        }

        // Folio Ultima Registracion
        if (string.IsNullOrEmpty(libroP.FolioUltimaRegistracion))
            {
            msgErrormsgErrorFolioUltimaRegistracion = "El campo no puede estar vacío";
        return false;
        }
        else
            {
            msgErrormsgErrorFolioUltimaRegistracion = "";
        }

        // Si todos los campos pasan la validación o si algunos campos son "N/C", entonces retorna true
    return true;
    }*/
}

