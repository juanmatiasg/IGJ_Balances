@page "/Caratula/{balid?}"
@using Balances.DTO;
@using Balances.Model
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.FluentValidation;
@using Balances.Web.Services.Implementation;
@using FluentValidation.Results
@using Microsoft.AspNetCore.Http;
@using Microsoft.JSInterop
@using Balances.Web.Services
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using GoogleMapsComponents.Maps.Places
@inject IJSRuntime JS
@inject ICaratulaClientService caratulaService
@inject IBalanceClientService balanceService
@inject ISessionClientService sesionService
@inject IBusquedaDeSociedadesClientService busquedaSociedadService
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IHttpContextAccessor httpContextAccessor
@inject Radzen.DialogService dialogService
@inject SweetAlertService swal



<!--Navegacion-->

<Navegacion PaginaActiva="Caratula" TramiteIniciado="@tramiteIniciado" balid="@balid"></Navegacion>

<!--Loading-->
<RadzenDialog />


<!--Entidad-->


<div class="container my-0">
    <div class="card mx-auto  bg-light">

        @if (tramiteIniciado)
        {
            <div class="card-header" style="color: #FFF;background-color:#15153D; font-weight: bold; text-align: center;">
                Datos de la Caratula
            </div>
            <div class="card-body">

                <RadzenCard class="rz-border-radius-20 rz-pt-8 rz-ps-8 rz-pe-8 border-5 " style="margin-top:20px; border-color:#15153D; background: linear-gradient(rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.8)), url('img/modificado.png') no-repeat center center; background-size: contain;z-index:-10 ">
                    <div class="d-flex p-1 flex-column align-items-start">
                        <h4 style="color:#15153D">Sociedad: </h4>
                        <RadzenStack>
                            <h5 style="color:#15153D">Correlativo :<b> @(modelo.Entidad.Correlativo ?? "")</b></h5>
                        </RadzenStack>
                        <RadzenStack>
                            <h5 style="color:#15153D">Razón Social: <b> @(modelo.Entidad.RazonSocial ?? "")</b></h5>
                        </RadzenStack>
                        <RadzenStack>
                            <h5 style="color:#15153D">Tipo de Entidad: <b>@(modelo.Entidad.TipoEntidad ?? "")</b></h5>
                        </RadzenStack>
                    </div>
                    <br />
                    <h4 style="color:#15153D">Balance: </h4>
                    <div class="d-flex p-1 justify-content-between">
                        <RadzenStack>
                            <h5 style="color:#15153D">Fecha de Inicio: <b>@(modelo.FechaInicio?.ToString("dd/MM/yyyy"))</b></h5>
                        </RadzenStack>
                        <RadzenStack>
                            <h5 style="color:#15153D">Fecha de Cierre: <b>@(modelo.FechaDeCierre?.ToString("dd/MM/yyyy"))</b></h5>
                        </RadzenStack>
                    </div>
                    <div class="d-flex p-1 justify-content-between">

                        <RadzenStack>
                            <h5 style="color:#15153D">Domicilio: <b>@(modelo.Entidad.Domicilio)</b></h5>
                        </RadzenStack>
                        <RadzenStack>
                            <h5 style="color:#15153D">Email: <b>@(modelo.Email)</b></h5>
                        </RadzenStack>
                    </div>
                    <RadzenButton Variant="Radzen.Variant.Flat" Shade="Shade.Dark" Click=@ResetCaratula Text="Editar Caratula" ButtonStyle="ButtonStyle.Info" />

                </RadzenCard>
            </div>

        }
        else
        {
            <div class="card-header" style="color: #FFF;background-color:#15153D; font-weight: bold; text-align: center;">
                Entidad
            </div>
            <div class="card-body">
                <EditForm Model="modelbusqueda">
                    <FluentValidationValidator />
                    <div class="row d-flex justify-content-center align-items-end">

                        <div class="col">
                            <RadzenFormField Text="Nro.Correlativo / CUIT / CUIL" Style="width:100%">
                                <RadzenTextBox Disabled="@(tramiteIniciado ? true : false)" @bind-Value="modelbusqueda.NroCorrelativoNroCUIL" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> modelbusqueda.NroCorrelativoNroCUIL)" />
                        </div>

                        <div class="col d-block">
                            <RadzenButton Disabled="@(tramiteIniciado ? true : false)" ButtonType="Radzen.ButtonType.Submit" Variant="Radzen.Variant.Flat" Shade="Shade.Dark" Click="FindEntities" Text="Buscar" ButtonStyle="ButtonStyle.Info" />
                        </div>

                        <div class="col">
                            <RadzenStack>
                                <RadzenLabel Style="font-size:large; font-weight:700" Component="CheckBox3">
                                    <RadzenCheckBox @bind-Value="@continuadora" Name="CheckBox3" />
                                    ¿ Desea Rectificar o Continuar con Datos de Balances Previos ?
                                </RadzenLabel>
                            </RadzenStack>
                        </div>
                    </div>
                </EditForm>
            </div>

            <div class="card-body bg-light">

                <div class="card-header" style="color: #FFF; background-color:#15153D; font-weight: bold; text-align: center;">
                    Datos de la sociedad
                </div>
                <RadzenStack>
                    <EditForm Model="@modelo">
                        <div class="d-flex p-1 justify-content-around">
                            <RadzenStack>
                                <span style="color:#15153D;"><b>Correlativo: @(modelo.Entidad.Correlativo ?? "")</b></span>
                            </RadzenStack>
                            <RadzenStack>
                                <span style="color:#15153D;"><b>Razón Social: @(modelo.Entidad.RazonSocial ?? "")</b></span>
                            </RadzenStack>
                            <RadzenStack>
                                <span style="color:#15153D;"><b>Tipo de Entidad: @(modelo.Entidad.TipoEntidad ?? "")</b></span>
                            </RadzenStack>
                        </div>

                        <FluentValidationValidator />

                        <div class="row ps-3 pt-3">
                            <div class="form-group col">
                                <RadzenFormField Text="Domicilio" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@(modelo.Entidad.Domicilio)" Disabled="@(!entidadEncontrada)" id="txtAddress" />
                                </RadzenFormField>
                                <ValidationMessage For="@(()=> @modelo.Entidad.Domicilio)" />
                            </div>


                            <div class="col mt-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="sedeInscripta" @bind="@modelo.Entidad.SedeSocialInscripta" disabled="@(!entidadEncontrada)">
                                    <label class="form-check-label" for="flexCheckDefault">¿Es Sede Social Inscripta?</label>
                                </div>
                            </div>
                        </div>

                        <div class="row  ps-3 pt-3 pe-3">
                            <div class="col">
                                <RadzenFormField Text="Fecha de Inicio" Style="width:100%">
                                    <RadzenDatePicker @bind-Value="@modelo.FechaInicio" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled="@(!entidadEncontrada)" Placeholder="dd/mm/yyyy" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelo.FechaInicio)" />

                            </div>
                            <div class="col">
                                <RadzenFormField Text="Fecha de Cierre" Style="width:100%">
                                    <RadzenDatePicker @bind-Value="@modelo.FechaDeCierre" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled="@(!entidadEncontrada)" Placeholder="dd/mm/yyyy" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelo.FechaDeCierre)" />
                            </div>
                        </div>

                        <div class="row  ps-3 pt-3 pe-3">
                            <div class="col mb-4">
                                <RadzenFormField Text="Email" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelo.Email" Disabled="@(!entidadEncontrada)" />
                                </RadzenFormField>
                                <ValidationMessage For="@(()=> @modelo.Email)" />
                            </div>
                        </div>

                        <div class="col mt-4 mb-4 d-flex justify-content-center">
                            @if (Navegacion.IdBalance != null)
                            {
                                <RadzenButton Variant="Radzen.Variant.Flat" Shade="Shade.Dark" Click=@EditarCaratula Text="Guardar" ButtonStyle="ButtonStyle.Info" />

                            }
                            else
                            {
                                <RadzenButton Variant="Radzen.Variant.Flat" Shade="Shade.Dark" Click=@IniciarTramite Text="Iniciar Trámite" ButtonStyle="ButtonStyle.Info" Disabled="@(!entidadEncontrada ||tramiteIniciado )" />

                            }
                        </div>
                    </EditForm>
                </RadzenStack>
            </div>


        }
    </div>

    @if (continuadora)
    {

        <div class="card w-100 ">
            <div class="card-header" style="color: white; font-weight: bold; text-align: center; background-color:#15153D;">
                Balances Previos
            </div>
            <div class="card-body">
                <RadzenGrid AllowColumnResize="true" Data="listaBalances" TItem="BalanceDto">
                    <Columns>
                        <RadzenGridColumn TItem="BalanceDto" Width="15%" Title="Fecha de Inicio">
                            <Template Context="data">
                                @($"{data.Caratula.FechaInicio.ToShortDateString()}")
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="BalanceDto" Width="15%" Title="Fecha de Cierre">
                            <Template Context="data">
                                @($"{data.Caratula.FechaDeCierre.ToShortDateString()}")
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="BalanceDto" Width="35%" Title="ID">
                            <Template Context="data">
                                @($"{data.Id}")  /  @(data.Caratula.Rectificatorio ? "Rectificación" : "Original")
                            </Template>
                        </RadzenGridColumn>

                        <RadzenGridColumn TItem="BalanceDto" Width="35%" Title="Recuperar Balance / Rectificar">
                            <Template Context="balance">


                                <abbr title="Generar Nuevo Con Balance Previo">
                                    <RadzenButton Icon="history" Text="Recuperar Bal." ButtonStyle="ButtonStyle.Warning" Click="@(() => NuevoDesde(balance.Id))"></RadzenButton>
                                </abbr>
                                <abbr title="Rectificar Balance">
                                    <RadzenButton Icon="cached" Text="Rectificar" ButtonStyle="ButtonStyle.Danger" Click="@(() => RectificarTramite(balance.Id))"></RadzenButton>
                                </abbr>

                            </Template>
                        </RadzenGridColumn>
                    </Columns>

                </RadzenGrid>
            </div>
        </div>
    }

</div>



@code {
    private ElementReference addressBox;
    private RadzenTextBox? addressBoxRadzenTextBox;
    private Autocomplete? autocomplete;
    private string? placeData;
    private string? formattedAddress;
    [Parameter] public string? TipoEntidad { get; set; }
    [Parameter] public string? RazonSocial { get; set; }
    private BusquedaEntidadRequest modelbusqueda = new();
    private bool rectificatoria = false;
    private bool continuadora = false;
    private string IdTramite;
    private bool entidadEncontrada;
    public static bool isActive = false;
    [Parameter]
    public string? balid { get; set; } = null;
    [Parameter]
    public string sesionId { get; set; }
    public string? sesion { get; set; }
    private bool tramiteIniciado = false;
    public List<BalanceDto> listaBalances = new();
    private CaratulaDto modelo = new CaratulaDto
        {
            Entidad = new Model.Entidad()

        };
    private Regex emailRegex = new Regex(@"^[^\s@]+@[^\s@]+\.[^\s@]+$", RegexOptions.Compiled);




    protected override async Task OnInitializedAsync()
    {

        await Load();

        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        try
        {

            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");

            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();

                sesionId = sesionRespuesta.Result;
                await sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rsp = await sesionService.getBalanceId(sesionId);

                if (rsp is not null)
                {
                    balid = rsp;

                    var response = await balanceService.getBalance(rsp);

                    if (response.IsSuccess)
                    {
                        var result = response.Result;

                        if (result != null)
                        {
                            var resultCaratula = result.Caratula;

                            setPropertiesCaratula(resultCaratula);

                            Navegacion.TipoEntidad = resultCaratula.Entidad.TipoEntidad;
                            Navegacion.RazonSocial = resultCaratula.Entidad.RazonSocial;
                            Navegacion.NroCorrelativo = resultCaratula.Entidad.Correlativo;
                            Navegacion.FechaDeCierre = resultCaratula.FechaDeCierre;
                            Navegacion.IdBalance = response.Result.Id;
                            Navegacion.Rectificacion = resultCaratula.Rectificatorio;

                            entidadEncontrada = true;
                            tramiteIniciado = true;
                        }
                    }

                }
                else
                {
                    entidadEncontrada = false;
                }

                StateHasChanged();

            }

        }

        catch
        {

            throw;

        }


    }

    private void setPropertiesCaratula(Model.Caratula caratula)
    {

        modelo.Email = caratula.Email;
        modelo.FechaInicio = caratula.FechaInicio;
        modelo.FechaDeCierre = caratula.FechaDeCierre;
        modelo.Entidad.Domicilio = caratula.Entidad.Domicilio;
        modelo.Entidad.Correlativo = caratula.Entidad.Correlativo;
        modelo.Entidad.RazonSocial = caratula.Entidad.RazonSocial;
        modelo.Entidad.TipoEntidad = caratula.Entidad.TipoEntidad;
        modelo.Entidad.SedeSocialInscripta = caratula.Entidad.SedeSocialInscripta;


    }

    private async Task FindEntities()
    {


        int numericNroCorrelativo;

        if (modelo.Entidad != null)
        {
            BusquedaEntidadValidator busquedavalidator = new BusquedaEntidadValidator();
            ValidationResult result = busquedavalidator.Validate(modelbusqueda);

            if (result.IsValid)
            {

                if (int.TryParse(modelbusqueda.NroCorrelativoNroCUIL, out numericNroCorrelativo))
                {
                    try
                    {



                        var response = await busquedaSociedadService.findSociedad(modelbusqueda.NroCorrelativoNroCUIL);

                        StateHasChanged();

                        if (response != null)
                        {

                            var rsp = await balanceService.listBalances(modelbusqueda.NroCorrelativoNroCUIL);

                            if (rsp.IsSuccess)
                            {
                                listaBalances = rsp.Result;

                            }

                            modelo.Entidad.Correlativo = response.Result.NroCorrelativo;
                            modelo.Entidad.RazonSocial = response.Result.RazonSocial ?? "Entidad no encontrada";
                            modelo.Entidad.TipoEntidad = response.Result.TipoEntidad;

                            entidadEncontrada = true;
                            StateHasChanged();
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
                    }


                }


            }
            else
            {
                modelo = new CaratulaDto();
            }

        }
    }

    private async Task IniciarTramite()
    {


        try
        {

            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
            modelo.SesionId = sesionId;


            CaratulaValidator caratulaValidator = new();
            ValidationResult result = caratulaValidator.Validate(modelo);


            if (result.IsValid)
            {
                var alerta = await swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Inicio de tramite presentacion de balances y asamblea",
                        Text = $" Verique Datos: {modelo.Entidad.RazonSocial} {modelo.Entidad.TipoEntidad}, Correlativo: {modelo.Entidad.Correlativo} Fecha cierre ejercicio: {modelo.FechaDeCierre?.ToString("dd/MM/yyyy")}",
                        Icon = SweetAlertIcon.Warning,
                        ShowCancelButton = true,
                        CancelButtonText = "Cancelar",
                        ConfirmButtonText = "Confirmar"

                    });
                if (alerta.IsConfirmed)
                {
                    var rsp = await caratulaService.insertCaratula(modelo);

                    if (rsp.IsSuccess)
                    {
                        await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Presentacion iniciada exitosamente",
                                Text = $" Te va a llegar un correo {modelo.Email} con un enlace para poder continuar la carga en cualquier instante y lugar.  ",
                                Icon = SweetAlertIcon.Success,
                                ShowCancelButton = true,
                                ConfirmButtonText = "Aceptar"

                            });

                        var resultCaratula = rsp.Result.Caratula;

                        Navegacion.TipoEntidad = resultCaratula.Entidad.TipoEntidad;
                        Navegacion.RazonSocial = resultCaratula.Entidad.RazonSocial;
                        Navegacion.NroCorrelativo = resultCaratula.Entidad.Correlativo;
                        Navegacion.FechaDeCierre = resultCaratula.FechaDeCierre;
                        Navegacion.IdBalance = rsp.Result.Id;

                        isActive = true;
                        tramiteIniciado = true;


                        StateHasChanged();
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: IniciarTramites {ex.Message}");
            await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"No se ha podido iniciar el tramite de presentación",
                    Icon = SweetAlertIcon.Error,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar"

                });
        }


        StateHasChanged();

    }

    private void ResetCaratula()
    {
        tramiteIniciado = false;
    }

    private async Task EditarCaratula()
    {


        try
        {

            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
            modelo.SesionId = sesionId;


            CaratulaValidator caratulaValidator = new();
            ValidationResult result = caratulaValidator.Validate(modelo);


            if (result.IsValid)
            {
                var alerta = await swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Inicio de tramite presentacion de balances y asamblea",
                        Text = $" Verique Datos: {modelo.Entidad.RazonSocial} {modelo.Entidad.TipoEntidad}, Correlativo: {modelo.Entidad.Correlativo} Fecha cierre ejercicio: {modelo.FechaDeCierre?.ToString("dd/MM/yyyy")}",
                        Icon = SweetAlertIcon.Warning,
                        ShowCancelButton = true,
                        CancelButtonText = "Cancelar",
                        ConfirmButtonText = "Confirmar"

                    });
                if (alerta.IsConfirmed)
                {
                    var rsp = await caratulaService.updateCaratula(modelo);

                    if (rsp.IsSuccess)
                    {
                        await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Presentacion iniciada exitosamente",
                                Text = $" Te va a llegar un correo {modelo.Email} con un enlace para poder continuar la carga en cualquier instante y lugar.  ",
                                Icon = SweetAlertIcon.Success,
                                ShowCancelButton = true,
                                ConfirmButtonText = "Aceptar"

                            });

                        isActive = true;
                        tramiteIniciado = true;


                        StateHasChanged();
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: IniciarTramites {ex.Message}");
            await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"No se ha podido iniciar el tramite de presentación",
                    Icon = SweetAlertIcon.Error,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Aceptar"

                });
        }


        StateHasChanged();


        StateHasChanged();

    }

    private async Task RectificarTramite(string id)
    {
        NavigationManager.NavigateTo($"Rectificar/{id}");
    }

    private async Task NuevoDesde(string id)
    {
        NavigationManager.NavigateTo($"NuevoDesdeCarga/{id}");
    }

}