@page "/Caratula/{balid?}"
@using Balances.DTO;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using Microsoft.AspNetCore.Http;
@using Microsoft.JSInterop
@using Balances.Web.Services
@using System.Text.RegularExpressions;
@using Newtonsoft.Json;
@using static Microsoft.AspNetCore.Hosting.Internal.HostingApplication;
@inject IJSRuntime JS
@inject ICaratulaClientService caratulaService
@inject IBaseSessionClientService sesionService
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IHttpContextAccessor httpContextAccessor



<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Búsqueda de Entidad</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />

        <!-- Bootstrap 5 CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

        <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
        <link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />
        <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
    </head>

    <body>

        <!--Navegacion-->

       
        <Navegacion Entidad="@($"{TipoEntidad}")"  PaginaActiva="Caratula" TramiteIniciado="@tramiteIniciado"></Navegacion>

        <!--Loading-->

        <Modal @ref="modalRef">
            <ModalContent>
                <ModalBody>
                    <div class="d-flex justify-content-center align-items-center" >
                        <div class="text-center">
                            <div class="spinner-grow text-primary" role="status">
                                <span class="sr-only"></span>
                            </div>
                            <div class="spinner-grow text-secondary" role="status">
                                <span class="sr-only"></span>
                            </div>
                            <div class="spinner-grow text-success" role="status">
                                <span class="sr-only"></span>
                            </div>
                            <div class="spinner-grow text-danger" role="status">
                                <span class="sr-only"></span>
                            </div>
                            <div class="spinner-grow text-warning" role="status">
                                <span class="sr-only"></span>
                            </div>
                            <div class="spinner-grow text-info" role="status">
                                <span class="sr-only"></span>
                            </div>
                            <div class="spinner-grow text-light" role="status">
                                <span class="sr-only"></span>
                            </div>
                            <div class="spinner-grow text-dark" role="status">
                                <span class="sr-only"></span>
                            </div>
                            <div>
                                Loading...
                            </div>
                        </div>
                    </div>
                </ModalBody>
            </ModalContent>
        </Modal>
     

        <!---------------------------------------------------------------->
        <!--Entidad-->

        <div class="container mt-2 mb-3">
            <div class="card mx-auto">
                <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                    Entidad
                </div>


                <div class="card-body">
                    <div class="row d-flex justify-content-center align-items-end position-relative">
                    
                        <div class="col">
                            <label for="busqueda">Nro.Correlativo/CUIT/CUIL</label>
                            <input type="text w-50"  @bind="@modelo.Entidad.Correlativo" class="form-control" required data-bs-toggle="tooltip" data-bs-placement="top" disabled ="@tramiteIniciado" >
                           
                        </div>

                        <div class="col mt-4">
                            <button type="submit" id="btnBuscar" class="btn btn-primary" @onclick="FindEntities" disabled="@entidadEncontrada">Buscar</button>
                        </div>
                    </div>
                    <small id="busquedaError" class="text-danger">@busquedaError</small>
                    
                   
                    <div class="row mt-2">
                        <div class="col-12 col-md-3">
                            <p class="control texto">Razón Social:</p>
                        </div>
                        <div class="col">
                        <p id="razonSocial">@modelo.Entidad.RazonSocial</p>
                        </div>                       
                    </div>
                    <div class="row mt-2">
                        <div class="col-12 col-md-3">
                            <p class="control texto">Tipo de Entidad:</p>
                        </div>
                        <div class="col">
                        <p id="tipoEntidad">@modelo.Entidad.TipoEntidad</p>
                        </div>
                    </div>
                </div>
            </div>
        
            <!--Datos Personales -->

       <div class="card mx-auto mt-4 ">
 
            <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                Datos Personales
            </div>
            
            @if (@entidadEncontrada)
            {
                <div class="row ps-3 pt-3">
                    <div class="form-group col">
                        <label for="location">Domicilio</label>
                        <input type="text" @bind=@modelo.Entidad.Domicilio class="form-control" id="domicilio" placeholder="Domicilio" disabled="@tramiteIniciado">
                        <small id="fechaError" class="text-danger">@domicilioError</small>

                    </div>

                    <div class="col mt-4">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="sedeInscripta" @bind="@modelo.Entidad.SedeSocialInscripta" disabled="@tramiteIniciado">
                            <label class="form-check-label" for="flexCheckDefault">¿Es Sede Social Inscripta?</label>
                        </div>
                    </div>
                </div>

                <div class="row  ps-3 pt-3 pe-3">
                    <div class="col">
                        <label for="domicilio">Fecha de inicio</label>
                        <input type="date" id="fechaDeInicio" class="form-control" placeholder="Fecha de Inicio" @bind=@modelo.FechaInicio disabled="@tramiteIniciado" />
                        <small id="fechaError" class="text-danger">@fechaErrorInicio</small>

                    </div>
                    <div class="col">
                        <label for="domicilio">Fecha de Cierre</label>
                        <input type="date" id="fechaDeCierre" class="form-control" placeholder="Fecha de Cierre" @bind=@modelo.FechaDeCierre disabled="@tramiteIniciado" />
                        <small id="fechaError" class="text-danger">@fechaErrorCierre</small>
                    </div>
                </div>

                <div class="row  ps-3 pt-3 pe-3">
                    <div class="col mb-4">
                        <label for="email">Email</label>
                        <input type="email" id="email" class="form-control" required data-bs-toggle="tooltip" @bind=@modelo.Email data-bs-placement="top" disabled="@tramiteIniciado" />
                        <small id="emailError" class="text-danger">@emailError</small>
                    </div>
                </div>

                <div class="col mt-4 mb-4 d-flex justify-content-center">
                    <button type="button" id="btnInit" class="btn btn-primary w-50 @(!entidadEncontrada || tramiteIniciado ? "btn-secondary" : "btn-primary")" @onclick="@IniciarTramites" disabled="@(!entidadEncontrada ||tramiteIniciado )">Iniciar trámite</button>
                </div>

             
                
           
            }
            else
            {
                <div class="row ps-3 pt-3">
                    <div class="form-group col">
                        <label for="location">Domicilio</label>
                        <input type="text" class="form-control" id="domicilio" placeholder="Domicilio" disabled>

                    </div>

                    <div class="col mt-4">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="sedeInscripta" disabled>
                            <label class="form-check-label" for="flexCheckDefault">¿Es Sede Social Inscripta?</label>
                        </div>
                    </div>
                </div>

                <div class="row  ps-3 pt-3 pe-3">
                    <div class="col">
                        <label for="domicilio">Fecha de inicio</label>
                        <input type="date" id="fechaDeInicio" class="form-control" placeholder="Fecha de Inicio" disabled />
                        <small id="fechaError" class="text-danger"></small>

                    </div>
                    <div class="col">
                        <label for="domicilio">Fecha de Cierre</label>
                        <input type="date" id="fechaDeCierre" class="form-control" placeholder="Fecha de Cierre" disabled />
                        <small id="fechaError" class="text-danger"></small>
                    </div>
                </div>

                <div class="row  ps-3 pt-3 pe-3">
                    <div class="col mb-4">
                        <label for="email">Email</label>
                        <input type="email" id="email" class="form-control" required data-bs-toggle="tooltip" data-bs-placement="top" disabled />
                        <small id="emailError" class="text-danger"></small>
                    </div>
                </div>

               
                <div class="col mt-4 mb-4 d-flex justify-content-center">
                    <button type="button" id="btnInit" class="btn btn-secondary w-50" disabled>Iniciar Trámite</button>
                </div>
        
            }

             
             </div>
        </div>
     
    </body>
    

</html>

@code {


    private string busquedaError = "";
    private string emailError = "";
    private string fechaErrorInicio = "";
    private string fechaErrorCierre = "";
    private string domicilioError = "";

    private bool entidadEncontrada;
    private string idSession = "";
    public static bool isActive = false;


    // reference to the modal component
    private Modal modalRef;

    [Parameter]
    public string? balid { get; set; }


    [Parameter] public string? TipoEntidad { get; set; }
    // [Parameter] public string? RazonSocial { get; set; }

    private bool tramiteIniciado = false;


    private CaratulaDto modelo = new CaratulaDto
        {
            Entidad = new Model.Entidad()

        };

    private Regex emailRegex = new Regex(@"^[^\s@]+@[^\s@]+\.[^\s@]+$", RegexOptions.Compiled);

    protected override async Task OnInitializedAsync()
    {


        await Load();


        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        try
        {


            var sesion = await sesionService.getSession();

            if (sesion.IsSuccess)
            {

                var balanceId = SessionStorageHelper.GetBalanceId(sesion.Result);

                var response = await caratulaService.getBalance(balanceId);

                if (response.IsSuccess)
                {
                    var result = response.Result;

                    if (result != null)
                    {
                        Model.Caratula caratula = result.Caratula;

                        modelo.Email = caratula.Email;
                        modelo.FechaInicio = caratula.FechaInicio;
                        modelo.FechaDeCierre = caratula.FechaDeCierre;
                        modelo.Entidad.Domicilio = caratula.Entidad.Domicilio;
                        modelo.Entidad.Correlativo = caratula.Entidad.Correlativo;
                        modelo.Entidad.RazonSocial = caratula.Entidad.RazonSocial;
                        modelo.Entidad.TipoEntidad = caratula.Entidad.TipoEntidad;
                        modelo.Entidad.SedeSocialInscripta = caratula.Entidad.SedeSocialInscripta;

                        TipoEntidad = caratula.Entidad.TipoEntidad;
                        //  RazonSocial = caratula.Entidad.RazonSocial;


                        entidadEncontrada = true;
                        tramiteIniciado = true;
                    }
                }

                else
                {
                    entidadEncontrada = false;

                }

                StateHasChanged();


            }
            else
            {
                sesion.Message = "Mal Parseo de Json";
            }
        }

        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }


    }




    private async Task FindEntities()
    {


        int numericNroCorrelativo;

        if (modelo != null)
        {
            if (string.IsNullOrEmpty(modelo.Entidad.Correlativo))
            {
                busquedaError = "El campo no puede estar vacío";
                return;
            }

            if (int.TryParse(modelo.Entidad.Correlativo, out numericNroCorrelativo))
            {
                busquedaError = "";


                try
                {
                    await ShowLoadingModal();

                    var response = await caratulaService.findEntities(modelo.Entidad.Correlativo);

                    if (response != null)
                    {
                        modelo.Entidad.RazonSocial = response.Result.RazonSocial ?? "Entidad no encontrada";
                        modelo.Entidad.TipoEntidad = response.Result.TipoEntidad;

                        TipoEntidad = response.Result.TipoEntidad;
                        //   RazonSocial = response.Result.RazonSocial;

                        entidadEncontrada = true;

                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
                }
                finally
                {
                    await HideLoadingModal();
                    StateHasChanged();
                }

            } 
            else
            {
                busquedaError = "El campo tiene que ser numérico";
            }
        }
        else
        {
            modelo = new CaratulaDto();    
        }

    }

    private async Task IniciarTramites()
    {

        await ShowLoadingModal();

        try
        {
            if (checkData())
            {
                var response = await caratulaService.initTramite(modelo);

                if (response.IsSuccess)
                {

                  
                  await sesionService.setSession(response.Result.Id);

                    isActive = true;
                    tramiteIniciado = true;


                    StateHasChanged();
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: IniciarTramites {ex.Message}");
        }
        finally
        {
            await HideLoadingModal();
            StateHasChanged();
        }


    }

    private bool checkData()
    {
        if (modelo.Entidad.Domicilio != null)
        {
            domicilioError = "";
        }
        else
        {
            domicilioError = "El campo no puede estar vacío";
            return false;
        }


        if (modelo.FechaInicio != null)
        {
            fechaErrorInicio = "";
        }
        else
        {
            fechaErrorInicio = "Seleccioná la fecha correspondiente";
            return false;
        }

        if (modelo.FechaDeCierre != null)
        {
            fechaErrorCierre = "";
        }
        else
        {
            fechaErrorCierre = "Seleccioná la fecha correspondiente";
            return false;
        }



        if (modelo.FechaInicio != null && modelo.FechaDeCierre != null)
        {
            if (modelo.FechaInicio.Value == modelo.FechaDeCierre.Value)
            {
                fechaErrorInicio = "Ambas fechas son iguales";
                fechaErrorCierre = "Ambas fechas son iguales";

                return false;
            }
            else
            {
                if (modelo.FechaInicio.Value < modelo.FechaDeCierre.Value)
                {
                    fechaErrorInicio = "";
                    fechaErrorCierre = "";

                }
                else
                {
                    fechaErrorInicio = "La fecha de inicio tiene que ser menor a la fecha del cierre"; 

                    return false;    
                }

            }
        }

        if (modelo.Email != null)
        {
            emailError = "";
            if (Validator.IsEmail(modelo.Email))
            {
                emailError = "";
            }
            else
            {
                emailError = "Ingresa tu mail correcto";
                return false;
            }

        }
        else
        {
            emailError = "El campo no puede esta vacio";
            return false;
        }

        emailError = "";
        domicilioError = "";
        fechaErrorCierre = "";
        fechaErrorInicio = "";
        return true;    
    }


    // Método para mostrar el modal de carga
    private Task ShowLoadingModal()
    {
        return modalRef.Show();
    }

    // Método para ocultar el modal de carga
    private Task HideLoadingModal()
    {
        return modalRef.Hide();
    }


}

