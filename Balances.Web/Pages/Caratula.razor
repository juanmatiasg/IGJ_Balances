@page "/Caratula/{balid?}"
@using Balances.DTO;
@using Balances.Model
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using FluentValidation.Results
@using Microsoft.AspNetCore.Http;
@using Microsoft.JSInterop
@using Balances.Web.Services
@using System.Text.RegularExpressions;
@using Newtonsoft.Json;
@using static Microsoft.AspNetCore.Hosting.Internal.HostingApplication;
@inject IJSRuntime JS

@inject ICaratulaClientService caratulaService
@inject IBalanceClientService balanceService 
@inject ISessionClientService sesionService
@inject IBusquedaDeSociedadesClientService busquedaSociedadService 
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IHttpContextAccessor httpContextAccessor
@inject DialogService dialogService
@inject SweetAlertService swal

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Búsqueda de Entidad</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />

        <!-- Bootstrap 5 CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

        <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
        <link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />
        <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
    </head>

    <body>
    <!--Navegacion-->
      <Navegacion Entidad="@($"{TipoEntidad}")"  PaginaActiva="Caratula" TramiteIniciado="@tramiteIniciado" balid="@balid"></Navegacion>

    <!--Loading-->
    <RadzenDialog />


    <!---------------------------------------------------------------->
    <!--Entidad-->


    <div class="container mt-2">
            
        <div class="card mx-auto  bg-light">
            <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                Entidad
            </div>

            <div class="card-body">
                <EditForm Model="modelbusqueda">
                    <FluentValidationValidator />
                    <div class="row d-flex justify-content-center align-items-end position-relative">
               
                    <div class="col">
                        <RadzenFormField Text="Nro.Correlativo / CUIT / CUIL" Style="width:100%">
                                <RadzenTextBox @bind-Value="modelbusqueda. NroCorrelativoNroCUIL" />
                          
                        </RadzenFormField>
                            <ValidationMessage For="@(()=> modelbusqueda. NroCorrelativoNroCUIL)" />
                    </div>

                    <div class="col mt-4">
                            <RadzenButton ButtonType="Radzen.ButtonType.Submit" Variant="Variant.Flat" Shade="Shade.Dark" Click=FindEntities Text="Buscar" ButtonStyle="ButtonStyle.Info" />
                    </div>
                </div>
                </EditForm>
                @if(modelo is not null){
                    <RadzenCard class="rz-background-color-primary-dark --rz-primary-darker rz-border-radius-20 rz-pt-8 rz-ps-8 rz-pe-8" style="margin-top:20px;">
                        <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Detalles de Identidad</strong></RadzenText>
                        <RadzenRow RowGap="0">
                            <RadzenColumn SizeSM="4">
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Correlativo</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@modelo.Entidad.Correlativo</b></RadzenText>
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Razón Social</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@modelo.Entidad.RazonSocial</b></RadzenText>
                                <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Tipo de Entidad</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@modelo.Entidad.TipoEntidad</b></RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>
                }
                

            </div>
        </div>

        <!--Datos Personales -->

        <div class="card mx-auto mt-4 mb-4  bg-light">

            <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                Datos Personales
            </div>

            @if (@entidadEncontrada)
            {
               <EditForm Model="modelo">
                <FluentValidationValidator />
                
                <div class="row ps-3 pt-3">
                
                    <div class="form-group col">
                        <RadzenFormField Text="Domicilio" Style="width:100%">
                            <RadzenTextBox @bind-Value="@modelo.Entidad.Domicilio" Disabled="@tramiteIniciado" id="txtAddress" />
                        </RadzenFormField>
                        <ValidationMessage For="@(()=> @modelo.Entidad.Domicilio)" />
                    </div>
                     

                    <div class="col mt-4">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="sedeInscripta" @bind="@modelo.Entidad.SedeSocialInscripta" disabled="@tramiteIniciado">
                            <label class="form-check-label" for="flexCheckDefault">¿Es Sede Social Inscripta?</label>
                        </div>
                    </div>
                </div>

                <div class="row  ps-3 pt-3 pe-3">
                    <div class="col">
                        <RadzenFormField Text="Fecha de Inicio" Style="width:100%">
                            <RadzenDatePicker @bind-Value="@modelo.FechaInicio" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled="@tramiteIniciado" Placeholder="dd/mm/yyyy" />
                        </RadzenFormField>

                        <ValidationMessage For="@(()=> @modelo.FechaInicio)" />
                    </div>
                    <div class="col">
                        <RadzenFormField  Text="Fecha de Cierre" Style="width:100%">
                            <RadzenDatePicker @bind-Value="@modelo.FechaDeCierre" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled="@tramiteIniciado" Placeholder="dd/mm/yyyy" />
                        </RadzenFormField>

                        <ValidationMessage For="@(()=> @modelo.FechaDeCierre)" />
                    </div>
                </div>

                <div class="row  ps-3 pt-3 pe-3">
                    <div class="col mb-4">
                        <RadzenFormField Text="Email" Style="width:100%">
                            <RadzenTextBox @bind-Value="@modelo.Email" Disabled="@tramiteIniciado" />
                        </RadzenFormField>
                        <ValidationMessage For="@(()=> @modelo.Email)" />
                    </div>
                </div>

                <div class="col mt-4 mb-4 d-flex justify-content-center">
                        <RadzenButton   ButtonType="Radzen.ButtonType.Submit" Variant="Variant.Flat" Shade="Shade.Dark" Click=IniciarTramite Text="Iniciar Trámite" ButtonStyle="ButtonStyle.Info" Disabled="@(!entidadEncontrada ||tramiteIniciado )" />
                </div>

                </EditForm>
               
            }
                          
        </div>
    </div>
    </body>
</html>

@code {
    private BusquedaEntidadRequest modelbusqueda = new();
    private bool entidadEncontrada;
    public static bool isActive = false;


    // reference to the modal component
    private Modal modalRef;

    [Parameter]
    public string? balid { get; set; } = null;


    [Parameter]
    public string sesionId { get; set; }
    //[Parameter]
    public string? sesion { get; set; }

    [Parameter] public string? RazonSocial { get; set; }

    [Parameter] public string? TipoEntidad { get; set; }
    // [Parameter] public string? RazonSocial { get; set; }

    private bool tramiteIniciado = false;


    private CaratulaDto modelo = new CaratulaDto
        {
            Entidad = new Model.Entidad()

        };

    private Regex emailRegex = new Regex(@"^[^\s@]+@[^\s@]+\.[^\s@]+$", RegexOptions.Compiled);

    protected override async Task OnInitializedAsync()
    {


        await Load();


        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        try
        {
            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");

            if(sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();

                sesionId = sesionRespuesta.Result;
                sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rsp = await sesionService.getBalanceId(sesionId);

                if(rsp is not null)
                {
                    balid = rsp;

                    var response = await balanceService.getBalance(rsp);

                    if (response.IsSuccess)
                    {
                        var result = response.Result;
                        Model.Caratula caratula = result.Caratula;

                        modelo.Email = caratula.Email;
                        modelo.FechaInicio = caratula.FechaInicio;
                        modelo.FechaDeCierre = caratula.FechaDeCierre;
                        modelo.Entidad.Domicilio = caratula.Entidad.Domicilio;
                        modelo.Entidad.Correlativo = caratula.Entidad.Correlativo;
                        modelo.Entidad.RazonSocial = caratula.Entidad.RazonSocial;
                        modelo.Entidad.TipoEntidad = caratula.Entidad.TipoEntidad;
                        modelo.Entidad.SedeSocialInscripta = caratula.Entidad.SedeSocialInscripta;

                        TipoEntidad = caratula.Entidad.TipoEntidad;
                        //  RazonSocial = caratula.Entidad.RazonSocial;


                        entidadEncontrada = true;
                        tramiteIniciado = true;
                    }

                }
                else
                {
                    entidadEncontrada = false;
                }

                StateHasChanged();

            }



        }

        catch (Exception ex)
        {

            //Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");
            throw;

        }


    }






    private async Task FindEntities()
    {


        int numericNroCorrelativo;

        if (modelo != null)
        {
            BusquedaEntidadValidator busquedavalidator = new BusquedaEntidadValidator();
            ValidationResult result = busquedavalidator.Validate(modelbusqueda);

            if (result.IsValid)
            {

                if (int.TryParse(modelbusqueda.NroCorrelativoNroCUIL, out numericNroCorrelativo))
                {
                    try
                    {
                         await ShowBusyDialog();


                        var response = await busquedaSociedadService.findSociedad(modelbusqueda.NroCorrelativoNroCUIL);

                        if (response != null)
                        {
                            modelo.Entidad.Correlativo = response.Result.NroCorrelativo  ;
                            modelo.Entidad.RazonSocial = response.Result.RazonSocial ?? "Entidad no encontrada";
                            modelo.Entidad.TipoEntidad = response.Result.TipoEntidad;
                            
                            TipoEntidad = response.Result.TipoEntidad;
                            //   RazonSocial = response.Result.RazonSocial;

                            entidadEncontrada = true;

                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
                    }
                        StateHasChanged();

                }

            }
            else
            {
                modelo = new CaratulaDto();
            }

            }
           

    }

    private async Task IniciarTramite()
    {

        await ShowBusyDialog();

        try
        {
           
                sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
                modelo.SesionId = sesionId;

                CaratulaValidator caratulaValidator = new();
                ValidationResult result = caratulaValidator.Validate(modelo);

                if (result.IsValid)
                {
                    var rsp = await caratulaService.insertCaratula(modelo);

                    if (rsp.IsSuccess)
                    {


                        isActive = true;
                        tramiteIniciado = true;


                        StateHasChanged();
                    }
                }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: IniciarTramites {ex.Message}");
        }

            StateHasChanged();

    }

   


    async Task ShowBusyDialog()
    {
        InvokeAsync(async () =>
    {
        // Simulate background task
        await Task.Delay(2000);

        // Close the dialog
        dialogService.Close();
    });



        await BusyDialog();

    }

    // Busy dialog from markup
    async Task BusyDialog()
    {
        await dialogService.OpenAsync("", ds =>
    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
        <RadzenImage Path="img/community.svg" Style="width: 200px;" AlternateText="community" />
        <RadzenText TextStyle="TextStyle.H6">Cargando...</RadzenText>
    </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }





}

