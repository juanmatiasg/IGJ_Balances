@page "/Caratula/{balid?}"
@using Balances.DTO;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using Microsoft.AspNetCore.Http;
@using Microsoft.JSInterop
@using Balances.Web.Services
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using GoogleMapsComponents.Maps.Places

@using static Microsoft.AspNetCore.Hosting.Internal.HostingApplication;
@inject IJSRuntime JS
@inject ICaratulaClientService caratulaService
@inject IBalanceClientService balanceService 
@inject ISessionClientService sesionService
@inject IBusquedaDeSociedadesClientService busquedaSociedadService 
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IHttpContextAccessor httpContextAccessor
@inject DialogService dialogService



<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Búsqueda de Entidad</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />

        <!-- Bootstrap 5 CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

        <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
        <link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />
        <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
         <script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
    </head>

    <body>

    
        <!--Navegacion-->

       
        <Navegacion Entidad="@($"{TipoEntidad}")"  PaginaActiva="Caratula" TramiteIniciado="@tramiteIniciado" balid="@balid"></Navegacion>

        <!--Loading-->
        <RadzenDialog />


        <!---------------------------------------------------------------->
        <!--Entidad-->
           
            
        <div class="container mt-2">
            <div class="card mx-auto">
                    <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                        Entidad
                    </div>

                    <div class="card-body">
                        <div class="row d-flex justify-content-center align-items-end position-relative">
                    
                            <div class="col">
                                <RadzenFormField Text="Nro.Correlativo / CUIT / CUIL" Style ="width:100%">
                                    <RadzenTextBox @bind-Value="@modelo.Entidad.Correlativo" />
                                </RadzenFormField>
                            </div>

                            <div class="col mt-4">                                
                                <RadzenButton Variant="Variant.Flat" Shade="Shade.Dark" Click=FindEntities Text="Buscar" ButtonStyle="ButtonStyle.Info" />
                            </div>
                        </div>
                        <small id="busquedaError" class="text-danger">@busquedaError</small>

                                <RadzenCard class="rz-background-color-primary-dark --rz-primary-darker rz-border-radius-20 rz-pt-8 rz-ps-8 rz-pe-8" style="margin-top:20px;">
                                    <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Detalles de Identidad</strong></RadzenText>
                                    <RadzenRow RowGap="0">
                                        <RadzenColumn SizeSM="4">
                                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Razón Social</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@modelo.Entidad.RazonSocial</b></RadzenText>
                                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Tipo de Entidad</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@modelo.Entidad.TipoEntidad</b></RadzenText>
                                        </RadzenColumn>  
                                    </RadzenRow>
                               </RadzenCard>
                    
                    </div>
            </div>
        
            <!--Datos Personales -->

           <div class="card mx-auto mt-4 mb-4">
 
                <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                    Datos Personales
                </div>
            
                @if (@entidadEncontrada)
                {
                    <div class="row ps-3 pt-3">
                        <div class="form-group col">
                            <RadzenFormField Text="Domicilio" Style="width:100%">
                            <RadzenTextBox @bind-Value="@modelo.Entidad.Domicilio" Disabled="@tramiteIniciado" id="txtAddress" />

                            </RadzenFormField>
                            <small id="fechaError" class="text-danger">@domicilioError</small>

                        </div>

                        <div class="col mt-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="sedeInscripta" @bind="@modelo.Entidad.SedeSocialInscripta" disabled="@tramiteIniciado">
                                <label class="form-check-label" for="flexCheckDefault">¿Es Sede Social Inscripta?</label>
                            </div>
                        </div>
                    </div>

                    <div class="row  ps-3 pt-3 pe-3">
                        <div class="col">                     
                            <RadzenStack>
                                <RadzenLabel Text="Fecha de inicio" Component="DatePickerTimeOnlyType" Style="width:100%" />
                            <RadzenDatePicker @bind-Value="@modelo.FechaInicio" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled="@tramiteIniciado" Placeholder="dd/MM/yyyy" />
                            </RadzenStack>
                            <small id="fechaError" class="text-danger">@fechaErrorInicio</small>

                        </div>
                        <div class="col">
                            <RadzenStack>
                                <RadzenLabel Text="Fecha de cierre" Component="DatePickerTimeOnlyType" Style="width:100%" />
                                <RadzenDatePicker @bind-Value="@modelo.FechaDeCierre" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled="@tramiteIniciado" Placeholder="dd/MM/yyyy" />
                             </RadzenStack>
                            <small id="fechaError" class="text-danger">@fechaErrorCierre</small>
                        </div>
                    </div>

                    <div class="row  ps-3 pt-3 pe-3">
                        <div class="col mb-4">
                            <RadzenFormField Text="Email" Style="width:100%">
                                <RadzenTextBox @bind-Value="@modelo.Email" Disabled="@tramiteIniciado" />
                            </RadzenFormField>
                            <small id="emailError" class="text-danger">@emailError</small>
                        </div>
                    </div>

                    <div class="col mt-4 mb-4 d-flex justify-content-center">
                        <RadzenButton  Variant="Variant.Flat" Shade="Shade.Dark" Click=IniciarTramites Text="Iniciar Trámite" ButtonStyle="ButtonStyle.Info" Disabled="@(!entidadEncontrada ||tramiteIniciado )" />
                    </div>
                
                }
                else
                {
                <div class="row ps-3 pt-3 pe-3">
                        <div class="form-group col">
                            <RadzenFormField Text="Domicilio" Style="width:100%">
                                <RadzenTextBox @bind-Value="@modelo.Entidad.Domicilio" Disabled id="txtAddress" />

                            </RadzenFormField>

                        </div>

                        <div class="col mt-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="sedeInscripta" disabled>
                                <label class="form-check-label" for="flexCheckDefault">¿Es Sede Social Inscripta?</label>
                            </div>
                        </div>
                    </div>

                    <div class="row  ps-3 pt-3 pe-3">
                        <div class="col">
                            <RadzenStack>
                                <RadzenLabel Text="Fecha de inicio" Component="DatePickerTimeOnlyType" Style="width:100%" />
                            <RadzenDatePicker @bind-Value="@modelo.FechaInicio" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled Placeholder="dd/MM/yyyy" />
                            </RadzenStack>
                            <small id="fechaError" class="text-danger"></small>

                        </div>
                        <div class="col">
                             <RadzenStack>
                                 <RadzenLabel Text="Fecha de cierre" Component="DatePickerTimeOnlyType" Style="width:100%" />
                             <RadzenDatePicker @bind-Value="@modelo.FechaDeCierre" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled Placeholder="dd/MM/yyyy" />
                             </RadzenStack>
                            <small id="fechaError" class="text-danger"></small>
                        </div>
                    </div>

                    <div class="row  ps-3 pt-3 pe-3">
                        <div class="col mb-4">
                            <RadzenFormField Text="Email" Style="width:100%">
                                <RadzenTextBox @bind-Value="@modelo.Email" Disabled />
                            </RadzenFormField>
                            <small id="emailError" class="text-danger"></small>
                        </div>
                    </div>

               
                    <div class="col mt-4 mb-4 d-flex justify-content-center">
                        <RadzenButton  Variant="Variant.Flat" Shade="Shade.Dark" Click=IniciarTramites Text="Iniciar Trámite" ButtonStyle="ButtonStyle.Secondary" Disabled />
                    </div>
        
                 }
    
            </div> 
              
         </div>

    </body>
    

</html>

@code {

    

    private string busquedaError = "";
    private string emailError = "";
    private string fechaErrorInicio = "";
    private string fechaErrorCierre = "";
    private string domicilioError = "";

    private bool entidadEncontrada;
    private string idSession = "";
    public static bool isActive = false;


    // reference to the modal component
    private Modal modalRef;

    [Parameter]
    public string? balid { get; set; } = null;


    [Parameter]
    public string sesionId { get; set; }
    //[Parameter]
    public string? sesion { get; set; }


    [Parameter] public string? TipoEntidad { get; set; }
    // [Parameter] public string? RazonSocial { get; set; }

    private bool tramiteIniciado = false;


    private CaratulaDto modelo = new CaratulaDto
        {
            Entidad = new Model.Entidad()

        };

    private Regex emailRegex = new Regex(@"^[^\s@]+@[^\s@]+\.[^\s@]+$", RegexOptions.Compiled);

    protected override async Task OnInitializedAsync()
    {



        await Load();


        await base.OnInitializedAsync();
    }


    

    private async Task Load()
    {
        try
        {


            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");

            if(sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();

                sesionId = sesionRespuesta.Result;
                sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rsp = await sesionService.getBalanceId(sesionId);

                if(rsp is not null)
                {
                    balid = rsp;

                    var response = await balanceService.getBalance(rsp);

                    if (response.IsSuccess)
                    {
                        var result = response.Result;
                        Model.Caratula caratula = result.Caratula;

                        modelo.Email = caratula.Email;
                        modelo.FechaInicio = caratula.FechaInicio;
                        modelo.FechaDeCierre = caratula.FechaDeCierre;
                        modelo.Entidad.Domicilio = caratula.Entidad.Domicilio;
                        modelo.Entidad.Correlativo = caratula.Entidad.Correlativo;
                        modelo.Entidad.RazonSocial = caratula.Entidad.RazonSocial;
                        modelo.Entidad.TipoEntidad = caratula.Entidad.TipoEntidad;
                        modelo.Entidad.SedeSocialInscripta = caratula.Entidad.SedeSocialInscripta;

                        TipoEntidad = caratula.Entidad.TipoEntidad;
                        //  RazonSocial = caratula.Entidad.RazonSocial;


                        entidadEncontrada = true;
                        tramiteIniciado = true;
                    }

                }
                else
                {
                    entidadEncontrada = false;
                }

                StateHasChanged();

            }



        }

        catch (Exception ex)
        {

            throw;

        }


    }






    private async Task FindEntities()
    {

        await ShowBusyDialog();

        int numericNroCorrelativo;

        if (modelo != null)
        {
            if (string.IsNullOrEmpty(modelo.Entidad.Correlativo))
            {
                busquedaError = "El campo no puede estar vacío";
                return;
            }

            if (int.TryParse(modelo.Entidad.Correlativo, out numericNroCorrelativo))
            {
                busquedaError = "";


                try
                {

                    var response = await busquedaSociedadService.findSociedad(modelo.Entidad.Correlativo);

                    if (response != null)
                    {

                        modelo.Entidad.RazonSocial = response.Result.RazonSocial ?? "Entidad no encontrada";
                        modelo.Entidad.TipoEntidad = response.Result.TipoEntidad;

                        TipoEntidad = response.Result.TipoEntidad;
                        //   RazonSocial = response.Result.RazonSocial;

                        entidadEncontrada = true;

                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
                }
               
                  
                    StateHasChanged();
                

            } 
            else
            {
                busquedaError = "El campo tiene que ser numérico";
            }
        }
        else
        {
            modelo = new CaratulaDto();    
        }

    }

    private async Task IniciarTramites()
    {
        await ShowBusyDialog();

        try
        {
            if (checkData())
            {
                sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
                modelo.SesionId = sesionId;
                var rsp = await caratulaService.insertCaratula(modelo);

                if (rsp.IsSuccess)
                {
                  
                   
                    isActive = true;
                    tramiteIniciado = true;

                  
                    StateHasChanged();
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: IniciarTramites {ex.Message}");
        }
     
        
            StateHasChanged();
        


    }

    private bool checkData()
    {
        if (modelo.Entidad.Domicilio != null)
        {
            domicilioError = "";
        }
        else
        {
            domicilioError = "El campo no puede estar vacío";
            return false;
        }


        if (modelo.FechaInicio != null)
        {
            fechaErrorInicio = "";
        }
        else
        {
            fechaErrorInicio = "Seleccioná la fecha correspondiente";
            return false;
        }

        if (modelo.FechaDeCierre != null)
        {
            fechaErrorCierre = "";
        }
        else
        {
            fechaErrorCierre = "Seleccioná la fecha correspondiente";
            return false;
        }



        if (modelo.FechaInicio != null && modelo.FechaDeCierre != null)
        {
            if (modelo.FechaInicio.Value == modelo.FechaDeCierre.Value)
            {
                fechaErrorInicio = "Ambas fechas son iguales";
                fechaErrorCierre = "Ambas fechas son iguales";

                return false;
            }
            else
            {
                if (modelo.FechaInicio.Value < modelo.FechaDeCierre.Value)
                {
                    fechaErrorInicio = "";
                    fechaErrorCierre = "";

                }
                else
                {
                    fechaErrorInicio = "La fecha de inicio tiene que ser menor a la fecha del cierre"; 

                    return false;    
                }

            }
        }

        if (modelo.Email != null)
        {
            emailError = "";
            if (Validator.IsEmail(modelo.Email))
            {
                emailError = "";
            }
            else
            {
                emailError = "Ingresa tu mail correcto";
                return false;
            }

        }
        else
        {
            emailError = "El campo no puede esta vacio";
            return false;
        }

        emailError = "";
        domicilioError = "";
        fechaErrorCierre = "";
        fechaErrorInicio = "";
        return true;    
    }


   

    async Task ShowBusyDialog()
    {
        InvokeAsync(async () =>
        {
    // Simulate background task
    await Task.Delay(2000);

    // Close the dialog
    dialogService.Close();
        });

        
        
            await BusyDialog();
        
    }

    // Busy dialog from markup
    async Task BusyDialog()
    {
        await dialogService.OpenAsync("", ds =>
    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
        <RadzenImage Path="img/community.svg" Style="width: 200px;" AlternateText="community" />
        <RadzenText TextStyle="TextStyle.H6">Cargando...</RadzenText>
    </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }


  

   


}

