@page "/Caratula/{balid?}"
@using Balances.DTO;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using Microsoft.AspNetCore.Http;
@using Microsoft.JSInterop
@using Balances.Web.Services
@using System.Text.RegularExpressions;
@using System.Text.Json;
@using GoogleMapsComponents.Maps.Places

@using static Microsoft.AspNetCore.Hosting.Internal.HostingApplication;
@inject IJSRuntime JS
@inject ICaratulaClientService caratulaService
@inject IBalanceClientService balanceService 
@inject ISessionClientService sesionService
@inject IBusquedaDeSociedadesClientService busquedaSociedadService 
@inject NavigationManager NavigationManager;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IHttpContextAccessor httpContextAccessor
@inject DialogService dialogService


<!--Navegacion-->

<Navegacion PaginaActiva="Caratula" TramiteIniciado="@tramiteIniciado" balid="@balid"></Navegacion>

<!--Loading-->
<RadzenDialog />


<!--Entidad-->


    <div class="container mt-2">
        <div class="card mx-auto  bg-light">
            <div class="card-header" style="color: #FFF;background-color:#15153D; font-weight: bold; text-align: center;">
                Entidad
            </div>

            <div class="card-body">
                <div class="row d-flex justify-content-center align-items-end position-relative">

                    <div class="col">
                        <RadzenFormField Text="Nro.Correlativo / CUIT / CUIL" Style="width:100%">
                            <RadzenTextBox @bind-Value="@modelo.Entidad.Correlativo" Style="width:100%" />
                        </RadzenFormField>
                    </div>

                    <div class="col mt-4">
                        <RadzenButton Variant="Variant.Flat" Shade="Shade.Dark" Click=FindEntities Text="Buscar" ButtonStyle="ButtonStyle.Info" />
                    </div>
                </div>
                <small id="busquedaError" class="text-danger">@busquedaError</small>

                <RadzenCard class=" rz-border-radius-20 rz-pt-8 rz-ps-8 rz-pe-8" style="margin-top:20px; background-color:#15153D;">
                    <RadzenText TextStyle="TextStyle.H6" class="rz-color-on-primary-light"><strong>Detalles de Identidad</strong></RadzenText>
                    <RadzenRow RowGap="0">
                        <RadzenColumn SizeSM="4">
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Razón Social</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@modelo.Entidad.RazonSocial</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-color-on-primary-light rz-display-flex rz-mt-4 rz-mb-0">Tipo de Entidad</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@modelo.Entidad.TipoEntidad</b></RadzenText>
                        </RadzenColumn>
                    </RadzenRow>
                </RadzenCard>

            </div>
        </div>

        <!--Datos Personales -->

        <div class="card mx-auto mt-4 mb-4  bg-light">

            <div class="card-header" style="color: #FFF; background-color:#15153D; font-weight: bold; text-align: center;">
                Datos Personales
            </div>

            @if (@entidadEncontrada)
            {
                <div class="row ps-3 pt-3">
                    <div class="form-group col">
                        <RadzenFormField Text="Domicilio" Style="width:100%">
                            <RadzenTextBox @bind-Value="@modelo.Entidad.Domicilio" Disabled="@tramiteIniciado" id="txtAddress" />
                        </RadzenFormField>
                        <small id="fechaError" class="text-danger">@domicilioError</small>
                    </div>

                    <div class="col mt-4">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="sedeInscripta" @bind="@modelo.Entidad.SedeSocialInscripta" disabled="@tramiteIniciado">
                            <label class="form-check-label" for="flexCheckDefault">¿Es Sede Social Inscripta?</label>
                        </div>
                    </div>
                </div>

                <div class="row  ps-3 pt-3 pe-3">
                    <div class="col">
                        <RadzenFormField Text="Fecha de Inicio" Style="width:100%">
                            <RadzenDatePicker @bind-Value="@modelo.FechaInicio" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled="@tramiteIniciado" Placeholder="dd/mm/yyyy"  />
                        </RadzenFormField>

                       <small id="fechaError" class="text-danger">@fechaErrorInicio</small>

                    </div>
                    <div class="col">
                         <RadzenFormField Text="Fecha de Cierre" Style="width:100%">
                            <RadzenDatePicker @bind-Value="@modelo.FechaDeCierre" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled="@tramiteIniciado" Placeholder="dd/mm/yyyy" />
                         </RadzenFormField>

                        <small id="fechaError" class="text-danger">@fechaErrorCierre</small>
                    </div>
                </div>

                <div class="row  ps-3 pt-3 pe-3">
                    <div class="col mb-4">
                        <RadzenFormField Text="Email" Style="width:100%">
                            <RadzenTextBox @bind-Value="@modelo.Email" Disabled="@tramiteIniciado" />
                        </RadzenFormField>
                        <small id="emailError" class="text-danger">@emailError</small>
                    </div>
                </div>

                <div class="col mt-4 mb-4 d-flex justify-content-center">
                    <RadzenButton Variant="Variant.Flat" Shade="Shade.Dark" Click=IniciarTramites Text="Iniciar Trámite" ButtonStyle="ButtonStyle.Info" Disabled="@(!entidadEncontrada ||tramiteIniciado )" />
                </div>

            }
            else
            {
                <div class="row ps-3 pt-3 pe-3">
                    <div class="form-group col">
                        <RadzenFormField Text="Domicilio" Style="width:100%">
                            <RadzenTextBox @bind-Value="@modelo.Entidad.Domicilio" Disabled id="txtAddress" />
                         </RadzenFormField>

                     </div>

                     <div class="col mt-4">
                         <div class="form-check">
                             <input class="form-check-input" type="checkbox" value="" id="sedeInscripta" disabled>
                             <label class="form-check-label" for="flexCheckDefault">¿Es Sede Social Inscripta?</label>
                         </div>
                     </div>
                 </div>


                <div class="row  ps-3 pt-3 pe-3">
                    <div class="col">
                        <RadzenFormField Text="Fecha de Inicio" Style="width:100%">
                            <RadzenDatePicker @bind-Value="@modelo.FechaInicio" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled Placeholder="dd/mm/yyyy" />
                        </RadzenFormField>

                        <small id="fechaError" class="text-danger">@fechaErrorInicio</small>

                    </div>
                    <div class="col">
                        <RadzenFormField Text="Fecha de Cierre" Style="width:100%">
                             <RadzenDatePicker @bind-Value="@modelo.FechaDeCierre" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Disabled Placeholder="dd/mm/yyyy" />
                         </RadzenFormField>
                        <small id="fechaError" class="text-danger">@fechaErrorCierre</small>
                    </div>
                </div>
                <div class="row  ps-3 pt-3 pe-3">
                    <div class="col mb-4">
                        <RadzenFormField Text="Email" Style="width:100%">
                            <RadzenTextBox @bind-Value="@modelo.Email" Disabled />
                         </RadzenFormField>
                         <small id="emailError" class="text-danger"></small>
                     </div>
                 </div>


                <div class="col mt-4 mb-4 d-flex justify-content-center">
                    <RadzenButton Variant="Variant.Flat" Shade="Shade.Dark" Click=IniciarTramites Text="Iniciar Trámite" ButtonStyle="ButtonStyle.Secondary" Disabled />
                 </div>

            }

        </div>
    </div>



@code{

    private string busquedaError = "";
    private string emailError = "";
    private string fechaErrorInicio = "";
    private string fechaErrorCierre = "";
    private string domicilioError = "";

    private bool entidadEncontrada;
    private string idSession = "";
    public static bool isActive = false;


    [Parameter]
    public string? balid { get; set; } = null;


    [Parameter]
    public string sesionId { get; set; }

    public string? sesion { get; set; }

    private bool tramiteIniciado = false;


    private CaratulaDto modelo = new CaratulaDto
        {
            Entidad = new Model.Entidad()

        };

    private Regex emailRegex = new Regex(@"^[^\s@]+@[^\s@]+\.[^\s@]+$", RegexOptions.Compiled);

    protected override async Task OnInitializedAsync()
    {


        await Load();

        await base.OnInitializedAsync();
    }

    private async Task<(string TipoEntidad, string RazonSocial)> SetInitialValues()
    {
        try
        {
            // Llama a tu servicio para obtener los valores iniciales
            var response = await busquedaSociedadService.findSociedad("ID_de_la_Entidad_Inicial");

            if (response != null)
            {
                // Devuelve los valores iniciales
                return (response.Result?.TipoEntidad ?? "Tipo de Entidad no encontrada",
                    response.Result?.RazonSocial ?? "Entidad no encontrada");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
        }

        // En caso de error, devuelve valores por defecto
        return ("", "");
    }


    private async Task Load()
    {
        try
        {


            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");

            if(sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();

                sesionId = sesionRespuesta.Result;
                sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rsp = await sesionService.getBalanceId(sesionId);

                if(rsp is not null)
                {
                    balid = rsp;

                    var response = await balanceService.getBalance(rsp);

                    if (response.IsSuccess)
                    {
                        var result = response.Result;

                        if (result != null)
                        {
                            var resultCaratula = result.Caratula;

                            MainLayout.TipoEntidad = resultCaratula.Entidad.TipoEntidad;
                            MainLayout.RazonSocial = resultCaratula.Entidad.RazonSocial;
                            MainLayout.NroCorrelativo = resultCaratula.Entidad.Correlativo;
                            MainLayout.FechaDeCierre = resultCaratula.FechaDeCierre;

                            setPropertiesCaratula(resultCaratula);

                            entidadEncontrada = true;
                            tramiteIniciado = true;
                        }
                    }

                }
                else
                {
                    entidadEncontrada = false;
                }

                StateHasChanged();

            }



        }

        catch 
        {

            throw;

        }


    }




    private void setPropertiesCaratula(Model.Caratula caratula)
    {

        modelo.Email = caratula.Email;
        modelo.FechaInicio = caratula.FechaInicio;
        modelo.FechaDeCierre = caratula.FechaDeCierre;
        modelo.Entidad.Domicilio = caratula.Entidad.Domicilio;
        modelo.Entidad.Correlativo = caratula.Entidad.Correlativo;
        modelo.Entidad.RazonSocial = caratula.Entidad.RazonSocial;
        modelo.Entidad.TipoEntidad = caratula.Entidad.TipoEntidad;
        modelo.Entidad.SedeSocialInscripta = caratula.Entidad.SedeSocialInscripta;


    }




    private async Task FindEntities()
    {

        await ShowBusyDialog();

        int numericNroCorrelativo;

        if (modelo != null)
        {
            if (string.IsNullOrEmpty(modelo.Entidad.Correlativo))
            {
                busquedaError = "El campo no puede estar vacío";
                return;
            }

            if (int.TryParse(modelo.Entidad.Correlativo, out numericNroCorrelativo))
            {
                busquedaError = "";


                try
                {

                    var response = await busquedaSociedadService.findSociedad(modelo.Entidad.Correlativo);

                    if (response != null)
                    {
                        var result = response.Result;


                        modelo.Entidad.RazonSocial = result!.RazonSocial ?? "Entidad no encontrada";
                        modelo.Entidad.TipoEntidad = result.TipoEntidad;                  

                        entidadEncontrada = true;


                        StateHasChanged();


                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
                }



            } 
            else
            {
                busquedaError = "El campo tiene que ser numérico";
            }
        }
        else
        {
            modelo = new CaratulaDto();    
        }

    }

    private async Task IniciarTramites()
    {
        await ShowBusyDialog();

        try
        {
            if (checkData())
            {
                sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
                modelo.SesionId = sesionId;

                var rsp = await caratulaService.insertCaratula(modelo);

                if (rsp.IsSuccess)
                {
                    var resultCaratula = rsp.Result.Caratula;

                    MainLayout.TipoEntidad = resultCaratula.Entidad.TipoEntidad;
                    MainLayout.RazonSocial = resultCaratula.Entidad.RazonSocial;
                    MainLayout.NroCorrelativo = resultCaratula.Entidad.Correlativo;
                    MainLayout.FechaDeCierre = resultCaratula.FechaDeCierre;

                    isActive = true;
                    tramiteIniciado = true;


                    StateHasChanged();
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: IniciarTramites {ex.Message}");
        }


        StateHasChanged();



    }

    private bool checkData()
    {
        if (modelo.Entidad.Domicilio != null)
        {
            domicilioError = "";
        }
        else
        {
            domicilioError = "El campo no puede estar vacío";
            return false;
        }


        if (modelo.FechaInicio != null)
        {
            fechaErrorInicio = "";
        }
        else
        {
            fechaErrorInicio = "Seleccioná la fecha correspondiente";
            return false;
        }

        if (modelo.FechaDeCierre != null)
        {
            fechaErrorCierre = "";
        }
        else
        {
            fechaErrorCierre = "Seleccioná la fecha correspondiente";
            return false;
        }



        if (modelo.FechaInicio != null && modelo.FechaDeCierre != null)
        {
            if (modelo.FechaInicio.Value == modelo.FechaDeCierre.Value)
            {
                fechaErrorInicio = "Ambas fechas son iguales";
                fechaErrorCierre = "Ambas fechas son iguales";

                return false;
            }
            else
            {
                if (modelo.FechaInicio.Value < modelo.FechaDeCierre.Value)
                {
                    fechaErrorInicio = "";
                    fechaErrorCierre = "";

                }
                else
                {
                    fechaErrorInicio = "La fecha de inicio tiene que ser menor a la fecha del cierre"; 

                    return false;    
                }

            }
        }

        if (modelo.Email != null)
        {
            emailError = "";
            if (Validator.IsEmail(modelo.Email))
            {
                emailError = "";
            }
            else
            {
                emailError = "Ingresa tu mail correcto";
                return false;
            }

        }
        else
        {
            emailError = "El campo no puede esta vacio";
            return false;
        }

        emailError = "";
        domicilioError = "";
        fechaErrorCierre = "";
        fechaErrorInicio = "";
        return true;    
    }




    private async Task ShowBusyDialog()
    {
         InvokeAsync(async () =>
        {

            await Task.Delay(2000);

            dialogService.Close();
        });

        
        
       await BusyDialog();
        
    }

    // Busy dialog from markup
    private async Task BusyDialog()
    {
        await dialogService.OpenAsync("", ds =>
    @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
        <RadzenImage Path="img/community.svg" Style="width: 200px;" AlternateText="community" />
        <RadzenText TextStyle="TextStyle.H6">Cargando...</RadzenText>
    </RadzenStack>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }


  

   


}

