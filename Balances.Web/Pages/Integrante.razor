@page "/Integrante"
@using Balances.DTO;
@using Balances.Web.Services.Implementation;
@inject ISociosService socioService;

@{
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Estado Contable</title>
    <!-- Agrega los enlaces a los estilos de Bootstrap y otros recursos aquí -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
    <!--Navegacion-->
    <div class="d-flex justify-content-center align-items-center">
        <h3 class="fs-2 font-weight mt-4 mb-4">
            <p>Entidad:</p>
        </h3>
    </div>
    <ul class="nav nav-tabs d-flex justify-content-center">
        <li class="nav-item">
            <a class="nav-link" disabled href="/Caratula">Caratula</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/EstadoContable">Estado</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/Libros">Libros</a>
        </li>
        <li class="nav-item" active disabled>
            <a class="nav-link" href="/Contador">Contador</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/Autoridad">Autoridad</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/Integrante">Integrante</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/Archivos">Archivos</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/Confirmacion">Confirmación DJ</a>
        </li>
    </ul>


    <!---------------------------------------------------------------->
    <!-- Tabs -->
    <div class="container mt-4">
        <ul class="nav nav-tabs" style="width: 1200px;">
            <li class="nav-item">
                <a class="nav-link active" href="#humano" onclick="openTab(event, 'humano')">Integrante Humano</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#juridico" onclick="openTab(event, 'juridico')">Integrante Jurídico</a>
            </li>
        </ul>
        <hr style="width: 1130px;" />
    </div>

    <!-- Formulario de Datos del Integrante -->
    <div class="container mt-4">
        <form class="card" id="formAccionista" onsubmit="handleSubmit(event)" onchange="handleChange(event)">
            <div class="card-body">
                <h5 class="card-title" style="margin-bottom: 20px; color: #0375bc; font-weight: bold; text-align: center;">
                    Datos del Integrante
                </h5>
                <div class="form-group">
                    <label for="accionistaNombre">Nombre</label>
                    <input type="text" class="form-control" id="accionistaNombre" required>
                </div>
                <div class="form-group">
                    <label for="accionistaNombre">Apellido</label>
                    <input type="text" class="form-control" id="accionistaNombre" required>
                </div>
                <div class="form-group">
                    <label for="accionistaNombre">Tipo de Documento</label>
                    <input type="text" class="form-control" id="accionistaNombre" required>
                </div>
                <div class="form-group">
                    <label for="accionistaNombre">Numero de Documento</label>
                    <input type="text" class="form-control" id="accionistaNombre" required>
                </div>
                <div class="form-group">
                    <label for="accionistaNombre">Número de Identificación Fiscal</label>
                    <input type="text" class="form-control" id="accionistaNombre" required>
                </div>
                <div class="form-group">
                    <label for="accionistaNombre">Cuotas</label>
                    <input type="text" class="form-control" id="accionistaNombre" required>
                </div>
                <div class="form-group">
                    <label for="accionistaNombre">Votos</label>
                    <input type="text" class="form-control" id="accionistaNombre" required>
                </div>
                <!-- Rest of the form content -->
                <div class="form-group text-center">
                    <button type="submit" class="btn btn-primary" onclick="addPersonaHumana">Agregar</button>
                </div>
            </div>
        </form>
    </div>

    <!-- Lista de Integrantes -->
    <div class="container mt-4">
        <div class="card" style="margin-top: 50px;">
            <div class="card-body">
                <h5 class="card-title" style="color: #0375bc; font-size: larger;">Integrantes</h5>
                <div class="container mt-5">
                    <div class="row">
                        <div class="col-12">

                            <div class="row">
                                <div class="card">

                                    <!-- Iteración sobre inputs -->
                                    <div v-for="input in inputs" class="row">

                                        <div class="col-12 col-md-4">
                                            <input type="text" id="apellido" name="nombrecompleto" 
                                                   class="form-control" placeholder="Apellido y Nombre"  />
                                        </div>

                                        <div class="col-12 col-md-2">
                                            <input type="text" id="nrodocumento" name="nrodocumento" 
                                                   class="form-control" placeholder="Nro"  />
                                        </div>

                                        <div class="col-12 col-md-2">
                                            <input type="text" id="cuit" name="cuit"  class="form-control"
                                                   placeholder="CUIT"  />
                                        </div>

                                        <div class="col-12 col-md-2">
                                            <input type="text" id="cantidad" name="cantidad" 
                                                   class="form-control" placeholder="cuotas/votos"  />
                                        </div>

                                        <div class="col-12 col-md-1">
                                            <span>
                                                <button class="btn btn-danger btn-sm" style="width: 10px; padding: 0;" @click="deleteItem(input.id)">
                                                    Eliminar
                                                </button>
                                            </span>
                                        </div>

                                    </div>
                                    <!-- Fin de la iteración -->

                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    

</body>

</html>


@code {
    private const string KEY_SESSION = "idSession";
    private string idSession = "";
    private bool isExistAuthority = false;

    private  PersonaHumanaDto modelPersonaHumana = new PersonaHumanaDto();
    private List<PersonaHumanaDto> listPersonaHumana = new List<PersonaHumanaDto>();

    private PersonaJuridicaDto modelPersonaJuridica = new PersonaJuridicaDto();
    private List<PersonaJuridicaDto> listPersonaJuridica = new List<PersonaJuridicaDto>();


    private string resultNameAndSurname = "";


    private async Task<ResponseDTO<BalanceDto>> addPersonaHumana()
    {
        ResponseDTO<BalanceDto> respuesta = new();

        try
        {

            respuesta = await socioService.insertPersonaHumana(modelPersonaHumana);


            if (respuesta.IsSuccess)
            {

                resultPersonaHumana(respuesta.Result.Socios.PersonasHumanas);

                // Limpiar los campos después de una inserción exitosa
                cleanInputsHumana();


            }

        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
        return respuesta;
    }

    private void cleanInputsHumana()
    {
        // Restablecer los valores de los campos a su estado inicial o vacío
        modelPersonaHumana = new PersonaHumanaDto();
    }

    private void resultPersonaHumana(List<PersonaHumanaDto> listPersonaHumana)
    {
        this.listPersonaHumana = listPersonaHumana;

    }

    /*protected override async Task OnInitializedAsync()
    {

        await Load();

        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        try
        {
            var idSession = await socioService.getSession();

            if (idSession.IsSuccess)
            {
                var response = await socioService.getBalance(idSession.Result);

                if (idSession.IsSuccess == true)
                {

                    try
                    {
                        resultAutoridades(response.Result.Autoridades);

                        StateHasChanged();

                    }
                    catch (Exception ex)
                    {

                        Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
                    }
                }
            }
            else
            {
                Console.WriteLine($"No se ha encontrado el idSession");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }


    private async Task<ResponseDTO<BalanceDto>> insertAutoridad()
    {

        ResponseDTO<BalanceDto> respuesta = new();


        try
        {

            respuesta = await socioService.insertSocio(modelo);


            if (respuesta.IsSuccess)
            {

                resultAutoridades(respuesta.Result.Autoridades);

                // Limpiar los campos después de una inserción exitosa
                cleanInputs();


            }

        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
        return respuesta;
    }

    private void cleanInputs()
    {
        // Restablecer los valores de los campos a su estado inicial o vacío
        modelo = new AutoridadDto();
    }

    private void resultAutoridades(List<AutoridadDto> listAutoridades)
    {
        if (listAutoridades.Count > 0)
        {
            this.listAutoridades = listAutoridades;
            isExistAuthority = true;
        }
        else
        {
            isExistAuthority = false;
        }

    }

    private async Task<ResponseDTO<BalanceDto>> deleteAutoridad(AutoridadDto autoridad)
    {
        var respuesta = new ResponseDTO<BalanceDto>();
        try
        {
            respuesta = await autoridadService.deleteAutoridad(autoridad);

            if (respuesta.IsSuccess)
            {

                listAutoridades = respuesta.Result.Autoridades;

            }


        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
        return respuesta;
    }*/


}