@page "/Integrante/{balid?}"
@using Balances.DTO;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;

@using FluentValidation.Results

@inject ISociosClientService socioService
@inject IBalanceClientService balanceService
@inject ISessionClientService sesionService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Estado Contable</title>
    <!-- Agrega los enlaces a los estilos de Bootstrap y otros recursos aquí -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>

    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="Integrante" TramiteIniciado="true"></Navegacion>

    <!---------------------------------------------------------------->
    <!-- Tabs -->
    <div class="container-fluid mt-4">
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link active" href="#">Integrante Humano</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/IntegranteJuridico">Integrante Jurídico</a>
            </li>
        </ul>
        
    </div>

    <!-- Formulario de Datos del Integrante -->
    <div class="container-fluid mt-4 mb-4">
        <div class="row">
            <div class="col-md-6">
            <div class="card">
                    <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                        Datos del Integrante
                    </div>
                    <div class="card-body">
                        <EditForm Model="modelPersonaHumana" >
                        <FluentValidationValidator/>
                         
                        <RadzenStack class="mx-3 my-3">
                            <RadzenFormField Text="Nombre" Style="width:100%">
                                <RadzenTextBox @bind-Value="@modelPersonaHumana.Nombre" />
                            </RadzenFormField>

                            <ValidationMessage For="@(()=> modelPersonaHumana.Nombre)" />
                        </RadzenStack>

                        <RadzenStack class="mx-3 my-3">
                            <RadzenFormField Text="Apellido" Style="width:100%">
                                <RadzenTextBox @bind-Value="@modelPersonaHumana.Apellido" />
                            </RadzenFormField>

                            <ValidationMessage For="@(()=> modelPersonaHumana.Apellido)" />
                        </RadzenStack>
                        <RadzenStack class="mx-3 my-3">
                                <label for="tipoDocumento">Tipo de Documento</label> 
                                <select class="form-select" @bind="modelPersonaHumana.TipoDocumento">
                                    <option value="">--- Seleccionar un tipo de documento ---</option>
                                    <option value="DNI">DNI</option>
                                    <option value="Pasaporte">Pasaporte</option>
                                    <option value="Cedula">Cédula</option>
                                </select>
                                <ValidationMessage For="@(()=> modelPersonaHumana.TipoDocumento)" />
                             </RadzenStack>

                        <RadzenStack class="mx-3 my-3">
                                <RadzenFormField Text="Numero de Documento" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelPersonaHumana.NroDocumento" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelPersonaHumana.NroDocumento)" />
                            </RadzenStack>

                        <RadzenStack class="mx-3 my-3">
                                <RadzenFormField Text="Nro. de CUIL/CUIT" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelPersonaHumana.NroFiscal" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelPersonaHumana.NroFiscal)" />
                        </RadzenStack>

                        <RadzenStack class="mx-3 my-3">
                                <RadzenFormField Text="Acciones" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelPersonaHumana.Cuotas" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelPersonaHumana.Cuotas)" />
                           </RadzenStack>

                        <RadzenStack class="mx-3 my-3">
                                <RadzenFormField Text="Votos" Style="width:100%">
                                    <RadzenTextBox @bind-Value="@modelPersonaHumana.Votos" />
                                </RadzenFormField>

                                <ValidationMessage For="@(()=> @modelPersonaHumana.Votos)" />
                            </RadzenStack>

                           <div class="form-group mt-2 ms-3">
                                <RadzenCheckBox @bind-Value="@modelPersonaHumana.EsFirmante" Name="CheckBox3" />
                                <RadzenLabel class="col-6" Text="Es Firmante" Component="CheckBox3" />

                                <ValidationMessage For="@(()=> modelPersonaHumana.EsFirmante)" />
                           </div>


                        <RadzenStack class="d-flex justify-content-center mx-3 my-2">
                                <RadzenButton ButtonType="Radzen.ButtonType.Submit" Click="@addPersonaHumana" ButtonStyle="ButtonStyle.Primary">Agregar</RadzenButton>
                            </RadzenStack>
                        
               
                    </EditForm>
                    </div>
                    </div>
            </div>
            <div class="col-md-6">
                <!-- Lista de Integrantes -->
                <div class="container">
                    <div class="card">
                        <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                            Integrantes
                        </div>
                        <div class="card-body">

                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                      
                                        <th scope="col">Apellido y Nombre</th>
                                        <th scope="col">CUIT</th>
                                        <th scope="col">Acciones</th>
                                        <th scope="col">Cantidad</th>
                                        <th scope="col"></th>
                                    </tr>
                                </thead>
                                @foreach (var personaHumana in listPersonaHumana)
                                {
                                    <tbody>
                                        <tr>
                                        
                                            <td>@personaHumana.Apellido @personaHumana.Nombre</td>
                                            <td>@personaHumana.NroFiscal</td>
                                            <td>@personaHumana.Cuotas</td>
                                            <td>@personaHumana.Votos</td>

                                            <td>
                                                <button type="button" class="btn btn-outline-danger" @onclick="() => deletePersonaHumana(personaHumana)"><i class="bi bi-trash-fill"></i></button>
                                            </td>
                                        </tr>
                                    </tbody>

                                }
                            </table>
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
    </div>

   

</body>

</html>

@code {

    [Parameter] public string? TipoEntidad { get; set; }
    private string idSession = "";
    private PersonaHumanaDto modelPersonaHumana = new PersonaHumanaDto();
    private List<PersonaHumanaDto> listPersonaHumana = new List<PersonaHumanaDto>();

    [Parameter]
    public string? balid { get; set; }
    [Parameter]
    public string sesionId { get; set; }



    protected override async Task OnInitializedAsync()
    {

        await Load();

        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        ResponseDTO<BalanceDto> rsp = new();
        try
        {

            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");

            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();

                sesionId = sesionRespuesta.Result;
                sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rst = await sesionService.getBalanceId(sesionId);

                if (rst is not null)
                {
                    balid = rst;
                    rsp = await balanceService.getBalance(balid);

                    if (rsp.IsSuccess)
                    {
                        TipoEntidad = rsp.Result.Caratula.Entidad.TipoEntidad;

                        resultPersonaHumana(rsp.Result.Socios.PersonasHumanas);

                        StateHasChanged();

                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }



    private async Task<ResponseDTO<BalanceDto>> addPersonaHumana()
    {

        ResponseDTO<BalanceDto> respuesta = new();

        try
        {
            modelPersonaHumana.SesionId = sesionId;

            PersonaHumanaValidator personaHumanaValidator = new();
            ValidationResult result = personaHumanaValidator.Validate(modelPersonaHumana);

            if (result.IsValid)
            {
                respuesta = await socioService.insertPersonaHumana(modelPersonaHumana);
                if (respuesta.IsSuccess)
                {
                    resultPersonaHumana(respuesta.Result.Socios.PersonasHumanas);
                    // Limpiar los campos después de una inserción exitosa
                    cleanInputsHumana();
                }
            }

        }
        catch (Exception e)
        {
            throw e;
        }
         
        return respuesta;
        
    }
        
    

    private void cleanInputsHumana()
    {
        // Restablecer los valores de los campos a su estado inicial o vacío
        modelPersonaHumana = new PersonaHumanaDto();
    }

    private void resultPersonaHumana(List<PersonaHumanaDto> listPersonaHumana)
    {
        this.listPersonaHumana = listPersonaHumana;
    }

    private async Task<ResponseDTO<BalanceDto>> deletePersonaHumana(PersonaHumanaDto personaHumanaDto)
    {
        var respuesta = new ResponseDTO<BalanceDto>();
        try
        {
            personaHumanaDto.SesionId = sesionId;
            respuesta = await socioService.deletePersonaHumana(personaHumanaDto);

            if (respuesta.IsSuccess)
            {

                listPersonaHumana = respuesta.Result.Socios.PersonasHumanas;

            }


        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
        return respuesta;
    }

    
}
