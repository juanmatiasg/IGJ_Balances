@page "/Integrante/{balid?}"
@using Balances.DTO;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;

@using FluentValidation.Results

@inject ISociosClientService socioService
@inject IBalanceClientService balanceService
@inject ISessionClientService sesionService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject SweetAlertService swal;
@inject NotificationService notificationService
@inject IDialogService DialogService;


<Navegacion TramiteIniciado=true PaginaActiva="Integrante" balid="@balid"></Navegacion>


<NavegacionIntegrantes PaginaActiva="Integrante" TramiteIniciado=true balid="@balid"></NavegacionIntegrantes>


<!-- Formulario de Datos del Integrante -->
<div class="container">

    <div class="d-flex gap-1 " style="color:#15153D">

        <!--Formulario persona-->
        <div class="card d-flex justify-content-between w-50 ">
            <EditForm Model="@model">

                <div class="card-header" style="color: #FFF;background-color:#15153D; font-weight: bold; text-align: center;">
                    Datos de Persona Humana
                </div>

                <div class="card-body d-flex flex-column gap-1 w-100 ">

                    <FluentValidationValidator />

                    <!--NOMBRE Y APELLIDO-->


                    <div class="d-flex gap-1 ">

                        <RadzenStack Style="width:50%">
                            <RadzenFormField Text="Nombre">
                                <RadzenTextBox @bind-Value="@model.Nombre" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.Nombre)" />

                        </RadzenStack>


                        <RadzenStack Style="width:50%">
                            <RadzenFormField Text="Apellido">
                                <RadzenTextBox @bind-Value="@model.Apellido" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.Apellido)" />

                        </RadzenStack>
                    </div>



                    <!--DOCUMENTO-->
                    <div class="d-flex justify-content-between w-100 gap-1">

                        <RadzenStack Style="width:30%;">
                            <RadzenFormField Text="Tipo de Documento">
                                <RadzenDropDown @bind-Value=@model.TipoDocumento Data=@tiposDocumentos Name="DropDownBindValue" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.TipoDocumento)" />
                        </RadzenStack>

                        <RadzenStack Style="width:30%;">
                            <RadzenFormField Style="width:100%" Text="CUIL/CUIT">
                                <RadzenTextBox @bind-Value="@model.NroFiscal" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> @model.NroFiscal)" />
                        </RadzenStack>

                        <RadzenStack Style="width:30%;">
                            <RadzenFormField Style="width:100%" Text="Documento">
                                <RadzenTextBox @bind-Value="@model.NroDocumento" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> @model.NroDocumento)" />
                        </RadzenStack>

                    </div>



                    <!--ACCIONES Y VOTOS-->
                    <div class="d-flex justify-content-between w-100 gap-1">

                        <RadzenStack Style="width:30%">
                            <RadzenFormField Text="Acciones/Cuotas">
                                <RadzenTextBox @bind-Value="@model.Cuotas" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.Cuotas)" />
                        </RadzenStack>

                        <RadzenStack Style="width:30%">
                            <RadzenFormField Text="Votos">
                                <RadzenTextBox @bind-Value="@model.Votos" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.Votos)" />
                        </RadzenStack>
                        <RadzenStack Style="width:30%">
                            <RadzenFormField Text="Valor Nominal">
                                <RadzenTextBox @bind-Value="@model.ValorNominal" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.ValorNominal)" />
                        </RadzenStack>
                    </div>

                    <RadzenStack class="mt-4 mb-2">
                        <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Click="@InsertPersonaHumana">Agregar</RadzenButton>
                    </RadzenStack>
                </div>
            </EditForm>
        </div>

        <!--Listado de personas-->
        <div class="card d-flex justify-content-between w-50 ">


            <!-- Lista de Integrantes -->
            <div class="card-header" style="color: #FFF;background-color:#15153D; font-weight: bold; text-align: center;">
                Listado de Persona Humana
            </div>


            <div class="card-body">
                <RadzenGrid @ref="grid" Data="listPersonaHumana" TItem="PersonaHumanaDto">
                    <Columns>

                        <RadzenGridColumn TItem="PersonaHumanaDto" Width="8rem" Title="Nombre y Apellido">
                            <Template Context="data">
                                @($"{data.Nombre} {data.Apellido}")
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="PersonaHumanaDto" Width="8rem" Title="Nro. Documento">
                            <Template Context="data">
                                @($"{data.TipoDocumento} {data.NroDocumento}")<br /> @($"Cuit {data.NroFiscal}")
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="PersonaHumanaDto" Width="4rem" Property="Cuotas" Title="ACC/CUO" />
                        <RadzenGridColumn TItem="PersonaHumanaDto" Width="4rem" Property="Votos" Title="Votos" />
                        <RadzenGridColumn TItem="PersonaHumanaDto" Width="5rem">
                            <Template Context="personaHumana">
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(() => deletePersonaHumana(personaHumana))"></RadzenButton>
                                <RadzenButton Icon="cached" ButtonStyle="Radzen.ButtonStyle.Info" Click="@(() => OpenDialogAsync(personaHumana))"></RadzenButton>
                            </Template>
                        </RadzenGridColumn>


                    </Columns>
                </RadzenGrid>

            </div>
        </div>

    </div>
</div>


@code {

    [Parameter]
    public string? TipoEntidad { get; set; }

    RadzenGrid<PersonaHumanaDto> grid;


    private PersonaHumanaDto model = new PersonaHumanaDto();
    private List<PersonaHumanaDto> listPersonaHumana = new List<PersonaHumanaDto>();


    private string[] tiposDocumentos =
       {
            "DNI",
            "Pasaporte"
    };

    [Parameter]
    public string? balid { get; set; }

    [Parameter]
    public string sesionId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        ResponseDTO<BalanceDto> rsp = new();
        try
        {
            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");

            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();
                sesionId = sesionRespuesta.Result!;
                await sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rst = await sesionService.getBalanceId(sesionId);
                if (rst is not null)
                {
                    balid = rst;
                    rsp = await balanceService.getBalance(balid);
                    if (rsp.IsSuccess)
                    {
                        TipoEntidad = rsp.Result!.Caratula.Entidad.TipoEntidad;
                        resultPersonaHumana(rsp.Result.Socios.PersonasHumanas);
                        await grid.Reload();
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            rsp.Message = $"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}";
        }
    }

    private async Task<ResponseDTO<BalanceDto>> InsertPersonaHumana()
    {
        ResponseDTO<BalanceDto> respuesta = new();
        try
        {
            model.SesionId = sesionId;

            PersonaHumanaValidator personaHumanaValidator = new();
            ValidationResult result = personaHumanaValidator.Validate(model);

            if (result.IsValid)
            {
                //listPersonaHumana.Add(modelPersonaHumana);
                respuesta = await socioService.insertPersonaHumana(model);

                if (respuesta.IsSuccess)
                {

                    notificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 3000,
                            Summary = "Datos guardados correctamente"
                        });
                    resultPersonaHumana(respuesta.Result!.Socios.PersonasHumanas);

                    cleanInputsHumana();
                    await grid.Reload();
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 3000,
                    Summary = "No se ha podido guardar los datos"
                });
        }

        return respuesta;

    }

    private void cleanInputsHumana()
    {
        model = new PersonaHumanaDto();
    }

    private void resultPersonaHumana(List<PersonaHumanaDto> listPersonaHumana)
    {
        this.listPersonaHumana = listPersonaHumana;
    }

    private async Task<ResponseDTO<BalanceDto>> deletePersonaHumana(PersonaHumanaDto personaHumanaDto)
    {
        var respuesta = new ResponseDTO<BalanceDto>();

        var alerta = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta a punto de borrar al integrante",
                Text = $"¿Desea eliminarlo de la lista?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Aceptar"

            });
        if (alerta.IsConfirmed)
        {
            try
            {
                personaHumanaDto.SesionId = sesionId;

                respuesta = await socioService.deletePersonaHumana(personaHumanaDto);

                if (respuesta.IsSuccess)
                {

                    notificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 3000,
                            Summary = "Se ha eliminado correctamente"
                        });
                    listPersonaHumana.Remove(personaHumanaDto);

                    await grid.Reload();
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                respuesta.Message = ex.Message;
                notificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Duration = 3000,
                        Summary = "No se ha podido eliminar"
                    });
            }

        }


        return respuesta;
    }

    private async Task<ResponseDTO<BalanceDto>> updatePersonaHumana(PersonaHumanaDto nuevoModelo)
    {
        ResponseDTO<BalanceDto> respuesta = new();
        try
        {
            PersonaHumanaValidator personaValidator = new();
            ValidationResult result = personaValidator.Validate(nuevoModelo);

            if (result.IsValid)
            {
                nuevoModelo.SesionId = sesionId;
                respuesta = await socioService.updatePersonaHumana(nuevoModelo);
                if (respuesta.IsSuccess)
                {

                    notificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 3000,
                            Summary = "Datos guardados correctamente"
                        });

                }
            }
        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 3000,
                    Summary = "No se ha podido guardar los datos"
                });
        }

        return respuesta;

    }

    private async Task OpenDialogAsync(PersonaHumanaDto personaHumana)
    {

        IDialogReference dialog;


        var parameters = new DialogParameters();
        parameters.Add("PersonaHumana", personaHumana);

        dialog = DialogService.Show<UpdatePersonaHumana>("Editar Integrante", parameters);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var nuevoModelo = result.Data as PersonaHumanaDto;
            await updatePersonaHumana(nuevoModelo);
        }
    }
}










