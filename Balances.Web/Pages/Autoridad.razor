@page "/Autoridad/{balid?}"
@using Balances.DTO;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using FluentValidation.Results

@inject IAutoridadClientService autoridadService
@inject ISessionClientService sesionService
@inject IBalanceClientService balanceService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@inject NavigationManager NavigationManager
@inject Radzen.DialogService dialogService;
@inject SweetAlertService swal;
@inject NotificationService notificationService
@inject IDialogService DialogService;

<RadzenDialog></RadzenDialog>



<Navegacion PaginaActiva="Autoridad" TramiteIniciado="true" balid="@balid"></Navegacion>


<div class="container d-flex  justify-content-between p-1 gap-1 ">


    <!--Formulario autoridades-->
    <div class="card w-50  ">
        <EditForm Model="modelo" class="d-flex gap-1  flex-column">

            <FluentValidationValidator />
            <div class="card-header" style="color: white; font-weight: bold; text-align: center; background-color:#15153D;">
                Datos de la Autoridad
            </div>


            <div class="card-body d-flex flex-column gap-2 justify-content-between">


                <!--Nombre y apellido-->
                <div class="d-flex gap-1">

                    <RadzenStack Style="width:50%">
                        <RadzenFormField Text="Nombre">
                            <RadzenTextBox MaxLength="24" type="text" @bind-Value="@modelo.Nombre" />
                            <ValidationMessage For="@(()=> modelo.Nombre)" />
                        </RadzenFormField>
                    </RadzenStack>

                    <RadzenStack Style="width:50%">
                        <RadzenFormField Text="Apellido">
                            <RadzenTextBox MaxLength="24" type="text" @bind-Value="@modelo.Apellido" />
                            <ValidationMessage For="@(()=> modelo.Apellido)" />
                        </RadzenFormField>

                    </RadzenStack>


                </div>

                <!--DNI-->
                <div class="d-flex justify-content-between w-100 gap-1">

                    <RadzenStack Style="width:30%;">
                        <RadzenFormField Text="Tipo de Documento">
                            <RadzenDropDown @bind-Value=@modelo.TipoDocumento Data=@tiposDocumentos Name="DropDownBindValue" />
                            <ValidationMessage For="@(()=> modelo.TipoDocumento)" />
                        </RadzenFormField>
                    </RadzenStack>

                    <RadzenStack Style="width:30%;">
                        <RadzenFormField Style="width:100%" Text="CUIL/CUIT">
                            <RadzenTextBox @bind-Value="@modelo.NroFiscal" />
                        </RadzenFormField>
                        <ValidationMessage For="@(()=> @modelo.NroFiscal)" />
                    </RadzenStack>

                    <RadzenStack Style="width:30%;">
                        <RadzenFormField Style="width:100%" Text="Documento">
                            <RadzenTextBox @bind-Value="@modelo.NroDocumento" />
                        </RadzenFormField>
                        <ValidationMessage For="@(()=> @modelo.NroDocumento)" />
                    </RadzenStack>

                </div>


                <!--Cargo y firma-->
                <div class="d-flex gap-1 justify-content-between align-items-center">

                    <RadzenStack Style="width:50%">
                        <RadzenFormField Text="Cargo">
                            <RadzenDropDown @bind-Value=@modelo.Cargo Data=@cargos Name="DropDownBindValue" Style="width:100%" />
                            <ValidationMessage For="@(()=> @modelo.Cargo)" />
                        </RadzenFormField>
                    </RadzenStack>

                    <div class="w-50 text-end gap-1">

                        <div class="d-flex w-100 gap-1">

                            <RadzenLabel class="w-100" Text="Es Firmante del Manifiesto" Component="CheckBox3" />
                            <RadzenCheckBox @bind-Value="@modelo.EsFirmante" Name="CheckBox3" />
                            <ValidationMessage For="@(()=> modelo.EsFirmante)" />

                        </div>

                        <div class="d-flex w-100 gap-1">

                            <RadzenLabel class="w-100" Text="Esta Vigente" Component="CheckBox3" />
                            <RadzenCheckBox @bind-Value="@modelo.EstaVigente" Name="CheckBox3" />
                            <ValidationMessage For="@(()=> modelo.EstaVigente)" />

                        </div>
                    </div>

                </div>

                <RadzenStack class="text-center mt-2">
                    <RadzenButton ButtonType="Radzen.ButtonType.Submit" Click="@insertAutoridad" ButtonStyle="ButtonStyle.Primary">Agregar</RadzenButton>
                </RadzenStack>
            </div>
        </EditForm>

    </div>

    <!--Autoridades cargadas-->
    <div class="card w-50 ">
        <div class="card-header" style="color: white; font-weight: bold; text-align: center; background-color:#15153D;">
            Autoridades
        </div>
        <div class="card-body">

            <RadzenGrid AllowColumnResize="true" Data="listAutoridades" TItem="AutoridadDto">
                <Columns>
                    <RadzenGridColumn TItem="AutoridadDto" Width="9rem" Title="Nombre y Cargo">
                        <Template Context="data">
                            @($"{data.Nombre}")  @($"{data.Apellido}")<br />
                            @($"{data.Cargo}")
                        </Template>
                    </RadzenGridColumn>

                    <RadzenGridColumn TItem="AutoridadDto" Width="9rem" Property="NroDocumento" Title="Nro. Documento">
                        <Template Context="data">
                            @($"{data.TipoDocumento} {data.NroDocumento}")<br /> @($"Cuit {data.NroFiscal}")
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="AutoridadDto" Width="4rem" Property="EstaVigente" Title="Vigente">
                        <Template Context="data">
                            @((data.EstaVigente) ? "Si" : "No")
                        </Template>
                    </RadzenGridColumn>
                    <RadzenGridColumn TItem="AutoridadDto" Width="4rem" Property="EsFirmante" Title="Firmante">
                        <Template Context="data">
                            @((data.EsFirmante) ? "Si" : "No")
                        </Template>
                    </RadzenGridColumn>

                    <RadzenGridColumn TItem="AutoridadDto" Width="5rem">
                        <Template Context="autoridad">
                            <RadzenButton Icon="delete" ButtonStyle="Radzen.ButtonStyle.Danger" Click="@(() => deleteAutoridad(autoridad))"></RadzenButton>
                            <RadzenButton Icon="cached" ButtonStyle="Radzen.ButtonStyle.Info" Click="@(() => OpenDialogAsync(autoridad))"></RadzenButton>
                        </Template>
                    </RadzenGridColumn>
                </Columns>

            </RadzenGrid>

        </div>
    </div>

</div>



@code {

    private string[] tiposDocumentos =
      {
            "DNI",
            "Pasaporte"
    };

    private string[] cargos = {
            "Presidente",
            "Vicepresidente",
            "Director Titular",
            "Director Suplente",
            "Administrador Titular",
            "Administrador Suplente",
            "Gerente Titular",
            "Gerente Suplente",
            "Consejo de Vigilancia - Titular",
            "Consejo de Vigilancia - Suplente",
            "Sindicatura - Titular",
            "Sindicatura - Suplente",
            "Comisión Fiscalizadora - Titular",
            "Comisión Fiscalizadora - Suplente"
    };

    ResponseDTO<BalanceDto> rsp = new();
    [Parameter]
    public string? TipoEntidad { get; set; }

    private AutoridadDto modelo = new AutoridadDto();
    private List<AutoridadDto> listAutoridades = new List<AutoridadDto>();

    [Parameter]
    public string? balid { get; set; }

    [Parameter]
    public string sesionId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await Load();
        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        try
        {
            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();
                sesionId = sesionRespuesta.Result;
                sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rst = await sesionService.getBalanceId(sesionId);
                if (rst is not null)
                {
                    balid = rst;
                    rsp = await balanceService.getBalance(balid);
                    if (rsp.IsSuccess)
                    {
                        TipoEntidad = rsp.Result.Caratula.Entidad.TipoEntidad;
                        resultAutoridades(rsp.Result.Autoridades);
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");
        }
    }


    private async Task<ResponseDTO<BalanceDto>> insertAutoridad()
    {
        ResponseDTO<BalanceDto> respuesta = new();
        try
        {
            AutoridadValidator autoridadValidator = new();
            ValidationResult result = autoridadValidator.Validate(modelo);

            if (result.IsValid)
            {
                if (modelo.EsFirmante && listAutoridades.Count(a => a.EsFirmante) >= 1)
                {
                    ShowDialogFirmantes();
                }
                else
                {
                    modelo.SesionId = sesionId;
                    respuesta = await autoridadService.insertAutoridad(modelo);
                    if (respuesta.IsSuccess)
                    {

                        notificationService.Notify(new NotificationMessage
                            {
                                Severity = NotificationSeverity.Success,
                                Duration = 3000,
                                Summary = "Datos guardados correctamente"
                            });
                        resultAutoridades(respuesta.Result.Autoridades);
                        // Limpiar los campos después de una inserción exitosa
                        cleanInputs();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 3000,
                    Summary = "No se ha podido guardar los datos"
                });
        }

        return respuesta;

    }




    private void cleanInputs()
    {
        // Restablecer los valores de los campos a su estado inicial o vacío
        modelo = new AutoridadDto();
    }

    private void resultAutoridades(List<AutoridadDto> listAutoridades)
    {
        if (listAutoridades.Count > 0)
        {
            this.listAutoridades = listAutoridades;
        }
    }

    private async Task<ResponseDTO<BalanceDto>> deleteAutoridad(AutoridadDto autoridad)
    {
        var respuesta = new ResponseDTO<BalanceDto>();
        autoridad.SesionId = sesionId;

        var alerta = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta a punto de borrar a la autoridad",
                Text = $"¿Desea eliminarlo de la lista?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Aceptar"

            });
        if (alerta.IsConfirmed)
        {
            try
            {
                respuesta = await autoridadService.deleteAutoridad(autoridad);
                if (respuesta.IsSuccess)
                {
                    notificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 3000,
                            Summary = "Se ha eliminado correctamente"
                        });
                    listAutoridades = respuesta.Result.Autoridades;
                }
            }
            catch (Exception ex)
            {
                notificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Duration = 3000,
                        Summary = "No se ha podido eliminar la autoridad"
                    });
                respuesta.Message = ex.Message;

            }

        }
        return respuesta;
    }

    async Task ShowDialogFirmantes()
    {
        swal.FireAsync(new SweetAlertOptions
            {
                Icon = "warning",
                Title = "Error",
                Text = "No puede haber más de 1 firmante. ",
                ConfirmButtonText = "Aceptar"


            });
    }

    private async Task<ResponseDTO<BalanceDto>> updateAutoridad(AutoridadDto nuevoModelo)
    {
        ResponseDTO<BalanceDto> respuesta = new();
        try
        {
            AutoridadValidator autoridadValidator = new();
            ValidationResult result = autoridadValidator.Validate(nuevoModelo);

            if (result.IsValid)
            {
                nuevoModelo.SesionId = sesionId;
                respuesta = await autoridadService.updateAutoridad(nuevoModelo);
                if (respuesta.IsSuccess)
                {

                    notificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 3000,
                            Summary = "Datos guardados correctamente"
                        });

                }
            }
        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 3000,
                    Summary = "No se ha podido guardar los datos"
                });
        }

        return respuesta;

    }

    private async Task OpenDialogAsync(AutoridadDto autoridad)
    {

        IDialogReference dialog;


        var parameters = new DialogParameters();
        parameters.Add("autoridad", autoridad);

        dialog = DialogService.Show<UpdateAutoridad>("Editar Usuario", parameters);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var nuevoModelo = result.Data as AutoridadDto;
            await updateAutoridad(nuevoModelo);
        }
    }
}





