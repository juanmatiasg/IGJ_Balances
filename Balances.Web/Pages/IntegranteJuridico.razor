@page "/IntegranteJuridico"
@using Balances.DTO;
@using Balances.Utilities;
@using Balances.Web.Services.Implementation;
@inject ISociosService socioService;



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Estado Contable</title>
    <!-- Agrega los enlaces a los estilos de Bootstrap y otros recursos aquí -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>

    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="Integrante" TramiteIniciado="true"></Navegacion>

    <!---------------------------------------------------------------->
    <!-- Tabs -->
    <div class="container-fluid mt-4">
        <ul class="nav nav-tabs" style="width: 1200px;">
            <li class="nav-item">
                <a class="nav-link" href="/Integrante">Integrante Humano</a>
            </li>
            <li class="nav-item">
                <a class="nav-link active" href="/IntegranteJuridico">Integrante Jurídico</a>
            </li>
        </ul>
      
    </div>


    <!-- Formulario de Datos del Integrante -->
    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-md-6">
                <form class="card">
                    <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                        Datos del Integrante
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label>Denominación</label>
                            <input type="text" class="form-control" @bind="modelPersonaJuridica.Denominacion">
                            <small id="msgError" class="text-danger">@msgErrorDenominacion</small>

                        </div>
                        <div class="form-group">
                            <label>Nro. de Identificación Fiscal</label>
                            <input type="text" class="form-control" id="accionistaNombre" @bind="modelPersonaJuridica.NroFiscal">
                            <small id="msgError" class="text-danger">@msgErrorCuit</small>

                        </div>

                        <div class="form-group">
                            <label>Cuotas</label>
                            <input type="text" class="form-control" id="accionistaNombre" @bind="modelPersonaJuridica.Cuotas">
                            <small id="msgError" class="text-danger">@msgErrorCuotas</small>

                        </div>
                        <div class="form-group">
                            <label>Votos</label>
                            <input type="text" class="form-control" id="accionistaNombre" @bind="modelPersonaJuridica.Votos">
                            <small id="msgError" class="text-danger">@msgErrorVotos</small>

                        </div>
                        <!-- Rest of the form content -->
                        <div class="form-group text-center mt-4">
                            <button type="button" class="btn btn-primary w-100" @onclick="addPersonaJuridica">Agregar</button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="col-md-6">
                <!-- Lista de Integrantes -->
                <div class="card">
                    <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                        Integrantes
                    </div>
                    <div class="card-body">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                   
                                    <th scope="col">Denominación</th>
                                    <th scope="col">Nro Documento</th>
                                    <th scope="col">CUIT</th>
                                    <th scope="col">Cantidad</th>
                                    <th scope="col">Acción</th>
                                </tr>
                            </thead>
                            @foreach (var personaJuridica in listPersonaJuridica)
                            {
                                <tbody>
                                    <tr>
                                       
                                        <td>@personaJuridica.Denominacion</td>
                                        <td>@personaJuridica.NroFiscal</td>
                                        <td>@personaJuridica.NroFiscal</td>
                                        <td>@personaJuridica.Cuotas / @personaJuridica.Votos </td>

                                        <td>
                                            <button type="button" class="btn btn-danger" @onclick="() => deletePersonaJuridica(personaJuridica)">Eliminar</button>
                                        </td>
                                    </tr>
                                </tbody>

                            }
                        </table>
                    </div>
                </div>
            </div>

        </div>
    </div>



</body>

</html>


@code {
    [Parameter] public string? TipoEntidad { get; set; }
    private string idSession = "";
    private PersonaJuridicaDto modelPersonaJuridica = new PersonaJuridicaDto();
    private List<PersonaJuridicaDto> listPersonaJuridica = new List<PersonaJuridicaDto>();


    private string msgErrorDenominacion = "";
    private string msgErrorCuit = "";
    private string msgErrorCuotas = "";
    private string msgErrorVotos = "";

    protected override async Task OnInitializedAsync()
    {
        await Load();

        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        try
        {
            var idSession = await socioService.getSession();

            if (idSession.IsSuccess)
            {
                var response = await socioService.getBalance(idSession.Result);

                if (idSession.IsSuccess == true)
                {

                    try
                    {
                        TipoEntidad = response.Result.Caratula.Entidad.TipoEntidad;

                        resultPersonaJuridica(response.Result.Socios.PersonasJuridicas);

                        StateHasChanged();

                    }
                    catch (Exception ex)
                    {

                        Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
                    }
                }
            }
            else
            {
                Console.WriteLine($"No se ha encontrado el idSession");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }

    private async Task<ResponseDTO<BalanceDto>> addPersonaJuridica()
    {
        if (checkData())
        {
            ResponseDTO<BalanceDto> respuesta = new();

            try
            {

                respuesta = await socioService.insertPersonaJuridica(modelPersonaJuridica);


                if (respuesta.IsSuccess)
                {

                    resultPersonaJuridica(respuesta.Result.Socios.PersonasJuridicas);

                    // Limpiar los campos después de una inserción exitosa
                    cleanInputsJuridica();


                }

            }
            catch (Exception ex)
            {
                respuesta.Message = ex.Message;
            }
            return respuesta;
        }
        else
        {
            return null;    
        }
    }

    private void cleanInputsJuridica()
    {
        // Restablecer los valores de los campos a su estado inicial o vacío
        modelPersonaJuridica = new PersonaJuridicaDto();
    }

    private void resultPersonaJuridica(List<PersonaJuridicaDto> listPersonaJuridica)
    {
        this.listPersonaJuridica = listPersonaJuridica;

    }

    private async Task<ResponseDTO<BalanceDto>> deletePersonaJuridica(PersonaJuridicaDto personaJuridicaDto)
    {
        var respuesta = new ResponseDTO<BalanceDto>();
        try
        {
            respuesta = await socioService.deletePersonaJuridica(personaJuridicaDto);

            if (respuesta.IsSuccess)
            {

                listPersonaJuridica = respuesta.Result.Socios.PersonasJuridicas;

            }


        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
        return respuesta;
    }

    private bool checkData()
    {


        // Apellido
        if (!string.IsNullOrEmpty(modelPersonaJuridica.Denominacion))
        {
            if (Validator.IsNumeric(modelPersonaJuridica.Denominacion))
            {
                msgErrorDenominacion = "No puedes ingresar un valor numérico";
                return false;
            }
            else
            {
                msgErrorDenominacion = "";
            }
        }
        else
        {
            msgErrorDenominacion = "El campo no puede estar vacio";
            return false;
        }


        // Nro id Fiscal
        if (!string.IsNullOrEmpty(modelPersonaJuridica.NroFiscal))
        {
            if (!Validator.IsNumeric(modelPersonaJuridica.NroFiscal))
            {
                msgErrorCuit = "No puedes ingresar caracteres";
                return false;
            }
            else
            {
                msgErrorCuit = "";
            }
        }
        else
        {
            msgErrorCuit = "El campo no puede estar vacio";
            return false;
        }




        // Cuotas
        if (!string.IsNullOrEmpty(modelPersonaJuridica.Cuotas))
        {
            if (!Validator.IsNumeric(modelPersonaJuridica.Cuotas))
            {
                msgErrorCuotas = "No puedes ingresar caracteres";
                return false;
            }
            else
            {
                msgErrorCuotas = "";
            }
        }
        else
        {
            msgErrorCuotas = "El campo no puede estar vacio";
            return false;
        }

        // Votos
        if (!string.IsNullOrEmpty(modelPersonaJuridica.Votos))
        {
            if (!Validator.IsNumeric(modelPersonaJuridica.Votos))
            {
                msgErrorVotos = "No puedes ingresar caracteres";
                return false;
            }
            else
            {
                msgErrorVotos = "";
            }
        }
        else
        {
            msgErrorVotos = "El campo no puede estar vacio";
            return false;
        }





        // Si todos los campos pasan la validación, devuelve true

        msgErrorDenominacion = "";
        msgErrorCuit = "";
        msgErrorCuotas = "";
        msgErrorVotos = "";

        return true;
    }
}

