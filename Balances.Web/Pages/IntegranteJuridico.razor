@page "/IntegranteJuridico/{balid?}"
@using Balances.DTO;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using FluentValidation.Results


@inject ISociosClientService socioService;
@inject IBalanceClientService balanceService
@inject ISessionClientService sesionService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject SweetAlertService swal;
@inject NotificationService notificationService
@inject IDialogService DialogService;


<Navegacion PaginaActiva="Integrante" TramiteIniciado=true balid="@balid"></Navegacion>


<NavegacionIntegrantes PaginaActiva="IntegranteJuridico" TramiteIniciado=true balid="@balid"></NavegacionIntegrantes>


<div class="container ">


    <div class="d-flex gap-1" style="color:#15153D">


        <!--Formulario persona juridica-->
        <div class="card d-flex justify-content-between w-50">
            <EditForm Model="@model">

                <div class="card-header" style="background-color: #15153D; color:#FFF; font-weight: bold; text-align: center;">
                    Datos de Persona Jurídica
                </div>

                <div class="card-body d-flex flex-column gap-1 w-100 ">

                    <FluentValidationValidator />

                    <div class="d-flex gap-1 ">

                        <RadzenStack Style="width:50%">
                            <RadzenFormField Text="Denominacion">
                                <RadzenTextBox @bind-Value="@model.Denominacion" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.Denominacion)" />

                        </RadzenStack>


                        <RadzenStack Style="width:50%">
                            <RadzenFormField Text="Nro. de CUIT">
                                <RadzenTextBox @bind-Value="@model.NroFiscal" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.NroFiscal)" />

                        </RadzenStack>
                    </div>


                    <div class="d-flex gap-1 ">

                        <RadzenStack Style="width:50%">
                            <RadzenFormField Text="Pais">
                                <RadzenDropDown @bind-Value="@model.Pais" Data=@Paises Name="DropDownBindValue" Style="width:100%" Change="OnCountryChanged" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.Pais)" />
                        </RadzenStack>

                        <RadzenStack Style="width:50%">
                            <RadzenFormField Text="Jurisdicción">
                                <RadzenDropDown @bind-Value=@model.Jurisdiccion Data=@Juridisccion Name="DropDownBindValue" Style="width:100%" Disabled=@isJurisdiccionDisabled />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.Jurisdiccion)" />
                        </RadzenStack>
                    </div>

                    <div class="d-flex justify-content-between w-100 gap-1">

                        <RadzenStack Style="width:30%">
                            <RadzenFormField Text="Acciones/Cuotas">
                                <RadzenTextBox @bind-Value="@model.Cuotas" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.Cuotas)" />
                        </RadzenStack>

                        <RadzenStack Style="width:30%">
                            <RadzenFormField Text="Votos">
                                <RadzenTextBox @bind-Value="@model.Votos" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.Votos)" />
                        </RadzenStack>
                        <RadzenStack Style="width:30%">
                            <RadzenFormField Text="Valor Nominal">
                                <RadzenTextBox @bind-Value="@model.ValorNominal" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> model.ValorNominal)" />
                        </RadzenStack>
                    </div>

                    <RadzenStack class="mt-4 mb-2">
                        <RadzenButton ButtonType=Radzen.ButtonType.Submit ButtonStyle="ButtonStyle.Primary" Click="@InsertPersonaJuridica">Agregar</RadzenButton>
                    </RadzenStack>

                </div>
            </EditForm>
        </div>

        <!-- Lista de Integrantes -->
        <div class="card d-flex justify-content-between w-50">

            <div class="card-header" style="background-color: #15153D; color:#FFF; font-weight: bold; text-align: center;">
                Listado de Persona Jurídica
            </div>

            <div class="card-body">
                <RadzenGrid @ref=grid Data="listPersonaJuridica" TItem="PersonaJuridicaDto">
                    <Columns>

                        <RadzenGridColumn TItem="PersonaJuridicaDto" Width="9rem" Title="Razon Social">
                            <Template Context="data">
                                @($"{data.Denominacion}")
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="PersonaJuridicaDto" Width="8rem" Title="CUIT">
                            <Template Context="data">
                                @($"{data.NroFiscal}")
                            </Template>
                        </RadzenGridColumn>
                        <RadzenGridColumn TItem="PersonaJuridicaDto" Width="4rem" Property="Cuotas" Title="ACC/CUO" />
                        <RadzenGridColumn TItem="PersonaJuridicaDto" Width="4rem" Property="Votos" Title="Votos" />
                        <RadzenGridColumn TItem="PersonaJuridicaDto" Width="5rem">
                            <Template Context="personaJuridica">
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(() => deletePersonaJuridica(personaJuridica))"></RadzenButton>
                                <RadzenButton Icon="cached" ButtonStyle="Radzen.ButtonStyle.Info" Click="@(() => OpenDialogAsync(personaJuridica))"></RadzenButton>
                            </Template>
                        </RadzenGridColumn>


                    </Columns>
                </RadzenGrid>
            </div>
        </div>

    </div>

</div>


@code {
    RadzenGrid<PersonaJuridicaDto> grid;


    [Parameter]
    public string? TipoEntidad { get; set; }

    private PersonaJuridicaDto model = new PersonaJuridicaDto();
    private List<PersonaJuridicaDto> listPersonaJuridica = new List<PersonaJuridicaDto>();


    [Parameter]
    public string? balid { get; set; }

    [Parameter]
    public string sesionId { get; set; }

    public List<string> Paises { get; set; } = new List<string>();

    private List<string> Juridisccion { get; set; } = new List<string>();

    private bool isJurisdiccionDisabled = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadJsonCountry();
        await LoadJsonProvince();
        await Load();
        await base.OnInitializedAsync();
    }

    private async Task LoadJsonProvince()
    {
        try
        {
            var provincias = await socioService.GetAllProvince();


            Juridisccion.AddRange(provincias);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    public async Task LoadJsonCountry()
    {
        try
        {
            var countries = await socioService.GetAllCountries();

            // Ordenar los nombres de los países en orden ascendente
            countries.Sort();

            foreach (var name in countries)
            {
                Paises.Add(name);
            }
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

    }

    private void OnCountryChanged(object value)
    {
        string selectedCountry = value.ToString()!;
        if (selectedCountry == "Argentina")
        {
            isJurisdiccionDisabled = false;
            model.Jurisdiccion = "";
        }
        else
        {
            isJurisdiccionDisabled = true;
            model.Jurisdiccion = "Extranjero";

        }
    }

    private async Task Load()
    {
        ResponseDTO<BalanceDto> rsp = new();
        try
        {
            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");

            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();
                sesionId = sesionRespuesta.Result!;
                await sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rst = await sesionService.getBalanceId(sesionId);
                if (rst is not null)
                {
                    balid = rst;
                    rsp = await balanceService.getBalance(balid);
                    if (rsp.IsSuccess)
                    {
                        TipoEntidad = rsp.Result.Caratula.Entidad.TipoEntidad;
                        resultPersonaJuridica(rsp.Result.Socios.PersonasJuridicas);
                        await grid.Reload();
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            rsp.Message = $"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}";
        }
    }


    private async Task<ResponseDTO<BalanceDto>> InsertPersonaJuridica()
    {

        ResponseDTO<BalanceDto> respuesta = new();
        try
        {

            model.SesionId = sesionId;


            PersonaJuridicaValidator personaJuridicaValidator = new();
            ValidationResult result = personaJuridicaValidator.Validate(model);

            if (result.IsValid)
            {

                respuesta = await socioService.insertPersonaJuridica(model);

                if (respuesta.IsSuccess)
                {
                    notificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 3000,
                            Summary = "Datos guardados correctamente"
                        });
                    resultPersonaJuridica(respuesta.Result!.Socios.PersonasJuridicas);
                    cleanInputsJuridica();
                    await grid.Reload();
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Duration = 3000,
                    Summary = "No se ha podido guardar los datos"
                });
            respuesta.Message = ex.Message;
        }

        return respuesta;

    }

    private void cleanInputsJuridica()
    {
        // Restablecer los valores de los campos a su estado inicial o vacío
        model = new PersonaJuridicaDto();
    }

    private void resultPersonaJuridica(List<PersonaJuridicaDto> listPersonaJuridica)
    {
        this.listPersonaJuridica = listPersonaJuridica;
    }

    private async Task<ResponseDTO<BalanceDto>> deletePersonaJuridica(PersonaJuridicaDto personaJuridicaDto)
    {
        var respuesta = new ResponseDTO<BalanceDto>();

        var alerta = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta a punto de borrar al integrante Juridico",
                Text = $"¿Desea eliminarlo de la lista?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Aceptar"

            });
        if (alerta.IsConfirmed)
        {
            try
            {
                personaJuridicaDto.SesionId = sesionId;
                respuesta = await socioService.deletePersonaJuridica(personaJuridicaDto);

                if (respuesta.IsSuccess)
                {
                    notificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 3000,
                            Summary = "Se ha eliminado correctamente"
                        });

                    listPersonaJuridica.Remove(personaJuridicaDto);
                    await grid.Reload();
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                notificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Duration = 3000,
                        Summary = "No se ha podido eliminar"
                    });
                respuesta.Message = ex.Message;
            }

        }


        return respuesta;
    }

    private async Task<ResponseDTO<BalanceDto>> updatePersonaJuridica(PersonaJuridicaDto nuevoModelo)
    {
        ResponseDTO<BalanceDto> respuesta = new();
        try
        {
            PersonaJuridicaValidator personaValidator = new();
            ValidationResult result = personaValidator.Validate(nuevoModelo);

            if (result.IsValid)
            {
                nuevoModelo.SesionId = sesionId;
                respuesta = await socioService.updatePersonaJuridica(nuevoModelo);
                if (respuesta.IsSuccess)
                {

                    notificationService.Notify(new NotificationMessage
                        {
                            Severity = NotificationSeverity.Success,
                            Duration = 3000,
                            Summary = "Datos guardados correctamente"
                        });

                }
            }
        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
            notificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Duration = 3000,
                    Summary = "No se ha podido guardar los datos"
                });
        }

        return respuesta;

    }

    private async Task OpenDialogAsync(PersonaJuridicaDto personaJuridica)
    {

        IDialogReference dialog;


        var parameters = new DialogParameters();
        parameters.Add("PersonaJuridica", personaJuridica);

        dialog = DialogService.Show<UpdatePersonaJuridica>("Editar Integrante", parameters);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var nuevoModelo = result.Data as PersonaJuridicaDto;
            await updatePersonaJuridica(nuevoModelo);
        }
    }
}





