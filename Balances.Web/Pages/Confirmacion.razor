@page "/Confirmacion"
@using Balances.DTO;
@using Balances.Model;
@using Balances.Web.Services.Implementation;
@inject ICaratulaService caratulaService
@inject IPresentacionService presentacionService

<!DOCTYPE html>

<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>Manifiesto de Presentación de Estados Contables Digitales IGJ</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Encode+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap" rel="stylesheet">

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />

    <script src="_content/Blazorise.Bootstrap5/modal.js?v=1.4.1.0" type="module"></script>
    <script src="_content/Blazorise.Bootstrap5/tooltip.js?v=1.4.1.0" type="module"></script>

    <style>
        body {
            margin-left: 40px;
            font-family: 'Roboto', sans-serif;
        }

        .box {
            border: 1px solid;
            padding: 8px;
        }

        .encabezado {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 2px solid #37bbed;
        }

        .logo {
            max-height: 100px;
            width: auto;
        }

        .membrete {
            text-align: right;
            font-size: small;
            margin-top: 0px;
            margin-bottom: 0px;
        }

        .seccion {
            font-family: 'Encode Sans', sans-serif;
            font-size: large;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .titulo {
            font-family: 'Encode Sans', sans-serif;
            font-size: xx-large;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .subtitulo {
            font-family: 'Encode Sans', sans-serif;
            opacity: 0.7;
            font-size: x-large;
            font-weight: oblique;
            margin-top: 5px;
        }

        .mono {
            font-family: 'Roboto Mono';
        }

        .error {
            color: red;
        }

        table {
            border-collapse: collapse;
            width: 100%;
            border: 1px solid #333333;
        }

        th {
            border: 1px solid #333333;
            padding: 8px;
            text-align: left;
            background-color: #f2f2f2;
            font-size: small;
        }

        td {
            border: 1px solid #333333;
            padding: 8px;
            text-align: left;
            font-size: small;

        }

        .error-container {
            color: red;
            border: 1px solid red;
            padding: 10px;
            margin-bottom: 10px;
        }
    </style>
   

</head>

<body>
    
    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="Confirmacion" TramiteIniciado="true"></Navegacion>

    <!--Loading-->

    <Modal @ref="modalRef">
        <ModalContent>
            <ModalBody>
                <div class="d-flex justify-content-center align-items-center">
                    <div class="text-center">
                       
                       <div class="spinner-grow text-primary" role="status">
                            <span class="sr-only"></span>
                        </div>
                        <div class="spinner-grow text-secondary" role="status">
                            <span class="sr-only"></span>
                        </div>
                        <div class="spinner-grow text-success" role="status">
                            <span class="sr-only"></span>
                        </div>
                        <div class="spinner-grow text-danger" role="status">
                            <span class="sr-only"></span>
                        </div>
                        <div class="spinner-grow text-warning" role="status">
                            <span class="sr-only"></span>
                        </div>
                        <div class="spinner-grow text-info" role="status">
                            <span class="sr-only"></span>
                        </div>
                        <div class="spinner-grow text-light" role="status">
                            <span class="sr-only"></span>
                        </div>
                        <div class="spinner-grow text-dark" role="status">
                            <span class="sr-only"></span>
                        </div>
                        <div>
                            Loading...
                        </div>
                    </div>
                </div>
            </ModalBody>
        </ModalContent>
    </Modal>
    
    @if (mensajesError.Any())
    {
        <div class="error-container">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Título</th>
                        <th>Error</th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (var mensaje in mensajesError)
                    {
                        <tr>
                            <td>
                                <h5>@GetTitulo(mensaje)</h5>
                            </td>
                            <td>
                                <span class="error"> @GetMensaje(mensaje) </span>
                            </td>
                        </tr>
                    }

            </tbody>
        </table>
    </div>
    }
    else{

    <div class="d-flex justify-content-center mt-4 mb-4">
        <button type ="button" @onclick="generarPresentacion" class="btn btn-primary">Generar presentación</button>
    </div>

    <div class="encabezado">
        <img class="logo" src="img/LogoIGJNuevo.jpg" alt="Logo IGJ">
        <img class="logo" src="img/LogoMinJusIGJ.jpg" alt="Logo MJDH">
    </div>
    <div class="membrete">
        <p><b><i>1983/2023 - 40 Años de Democracia</i></b></p>
    </div>
    <div>
        <p class="titulo">Regimen de Presentación de Estados Contables</p>
        <p class="subtitulo">Anexo I - Resolución General IGJ Nº <span class="error">A DEFINIR</span></p>
    </div>
    <div>
        <p class="membrete"><b>Código de Presentación :</b>  <img alt="Embedded QR code" class="img-responsive" src="cid:{{QR}}" /></p>
    </div>
    <br />

    @if (balance.Caratula != null && balance.Caratula.Entidad != null)
    {
        <div>
            <p>     <b>Denominación         :</b>  @this.balance.Caratula.Entidad.RazonSocial</p>
            <p>     <b>Tipo Societario      :</b>  @this.balance.Caratula.Entidad.TipoEntidad</p>
            <p>     <b>Nro Correlativo      :</b>  @this.balance.Caratula.Entidad.Correlativo</p>
            <p>     <b>CUIT                 :</b>  @this.balance.Caratula.Entidad.RazonSocial</p>
            <p>     <b>Domicilio            :</b>  @this.balance.Caratula.Entidad.Domicilio</p>
            <p>     <b>Estados contables al :</b>  @this.balance.Caratula.FechaInicio.ToString("dd/MM/yyyy")</p>
        </div>
    }
    else
    {
        <div>
            <p>     <b>Denominación         :</b>   <span class="error">Falta Campos</span></p>
            <p>     <b>Tipo Societario      :</b>  <span class="error">Falta Campos</span></p>
            <p>     <b>Nro Correlativo      :</b>  <span class="error">Falta Campos</span></p>
            <p>     <b>CUIT                 :</b>    <span class="error">Falta Campos</span></p>
            <p>     <b>Domicilio            :</b>  <span class="error">Falta Campos</span></p>
            <p>     <b>Estados contables al :</b>    <span class="error">Fecha de inicio no disponible</span></p>
        </div>
    }
    <br />
    <div>


        <p class="seccion">Manifestación del Representante Legal </p>

        @if (balance.Caratula != null && balance.Caratula.Entidad != null)
        {
            <p>  En mi carácter de representante legal de la sociedad  @this.balance.Caratula.Entidad.RazonSocial  @this.balance.Caratula.Entidad.TipoEntidad, manifiesto que los datos contenidos en los archivos de hash {archivo.Hash} , se corresponden en carácter de Declaración Jurada con los de los estados contables de la citada sociedad cerrados al @this.balance.Caratula.FechaDeCierre.ToString("dd/MM/yyyy") obrantes en sus registros contables y también con la demás documentación relativa a su tratamiento, ello en la forma prescripta por la resolución citada.</p>
        }
        else
        {
            <p>  En mi carácter de representante legal de la sociedad  <span class="error">Falta Campos</span> , manifiesto que los datos contenidos en los archivos de hash <span class="error">Falta Campos</span> , se corresponden en carácter de Declaración Jurada con los de los estados contables de la citada sociedad cerrados al <span class="error">Falta Campos</span> obrantes en sus registros contables y también con la demás documentación relativa a su tratamiento, ello en la forma prescripta por la resolución citada.</p>

        }

    </div>
    <br />
    <div class="box">

        @foreach(var autoridad in listAutoridades){
            if (autoridad.EsFirmante && listAutoridades.Count(a => a.EsFirmante) >= 1)
            {
                <p><span class="error"> </span></p>
                <p>   Lugar y Fecha     : @balance.Caratula.Entidad.Domicilio @balance.Caratula.FechaInicio.ToString("dd/MM/yyyy") </p>
                <p>   Apellido y Nombre : @autoridad.Apellido @autoridad.Nombre </p>
                <p>   CUIT              : @autoridad.NroFiscal   </p>
                <p>   Firma             : </p>
            }          
        }
    </div>
    <br />
    <div>
        <p class="seccion">Certificación del Auditor Externo sobre Información Requerida por la Resolución General IGJ <span class="error">A DEFINIR</span></p>

        @if (balance.Caratula != null && balance.Caratula.Entidad != null)
        {
            <p>En mi carácter de contador público independiente y auditor externo de @balance.Caratula.Entidad.RazonSocial  @balance.Caratula.Entidad.TipoEntidad, certifico la información detallada en el apartado siguiente.</p>
        }
        else
        {
            <p>En mi carácter de contador público independiente y auditor externo de  <span class="error">Falta Campos</span> , certifico la información detallada en el apartado siguiente.</p>
        }
    </div>
    <div>
        <p><b>1) Información Objeto de la Certificación</b></p>
        @if (@libros != null)
        {
            <table>
                <tr>
                    <th>Asiento</th>
                    <th>Libro</th>
                    <th>Numero de Rúbrica</th>
                    <th>Folio</th>
                    <th>Denominacion</th>
                    <th>Fecha Registracion</th>
                </tr>
               
                    <tr>
                        <td>Memoria</td>
                        <td>@libros.Memoria.Nombre</td>
                        <td>@libros.Memoria.NumeroRubrica</td>
                        <td>@libros.Memoria.Folio</td>
                        <td>@libros.Memoria.Denominacion</td>
                    <td>@libros.Memoria.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>

                    <tr>
                        <td>Acta del Órgano de Administración</td>
                        <td>@libros.Administracion.Nombre</td>
                        <td>@libros.Administracion.NumeroRubrica</td>
                        <td>@libros.Administracion.Folio</td>
                        <td>@libros.Administracion.Denominacion</td>
                    <td>@libros.Administracion.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>

                    <tr>
                        <td>Estado de Situación Patrimonial</td>
                        <td>@libros.SituacionPatrimonial.Nombre</td>
                        <td>@libros.SituacionPatrimonial.NumeroRubrica</td>
                        <td>@libros.SituacionPatrimonial.Folio</td>
                        <td>@libros.SituacionPatrimonial.Denominacion</td>
                        <td>@libros.SituacionPatrimonial.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>
                        <td>Estado de Resultados</td>
                        <td>@libros.Resultados.Nombre</td>
                        <td>@libros.Resultados.NumeroRubrica</td>
                        <td>@libros.Resultados.Folio</td>
                        <td>@libros.Resultados.Denominacion</td>
                        <td>@libros.Resultados.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>
                        <td>Estado de Evolución del Patrimonio Neto</td>
                        <td>@libros.PatrimonioNeto.Nombre</td>
                        <td>@libros.PatrimonioNeto.NumeroRubrica</td>
                        <td>@libros.PatrimonioNeto.Folio</td>
                        <td>@libros.PatrimonioNeto.Denominacion</td>
                        <td>@libros.PatrimonioNeto.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>
                        <td>Estado de Flujo de Efectivo</td>
                        <td>@libros.Efectivo.Nombre</td>
                        <td>@libros.Efectivo.NumeroRubrica</td>
                        <td>@libros.Efectivo.Folio</td>
                        <td>@libros.Efectivo.Denominacion</td>
                        <td>@libros.Efectivo.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>
                        <td>Información Complementaria</td>
                        <td>@libros.Informacion.Nombre</td>
                        <td>@libros.Informacion.NumeroRubrica</td>
                        <td>@libros.Informacion.Folio</td>
                        <td>@libros.Informacion.Denominacion</td>
                        <td>@libros.Informacion.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>
                        <td>Estado Contable Consolidado</td>
                        <td>@libros.EstadosContablesConsolidados.Nombre</td>
                        <td>@libros.EstadosContablesConsolidados.NumeroRubrica</td>
                        <td>@libros.EstadosContablesConsolidados.Folio</td>
                        <td>@libros.EstadosContablesConsolidados.Denominacion</td>
                        <td>@libros.EstadosContablesConsolidados.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>
                        <td>Informe de Órgano de Fiscalización</td>
                        <td>@libros.Fiscalizacion.Nombre</td>
                        <td>@libros.Fiscalizacion.NumeroRubrica</td>
                        <td>@libros.Fiscalizacion.Folio</td>
                        <td>@libros.Fiscalizacion.Denominacion</td>
                    <td>@libros.Fiscalizacion.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>
                        <td>Informe del Auditor Externo</td>
                        <td>@libros.Auditor.Nombre</td>
                        <td>@libros.Auditor.NumeroRubrica</td>
                        <td>@libros.Auditor.Folio</td>
                        <td>@libros.Auditor.Denominacion</td>
                    <td>@libros.Auditor.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>
                        <td>Registro de asistencia</td>
                        <td>@libros.AsistenciaAsamblea.Nombre</td>
                        <td>@libros.AsistenciaAsamblea.NumeroRubrica</td>
                        <td>@libros.AsistenciaAsamblea.Folio</td>
                        <td>@libros.AsistenciaAsamblea.Denominacion</td>
                        <td>@libros.AsistenciaAsamblea.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>

                        <td>Libro Diario</td>
                        <td>@libros.IVA.Nombre</td>
                        <td>@libros.IVA.NumeroRubrica</td>
                        <td>@libros.IVA.Folio</td>
                        <td>@libros.IVA.Denominacion</td>
                    <td>@libros.IVA.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>

                        <td>IVA Compras</td>
                        <td>@libros.IVACompras.Nombre</td>
                        <td>@libros.IVACompras.NumeroRubrica</td>
                        <td>@libros.IVACompras.Folio</td>
                        <td>@libros.IVACompras.Denominacion</td>
                    <td>@libros.IVACompras.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>
                        <td>IVA Ventas</td>
                        <td>@libros.IVACompras.Nombre</td>
                        <td>@libros.IVACompras.NumeroRubrica</td>
                        <td>@libros.IVACompras.Folio</td>
                        <td>@libros.IVACompras.Denominacion</td>
                        <td>@libros.IVACompras.FechaUltimaRegistracion.ToString("dd/MM/yyyy")</td>
                    </tr>
                    <tr>
                        <td colspan="4">Informe de Auditoria: Opinión <span class="error">FALTAN CAMPOS</span></td>
                    </tr>
                    @if (contador != null)
                    {
                        <tr>
                            <td colspan="4">Fecha del Informe del Auditor Externo @contador.FechaInformeAuditorExt</td>
                        </tr>
                        <tr>
                            <td colspan="4">Nro de Legalización del Auditor Externo @contador.NroLegalInfoAudExt</td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td colspan="4">Fecha del Informe del Auditor Externo <span class="error">Falta Campos</span></td>
                        </tr>
                        <tr>
                            <td colspan="4">Nro de Legalización del Auditor Externo<span class="error">Falta Campos</span></td>
                        </tr>

                    }

                    <tr>
                        <td colspan="4">Observaciones <span class="error">FALTAN CAMPOS</span></td>
                    </tr>
                
            </table>
        }
        else
        {
            <p>Memoria is null</p>
        }
    </div>
    <div>
        <p><b>2) Tarea Profesional Realizada</b></p>
        
        @if (balance.Caratula != null && contador != null)
        {
            <p>  Por disposición de las Normas Profesionales de Auditoria vigentes, la emisión de una certificación consiste únicamente en constatar determinados hechos y circunstancias con registros contables y/o documentación de respaldo. Por lo expuesto, mi tarea profesional consistió en cotejar  la información incluida en 1., Correspondientes al ejercicio cerrado el @balance.Caratula.FechaDeCierre e Informe de Auditor Externo de fecha @contador.FechaInformeAuditorExt con los datos incluidos en <span class="error">FALTAN CAMPOS</span>.</p>
        }
    </div>
    <div>
        <p><b>3) Certificación</b></p>
        <p>  Sobre la base delas tareas descriptas CERTIFICO que la información contenida en los documentos detallados en 1. concuerda en un todo con lo declarado en el hash y surge de registros rubricados/medios ópticos/mecánicos/digitales  llevados en legal forma.-</p>
    </div>
    <br />
    <div class="box">
        @if (contador != null)
        {
            <p>   Lugar y Fecha     : </p>
            <p>   Apellido y Nombre : @contador.Apellido @contador.Nombre </p>
            <p>   CUIT              : @contador.NroFiscal - T° @contador.Tomo F° @contador.Folio  </p>
            <p>   En carácter de Socio de la Soc Tº <span class="error">FALTAN CAMPOS</span> Fº <span class="error">FALTAN CAMPOS   (ésta línea solo debe aparecer si "Actúa en carácter de Socio de Estudio Contable" = True)</span></p>
            <p>   Firma             : </p>
        }
    </div>



    }
</body>

</html>



@code {

    List<string> mensajesError = new List<string>();

    // reference to the modal component
    private Modal modalRef;

    [Parameter] public string? TipoEntidad { get; set; }

    private AutoridadDto autoridades = new AutoridadDto();
    private List<AutoridadDto> listAutoridades = new List<AutoridadDto>();
    private LibroDto libro = new LibroDto();
    private LibrosDto libros = new LibrosDto();
    private ContadorDto contador = new ContadorDto();
    private List<Archivo> listArchivo = new List<Archivo>();

    private BalanceDto balance = new BalanceDto();


    protected override async void OnInitialized()
    {
        await Load();
        await ValidarCampos();
        await base.OnInitializedAsync();
    }
    private async Task Load()
    {
        try
        {
            var idSession = await caratulaService.getSession();

            if (idSession.IsSuccess)
            {
                var response = await caratulaService.getBalance(idSession.Result);

                if (idSession.IsSuccess == true)
                {

                    try
                    {

                        if (response.Result != null)
                        {

                            TipoEntidad = response.Result.Caratula.Entidad.TipoEntidad;

                            setBalance(response.Result);
                            setAutoridades(balance.Autoridades);
                            setLibros(balance.Libros);
                            setContador(balance.Contador);
                            setArchivos(balance.Archivos);


                            StateHasChanged();

                        }
                        else
                        {
                            Console.WriteLine($"No hay resultados en la respuesta");
                        }

                    }
                    catch (Exception ex)
                    {

                        Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
                    }
                }
            }
            else
            {
                Console.WriteLine($"No se ha encontrado el idSession");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }

    private async Task<ResponseDTO<BalanceDto>> generarPresentacion()
    {

        try
        {

            await ShowLoadingModal();

            var responseDto = new ResponseDTO<BalanceDto>();
            var response = await presentacionService.generarPresentacion();

            if (response.IsSuccess)
            {

                responseDto.IsSuccess = response.IsSuccess;
                responseDto.Message = response.Message;
                responseDto.Result = response.Result;

                return responseDto;
            }
            else
            {
                responseDto.IsSuccess = response.IsSuccess;
                responseDto.Message = response.Message;
                responseDto.Result = response.Result;

                return responseDto;
            }

        }
        catch (Exception ex)
        {
            return new ResponseDTO<BalanceDto>
                {
                    IsSuccess = false,
                    Message = $"{ex.Message}",
                    Result = null
                };
        }

        finally
        {
            await HideLoadingModal();
        }
    }

    private void setBalance(BalanceDto balance)
    {     
        this.balance = balance;

    }

    private void setAutoridades(List<AutoridadDto> lista)
    {
        this.listAutoridades = lista;
    }


    private void setLibros(LibrosDto libro)
    {

        this.libros = libro;

    }


    private void setArchivos(List<Archivo>archivos)
    {

        this.listArchivo = archivos;

    }



    private void setContador(Model.Contador contador)
    {
     
        this.contador.Nombre = contador.Nombre;
        this.contador.Apellido = contador.Apellido;
        this.contador.TipoDocumento = balance.Contador.TipoDocumento;
        this.contador.NroDocumento = contador.NroDocumento;
        this.contador.NroFiscal = contador.NroFiscal;
        this.contador.Tomo = contador.Tomo;
        this.contador.Folio = contador.Folio;
        this.contador.NroLegalInfoAudExt = contador.NroLegalInfoAudExt;
        this.contador.FechaInformeAuditorExt = contador.FechaInformeAuditorExt;

    }



    private async Task<bool> ValidarCampos()
    {
        if (balance != null)
        {
            // Limpiar la lista de mensajes de error antes de cada validación
            mensajesError.Clear();

            // Validar propiedades de Entidad
            //ValidarPropiedades(balance.Caratula.Entidad, "Entidad");

            // Validar propiedades de Entidad
            //  ValidarPropiedades(balance.EstadoContable, "EstadoContable");

            // Validar propiedades de Socios
            //ValidarPropiedades(balance.Socios, "Socios");

            // Validar propiedades de Contador
            ValidarPropiedades(contador, "Contador");

            // Validar propiedades de Libros
            //ValidarPropiedades(balance.Libros, "Libros");

            // Validar propiedades de Autoridades
            //ValidarPropiedades(balance.Autoridades, "Autoridades");

            // Validar propiedades de Archivos
            //ValidarPropiedades(balance.Archivos, "Archivos");

            // Verificar si hay mensajes de error y mostrarlos

            if (mensajesError.Any())
            {

                StateHasChanged();
                return false;
            }
        }
        else
        {
            return false;
        }

        return true;
    }

   

    private string GetTitulo(string mensaje)
    {
        // Implement your logic to classify errors based on the object
        if (mensaje.Contains("Contador"))
        {
            return "Contador";
        }
        else if (mensaje.Contains("Libros"))
        {
            return "Libros";
        }
        else if (mensaje.Contains("Autoridades"))
        {
            return "Autoridades";
        }
        // Add more conditions as needed
        else
        {
            return "Otros Errores";
        }
    }

    private string GetMensaje(string mensaje)
    {
        // Extract the error message without the title
        var startIndex = mensaje.IndexOf(":") + 1; // Find the index after the colon
        if (startIndex > 0 && startIndex < mensaje.Length)
        {
            return mensaje.Substring(startIndex).Trim(); // Extract the message and remove leading/trailing spaces
        }
        else
        {
            return mensaje; // Return the original message if the format is unexpected
        }
    }

    private void ValidarPropiedades(object entidad, string nombreEntidad)
    {
        foreach (var propiedad in entidad.GetType().GetProperties())
        {
            var valor = propiedad.GetValue(entidad);

            if (propiedad.Name == "id" || propiedad.Name == "Id" || propiedad.Name == "Balance")
            {
                // Omitir la validación para la propiedad "Id"
                continue;
            }



            if (valor == null)
            {
                mensajesError.Add($"La propiedad {propiedad.Name} en {nombreEntidad} está vacía");
                

            }
            else if (valor is string && string.IsNullOrEmpty((string)valor))
            {
                mensajesError.Add($"La propiedad {propiedad.Name} en {nombreEntidad} está vacía");
            

            }
            else if (valor is int && (int)valor == 0)
            {
                mensajesError.Add($"La propiedad {propiedad.Name} en {nombreEntidad} debe ser un valor numérico");
  

            }
            else if (valor is DateTime && (DateTime)valor == DateTime.MinValue)
            {
                mensajesError.Add($"La propiedad {propiedad.Name} en {nombreEntidad} debe ser una fecha válida.");
              
            }
           
        }
    }
    // Método para mostrar el modal de carga
    private Task ShowLoadingModal()
    {
        return modalRef.Show();
    }

    // Método para ocultar el modal de carga
    private Task HideLoadingModal()
    {
        return modalRef.Hide();
    }
    
}
