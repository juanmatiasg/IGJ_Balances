@page "/Confirmacion/{balid?}"
@using Balances.DTO;
@using Balances.Model;
@using Balances.Utilities;
@using Balances.Web.Services
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using System.Web
@inject ICaratulaClientService caratulaService
@inject IPresentacionClientService presentacionService
@inject IBalanceClientService balanceService
@inject ISessionClientService sesionService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject SweetAlertService swal




<Navegacion PaginaActiva="Confirmacion" TramiteIniciado="true" balid="@balid"></Navegacion>


<div class="d-flex justify-content-center mt-4 mb-4">
    <RadzenButton Icon="class" Text="Generar manifiesto de presentación" ButtonType="Radzen.ButtonType.Submit" Click=@generarPresentacion class="d-block mt-4" />
    @*   <button type ="button" @onclick="generarPresentacion" class="btn btn-primary">Generar manifiesto</button> *@
</div>

<!--Loading-->

<Modal @ref="modalRef">
    <ModalContent>
        <ModalBody>
            <div class="d-flex justify-content-center align-items-center">
                <div class="text-center">

                    <div class="spinner-grow text-primary" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <div class="spinner-grow text-secondary" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <div class="spinner-grow text-success" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <div class="spinner-grow text-danger" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <div class="spinner-grow text-warning" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <div class="spinner-grow text-info" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <div class="spinner-grow text-light" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <div class="spinner-grow text-dark" role="status">
                        <span class="sr-only"></span>
                    </div>
                    <div>
                        Loading...
                    </div>
                </div>
            </div>
        </ModalBody>
    </ModalContent>
</Modal>


@code {

    List<string> mensajesError = new List<string>();

    // reference to the modal component
    private RadzenProgressBarCircular barraProgreso = new RadzenProgressBarCircular();


    private Modal modalRef;

    [Parameter]
    public string? balid { get; set; }
    [Parameter]
    public string sesionId { get; set; }

    string htmlFormatPresentacion;
    string HtmlStringPresentacion;


    ResponseDTO<BalanceDto> rsp = new();
    private EstadoContableDto estadoContable = new EstadoContableDto();



    protected override async void OnInitialized()
    {
        await Load();
        // ValidarCampos();
        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        // ResponseDTO<BalanceDto> rsp = new();
        try
        {

            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();

                sesionId = sesionRespuesta.Result;
                sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rst = await sesionService.getBalanceId(sesionId);

                if (rst is not null)
                {
                    balid = rst;
                    rsp = await balanceService.getBalance(balid);

                    if (rsp.IsSuccess)
                    {
                        // string HtmlStringPresentacion = await presentacionService.GenerarPresentacionEnHtml(sesionId);

                        // htmlFormatPresentacion = HttpUtility.HtmlEncode(HtmlStringPresentacion);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }




    private async Task<ResponseDTO<BalanceDto>> generarPresentacion()
    {
        var responseDto = new ResponseDTO<BalanceDto>();
        try
        {
            if (rsp.Result.Archivos is null ||
            rsp.Result.Autoridades is null ||
            rsp.Result.EstadoContable is null ||
            rsp.Result.Libros is null ||
            rsp.Result.Socios is null ||
            rsp.Result.Contador is null
            )
            {
                await swal.FireAsync(new SweetAlertOptions
                    {
                        Icon = "warning",
                        Title = "No se pudo generar el manifiesto de presentación",

                        Text = "hay datos obligatorios sin completar. Por favor, verifica y completa la información necesaria.",
                        ConfirmButtonText = "Aceptar"

                    });
            }
            else
            {
                responseDto.IsSuccess = false;

                // var autoridades = rsp.Result.Autoridades;

                var estadocontable = rsp.Result.EstadoContable;
                var otrosRubros = SumaEECC.OtrosRubrosPatrimonioNeto(estadocontable);
                var patrimonioNeto = SumaEECC.PatrimonioNeto(estadocontable);

                var LibroFiscalizacionSinDatos = rsp.Result.Libros.Fiscalizacion.FolioUltimaRegistracion.Contains("N/C");

                var documentacion = rsp.Result.Archivos;

                var autoridadfirmante = rsp.Result.Autoridades.Any(_ => _.EsFirmante == true);

                var DocumentacionEstadoContable = rsp.Result.Archivos.Any(_ => _.Categoria == "Estados Contables");

                var DocumentacionActaReuniOrgano = rsp.Result.Archivos.Any(_ => _.Categoria == "Acta de Reunión de Socios");

                var DocumentacionActaReuniónAdministradores = rsp.Result.Archivos.Any(_ => _.Categoria == "Acta de Reunión Administradores");

                var DocumentacionInformeFiscalizacion = rsp.Result.Archivos.Any(_ => _.Categoria == "Informe Fiscalizacion");

                // var autoridadfirmante = autoridades.Where(_ => _.EsFirmante).FirstOrDefault();



                if (!autoridadfirmante)
                {


                    await swal.FireAsync(new SweetAlertOptions
                        {
                            Icon = "warning",
                            Title = "No se pudo generar el manifiesto de presentación",

                            Text = "Es obligatorio que haya una Autoridad firmante. Regresar a la ventana Autoridades y realizar la modificación ",
                            ConfirmButtonText = "Aceptar"

                        });
                }

                else if (patrimonioNeto != otrosRubros)
                {
                    await swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "No se pudo generar el Manifiesto de presentación",
                            Text = $"El total del patrimonio neto: ${patrimonioNeto} ARS no coincide con el total de Rubros del Patrimonio neto: ${otrosRubros} ARS",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Cerrar"

                        });

                }

                else if (!LibroFiscalizacionSinDatos)
                {
                    if (!DocumentacionActaReuniOrgano || !DocumentacionEstadoContable
                            || !DocumentacionActaReuniónAdministradores
                            || !DocumentacionInformeFiscalizacion)
                    {
                        await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "No se pudo generar el Manifiesto de presentación",
                                Text = $"Falta Adjuntar Documentacion. Los documentos Estados Contables, Acta Reunión Organo, Acta Reunión Administración e Informe de fiscalizacion son obligatorios",
                                Icon = SweetAlertIcon.Warning,
                                ConfirmButtonText = "Cerrar"

                            });
                    }
                    else
                    {
                        swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Presentacion Generada con Exito",
                                Text = $"Recibira la presentacion del balance para su descarga en su email {rsp.Result.Caratula.Email}",
                                Icon = SweetAlertIcon.Success,
                                ConfirmButtonText = "Cerrar"

                            });


                        var response = await presentacionService.generarPresentacion(sesionId);

                        responseDto.IsSuccess = response.IsSuccess;
                        responseDto.Message = response.Message;
                        responseDto.Result = response.Result;

                    }
                }

                else if (LibroFiscalizacionSinDatos)
                {
                    if (!DocumentacionActaReuniOrgano || !DocumentacionEstadoContable
                         || !DocumentacionActaReuniónAdministradores)
                    {
                        await swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "No se pudo generar el Manifiesto de presentación",
                                Text = $"Falta Adjuntar Documentacion. Los documentos Estados Contables, Acta Reunión Organo, Acta Reunión Administración son obligatorios",
                                Icon = SweetAlertIcon.Warning,
                                ConfirmButtonText = "Cerrar"

                            });
                    }
                    else
                    {
                        await ShowLoadingModal();

                        swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Presentacion Generada con Exito",
                                Text = $"Recibira la presentacion del balance para su descarga en su email {rsp.Result.Caratula.Email}",
                                Icon = SweetAlertIcon.Success,
                                ConfirmButtonText = "Cerrar"

                            });

                        var response = await presentacionService.generarPresentacion(sesionId);

                        responseDto.IsSuccess = response.IsSuccess;
                        responseDto.Message = response.Message;
                        responseDto.Result = response.Result;
                    }



                }
            }

        }
        catch (Exception ex)
        {
            return new ResponseDTO<BalanceDto>
                {

                    Message = $"{ex.Message}",

                };
        }

        await HideLoadingModal();

        return responseDto;
    }


    // Método para mostrar el modal de carga
    private Task ShowLoadingModal()
    {
        return modalRef.Show();
    }

    // Método para ocultar el modal de carga
    private Task HideLoadingModal()
    {
        return modalRef.Hide();
    }





}
