@page "/EstadoContable/{balid?}"

@using Balances.DTO;
@using Balances.Model;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using Balances.ViewModel;
@using System.Globalization;


@using System.Text.RegularExpressions;
@using System.Reflection;
@using Blazorise.Extensions;
@using Microsoft.AspNetCore.Http;

@inject NavigationManager NavigationManager

@inject IBalanceClientService balanceService
@inject IBaseSessionClientService sesionService
@inject EstadoContableViewModel viewModel


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Estado Contable</title>
    <!-- Agrega los enlaces a los estilos de Bootstrap y otros recursos aquí -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">


</head>
<body>

    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="EstadoContable" TramiteIniciado="true" balid="@balid"></Navegacion>

    <!---------------------------------------------------------------->
    <div class="container mt-4">
        <h2 class="text-center">Estado Contable</h2>
        <div class="row">
            <div class="col">

                <!-- Período -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title d-flex justify-content-center">Período</h5>
                        <div class="form-group">
                            <input type="text" class="form-control" id="fechaInicio" placeholder="Tipo de balance" @bind=viewModel.ToRegistry.tipoBalance @onblur="insertEECC">
                            <small id="tipoBalanceError" class="text-danger">@tipoBalanceError</small>

                        </div>
                        <div class="form-group">
                            <label for="fechaInicio">Fecha de Inicio</label>
                            <input type="date" class="form-control" id="fechaInicio" placeholder="Fecha de Inicio" @bind=viewModel.ToRegistry.fechaInicio @onblur="insertEECC">
                            <small id="tipoBalanceError" class="text-danger">@fechaInicioError</small>

                        </div>

                        <div class="form-group">
                            <label for="fechaEstado">Fecha de Cierre</label>
                            <input type="date" class="form-control" id="fechaEstado" placeholder="Fecha de Cierre" @bind=viewModel.ToRegistry.fechaEstado @onblur="insertEECC">
                            <small id="tipoBalanceError" class="text-danger">@fechaEstadoError</small>

                        </div>
                    </div>
                </div>

                <!-- Aprobado por -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title d-flex justify-content-center">Aprobado por</h5>
                        <div class="form-group">
                            <label for="fechaReunionDirectorio">Fecha de Acta de Reunión de Autoridades</label>
                            <input type="date" class="form-control" id="fechaReunionDirectorio" placeholder="Fecha de Acta de Renión de Autoridades" @bind=viewModel.ToRegistry.fechaReunionDirectorio @onblur="insertEECC">
                            <small id="tipoBalanceError" class="text-danger">@fechaReunionDirectorioError</small>

                        </div>
                        <div class="form-group">
                            <label for="fechaAsamblea">Fecha de Acta de Reunión de Socios</label>
                            <input type="date" class="form-control" id="fechaAsamblea" placeholder="Fecha de Acta de Reunión de Socios" @bind=viewModel.ToRegistry.fechaAsamblea @onblur="insertEECC">
                            <small id="tipoBalanceError" class="text-danger">@fechaAsambleaError</small>
                        </div>
                    </div>
                </div>

                <!-- Rubros del Balance -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title d-flex justify-content-center">Rubros del Balance</h5>

                        <div class="row">
                            <!--Columna 1-->
                            <div class="col">
                                <div class="form-group">
                                    <label for="activoCorriente">Caja Y Bancos</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="numero" @bind-value=viewModel.ToRegistry.cajaYBancos @onblur="insertEECC" />

                                    </div>
                                    <small id="tipoBalanceError" class="text-danger">@cajaYBancosError</small>

                                </div>

                                <div class="form-group">
                                    <label for="activoCorriente">Inversiones</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" @bind="viewModel.ToRegistry.inversionesActivoCorriente" @onblur="insertEECC" />
                                    </div>
                                    <small id="tipoBalanceError" class="text-danger">@inversionesError</small>
                                </div>

                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Bienes de Cambios</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.bienesDeCambio" @onblur="insertEECC" />
                                    </div>
                                    <small id="tipoBalanceError" class="text-danger">@bienesDeCambioError</small>

                                </div>

                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Activo Corriente Restante</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>

                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.activoCorrienteRestante" @onblur="insertEECC" />
                                    </div>
                                    <small id="tipoBalanceError" class="text-danger">@activoCorrienteRestanteError</small>

                                </div>

                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Total Activo Corriente</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.activoCorriente" @onblur="insertEECC" disabled />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Bienes de Uso</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.bienesDeUso" @onblur="insertEECC" />
                                    </div>
                                    <small id="tipoBalanceError" class="text-danger">@bienesDeUsoError</small>

                                </div>

                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Propiedades de Inversión</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.propiedadesDeInversion" @onblur="insertEECC" />
                                    </div>
                                    <small id="tipoBalanceError" class="text-danger">@propiedadesDeInversionError</small>

                                </div>

                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Activo No Corriente Restante</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.activoNoCorrienteRestante" @onblur="insertEECC" />
                                    </div>
                                    <small id="tipoBalanceError" class="text-danger">@activoNoCorrienteRestanteError</small>
                                </div>

                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Total Activo No Corriente</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.activoNoCorriente" @onblur="insertEECC" disabled />
                                    </div>
                                </div>



                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Total Activo</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.totalActivo" @onblur="insertEECC" disabled />
                                    </div>
                                </div>


                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Deudas del Pasivo Corriente</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.deudorPasivoCorriente" @onblur="insertEECC" />
                                    </div>
                                    <small id="tipoBalanceError" class="text-danger">@deudasPasivoCorrienteError</small>

                                </div>


                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Deudas del Pasivo No Corriente</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.deudorPasivoNoCorriente" @onblur="insertEECC" />
                                    </div>
                                    <small id="tipoBalanceError" class="text-danger">@deudasPasivoNoCorrienteError</small>
                                </div>



                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Total Pasivo</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.totalPasivo" @onblur="insertEECC" disabled />
                                    </div>
                                </div>


                                <div class="form-group">
                                    <label for="inversionesActivoCorriente">Patrimonio Neto</label>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <span class="input-group-text">ARS $</span>
                                        </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.patrimonioNeto" @onblur="insertEECC" disabled />
                                    </div>

                                </div>

                                @if (statusPatrimonioNeto)
                                {
                                    <div class="alert alert-danger" role="alert">
                                        No coinciden el Patrimonio Neto de Activo y Pasivo con
                                        el Detalle del Patrimonio Neto
                                    </div>
                                }
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <!-- Rubros del Patrimonio Neto -->
            <div class="col">
                <div class="card mb-4">
                    <div class="card-body">

                        <h5 class="card-title d-flex justify-content-center">Rubros del Patrimonio Neto</h5>
                        <!-- Repite esta estructura para otros campos -->


                        <div class="form-group">
                            <label for="inversionesActivoCorriente">Capital Suscripto</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">ARS $</span>
                                </div>
                                <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.capitalSuscripto" @onblur="insertEECC" />
                            </div>
                            <small id="tipoBalanceError" class="text-danger">@capitalSuscriptoError</small>
                        </div>

                        <div class="form-group">
                            <label for="inversionesActivoCorriente">Ajuste de Capital</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">ARS $</span>
                                </div>
                                <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.ajusteCapital" @onblur="insertEECC" />
                            </div>
                            <small id="tipoBalanceError" class="text-danger">@ajusteCapitalError</small>
                        </div>


                        <div class="form-group">
                            <label for="inversionesActivoCorriente">Aportes Irrevocables</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">ARS $</span>
                                </div>
                                <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.aportesIrrevocables" @onblur="insertEECC" />

                            </div>
                            <small id="tipoBalanceError" class="text-danger">@aportesIrrevocablesError</small>

                        </div>


                        <div class="form-group">
                            <label for="inversionesActivoCorriente">Prima Emisión</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">ARS $</span>
                                </div>
                                <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.primaEmision" @onblur="insertEECC" />
                            </div>
                            <small id="tipoBalanceError" class="text-danger">@primaEmisionError</small>

                        </div>



                        <div class="form-group">
                            <label for="inversionesActivoCorriente">Ganancias Reservadas</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">ARS $</span>
                                </div>
                                <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.gananciasReservadas" @onblur="insertEECC" />
                            </div>
                            <small id="tipoBalanceError" class="text-danger">@gananciasReservadasError</small>

                        </div>


                        <div class="form-group">
                            <label for="inversionesActivoCorriente">Pérdidas Acumuladas</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">ARS $</span>
                                </div>
                                <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.perdidasAcumuladas" @onblur="insertEECC" />
                            </div>
                            <small id="tipoBalanceError" class="text-danger">@perdidasAcumuladasError</small>

                        </div>



                        <div class="form-group">
                            <label for="inversionesActivoCorriente">Ganancias / Pérdidas del Ejercicio</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">ARS $</span>
                                </div>
                                <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.gananciasPerdidasEjercicio" @onblur="insertEECC" />
                            </div>
                            <small id="tipoBalanceError" class="text-danger">@gananciasPerdidasEjercicioError</small>

                        </div>


                        <div class="form-group">
                            <label for="inversionesActivoCorriente">Reserva Legal</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">ARS $</span>
                                </div>
                                <input type="text" class="form-control" id="activoCorriente" @bind="viewModel.ToRegistry.reservaLegal" @onblur="insertEECC" />
                            </div>
                            <small id="tipoBalanceError" class="text-danger">@reservaLegalError</small>

                        </div>

                    </div>

                </div>
                <!--Otros Rubros PN -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="form-group">
                            <h5 class="card-title d-flex justify-content-center">
                                Otros Rubros del Patrimonio Neto
                            </h5>

                            <label for="capitalSuscripto">Denominación</label>
                            <input type="text" class="form-control" id="capitalSuscripto" @bind="denominacionDto">
                            <small id="tipoBalanceError" class="text-danger">@denominacionError</small>

                        </div>
                        <div class="form-group">
                            <label for="inversionesActivoCorriente">Pasivo No Corriente</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">ARS $</span>
                                </div>
                                <input type="text" class="form-control" id="activoCorriente" @bind="importeDto" />
                            </div>
                            <small id="tipoBalanceError" class="text-danger">@pasivoNoCorrienteError</small>
                        </div>

                        <button type="button" class="btn btn-primary w-100" @onclick="insertRubro">Agregar</button>
                    </div>
                </div>

                <div class="card-body">
                    @if (viewModel.ToRegistry.otrosRubros != null)
                    {
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th scope="col">Denominación</th>
                                    <th scope="col">Importe</th>
                                    <th scope="col">Acción</th>
                                </tr>
                            </thead>

                            @foreach (var rubro in viewModel.ToRegistry.otrosRubros)
                            {
                                <tbody>
                                    <tr>

                                        <td>@rubro.denominacion</td>
                                        <td>$@rubro.importe</td>
                                        <td>
                                            <button type="button" class="btn btn-danger" @onclick="() => deleteRubro()">Eliminar</button>
                                        </td>
                                    </tr>
                                </tbody>
                            }
                        </table>
                    }
                </div>
            </div>

        </div>
    </div>




</body>
</html>



@code {

    [Parameter] public string? TipoEntidad { get; set; }

    [Parameter] public string? balid { get; set; } = null;

    private string tipoBalanceError = "";

    private string fechaInicioError = "";
    private string fechaAsambleaError = "";
    private string fechaEstadoError = "";
    private string fechaReunionDirectorioError = "";

    private string cajaYBancosError = "";
    private string inversionesError = "";
    private string bienesDeCambioError = "";
    private string activoCorrienteRestanteError = "";
    private string activoNoCorrienteRestanteError = "";
    private string ajusteCapitalError = "";
    private string aportesIrrevocablesError = "";
    private string bienesDeUsoError = "";
    private string capitalSuscriptoError = "";
    private string deudasPasivoCorrienteError = "";
    private string deudasPasivoNoCorrienteError = "";

    private string gananciasPerdidasEjercicioError = "";
    private string gananciasReservadasError = "";

    private string perdidasAcumuladasError = "";

    private string primaEmisionError = "";

    private string propiedadesDeInversionError = "";
    private string reservaLegalError = "";

    //OtrosRubros
    private string denominacionError = "";
    private string pasivoNoCorrienteError = "";


    private string denominacionDto = "";
    private decimal importeDto = 0;




    private Boolean statusPatrimonioNeto = false;

    private string otraCosa = "";


    decimal cantidad;

    private bool firstTimeInput = true;


    protected override async Task OnInitializedAsync()
    {

        await Load();

        await base.OnInitializedAsync();
    }


    private async Task Load()
    {
        try
        {


            var idSession = await sesionService.GetSessionBalanceId();

            if (idSession != null)
            {


                balid = idSession;

                var response = await balanceService.getBalance(idSession);


                if (response.IsSuccess)
                {

                    try
                    {
                        var rsp = response.Result.EstadoContable;


                        TipoEntidad = response.Result.Caratula.Entidad.TipoEntidad;

                        viewModel.ToRegistry = new EstadoContableDto(rsp);

                        StateHasChanged();

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
                    }
                }
            }
            else
            {
                Console.WriteLine($"No se ha encontrado el idSession");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }






    private async Task<ResponseDTO<BalanceDto>> insertEECC()
    {
        // setFormatMiles();
        sumatoriaTotalActivoCorriente();
        sumatoriaTotalActivoNoCorriente();
        sumatorialTotalActivo();
        sumatoriaTotalPasivo();
        resultadoPatrimonioNeto();
        //resultadoPatNetDetailPatNeto();

        ResponseDTO<BalanceDto> rsp = new();

        try
        {
            if (checkData())
            {

                rsp = await viewModel.InsertEECC();

                if (rsp.IsSuccess)
                {
                    rsp.Message = viewModel.Message;
                }
                else
                {
                    rsp.Message = viewModel.Message;

                }

            }

        }
        catch (Exception ex)
        {
            rsp.Message = ex.Message;

        }

        return rsp;
    }

    private async Task<ResponseDTO<BalanceDto>> insertRubro()
    {

        var rsp = new ResponseDTO<BalanceDto>();
        try
        {

            if (checkDataOtrosRubros())
            {

                viewModel.OtherRegistry.codigo = Guid.NewGuid().ToString();
                viewModel.OtherRegistry.denominacion = denominacionDto;
                viewModel.OtherRegistry.importe = importeDto;


                rsp = await viewModel.InsertRubro();

                if (rsp.IsSuccess)
                {
                    var result = rsp.Result;

                    if (result != null)
                    {
                        setListOtrosRubros(result.EstadoContable.OtrosRubros);
                        rsp.Message = viewModel.Message;
                    }
                }
                else
                {
                    rsp.Message = viewModel.Message;

                }
            }

        }
        catch (Exception ex)
        {
            rsp.Message = ex.Message;

        }
        return rsp;
    }

    private async Task<ResponseDTO<BalanceDto>> deleteRubro()
    {

        var respuesta = new ResponseDTO<BalanceDto>();


        try
        {

            respuesta = await viewModel.DeleteRubro();

            if (respuesta.IsSuccess)
            {
                viewModel.ToRegistry.otrosRubros.Remove(viewModel.OtherRegistry);
                respuesta.Message = viewModel.Message;

                StateHasChanged();
            }

            else
            {
                respuesta.Message = viewModel.Message;

            }


        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
        return respuesta;
    }


    private void sumatoriaTotalActivoCorriente()
    {
        var sumatoriaTotalActivoCorriente = Convert.ToDecimal(viewModel.ToRegistry.cajaYBancos) + viewModel.ToRegistry.inversionesActivoCorriente + viewModel.ToRegistry.bienesDeCambio + viewModel.ToRegistry.activoCorrienteRestante;
        viewModel.ToRegistry.activoCorriente = sumatoriaTotalActivoCorriente;


    }

    private void sumatoriaTotalActivoNoCorriente()
    {
        var sumatoriaTotalActivoNoCorriente = viewModel.ToRegistry.bienesDeCambio + viewModel.ToRegistry.propiedadesDeInversion + viewModel.ToRegistry.inversionesActivoNoCorriente + viewModel.ToRegistry.activoNoCorrienteRestante;
        viewModel.ToRegistry.activoNoCorriente = sumatoriaTotalActivoNoCorriente;
    }

    private void sumatorialTotalActivo()
    {
        var sumatorialTotalActivo = viewModel.ToRegistry.activoCorriente + viewModel.ToRegistry.activoNoCorriente;
        viewModel.ToRegistry.totalActivo = sumatorialTotalActivo;
    }

    private void sumatoriaTotalPasivo()
    {
        var sumatoriaTotalPasivo = viewModel.ToRegistry.deudorPasivoCorriente + viewModel.ToRegistry.deudorPasivoNoCorriente;
        viewModel.ToRegistry.totalPasivo = sumatoriaTotalPasivo;
    }

    private decimal resultadoPatrimonioNeto()
    {
        if (viewModel.ToRegistry.totalActivo != 0 && viewModel.ToRegistry.totalPasivo != 0)
        {
            return viewModel.ToRegistry.patrimonioNeto = viewModel.ToRegistry.totalActivo - viewModel.ToRegistry.totalPasivo;
        }
        else
        {
            return 0;
        }
    }

    private bool resultadoPatNetDetailPatNeto()
    {
        if (viewModel.ToRegistry.otrosRubros.Count > 0)
        {
            decimal sumatoriaImporte = 0;

            foreach (var rubros in viewModel.ToRegistry.otrosRubros)
            {
                sumatoriaImporte = sumatoriaImporte + rubros.importe;
            }


            var sumatoriaDetallePatNeto = viewModel.ToRegistry.capitalSuscripto + viewModel.ToRegistry.ajusteCapital + viewModel.ToRegistry.aportesIrrevocables + viewModel.ToRegistry.primaEmision + viewModel.ToRegistry.gananciasReservadas + viewModel.ToRegistry.perdidasAcumuladas + viewModel.ToRegistry.gananciasPerdidasEjercicio + viewModel.ToRegistry.reservaLegal + sumatoriaImporte;

            if (resultadoPatrimonioNeto().Equals(sumatoriaDetallePatNeto))
            {
                return statusPatrimonioNeto = false;

            }
            else
            {
                return statusPatrimonioNeto = true;

            }
        }
        else
        {
            var sumatoriaDetallePatNeto = viewModel.ToRegistry.capitalSuscripto + viewModel.ToRegistry.ajusteCapital + viewModel.ToRegistry.aportesIrrevocables + viewModel.ToRegistry.primaEmision + viewModel.ToRegistry.gananciasReservadas + viewModel.ToRegistry.perdidasAcumuladas + viewModel.ToRegistry.gananciasPerdidasEjercicio + viewModel.ToRegistry.reservaLegal;

            if (resultadoPatrimonioNeto().Equals(sumatoriaDetallePatNeto))
            {
                return statusPatrimonioNeto = false;

            }
            else
            {
                return statusPatrimonioNeto = true;

            }
        }



        return statusPatrimonioNeto;

    }



    private void setFormatMiles()
    {
        try
        {
            // Obtener todas las propiedades públicas de EstadoContableDto
            PropertyInfo[] propiedades = viewModel.ToRegistry.GetType().GetProperties();

            foreach (PropertyInfo propiedad in propiedades)
            {
                switch (propiedad.PropertyType.Name)
                {

                    case "Decimal":
                        object valorOriginal = propiedad.GetValue(viewModel.ToRegistry);

                        // Verificar si el valor es un decimal
                        if (valorOriginal != null && valorOriginal is decimal)
                        {
                            decimal valorDecimal = (decimal)valorOriginal;

                            // Crear una nueva cultura con la configuración específica
                            CultureInfo culturaAR = new CultureInfo("es-AR");
                            culturaAR.NumberFormat.CurrencyDecimalSeparator = ",";
                            culturaAR.NumberFormat.CurrencyGroupSeparator = ".";

                            // Formatear el valor como cadena en la cultura modificada
                            //string valorFormateado = valorDecimal.ToString("#,##0.00", culturaAR);

                            string valorFormateado = valorDecimal.ToString("N2");

                            //Intentar convertir la cadena formateada a decimal
                            if (decimal.TryParse(valorFormateado, NumberStyles.Currency, culturaAR, out decimal valorDecimalNuevo))
                            {
                                // Asignar el nuevo valor decimal a la propiedad
                                propiedad.SetValue(viewModel.ToRegistry, valorDecimalNuevo);
                            }
                            else
                            {
                                Console.WriteLine($"No se pudo convertir la cadena a un valor decimal para {propiedad.Name}.");
                            }
                        }
                        break;

                    case "DateTime":
                        object valorOriginalDate = propiedad.GetValue(viewModel.ToRegistry);
                        // Verificar si el valor es una cadena
                        if (valorOriginalDate != null && valorOriginalDate is string)
                        {
                            string valorCadena = (string)valorOriginalDate;

                            // Intentar convertir la cadena a DateTime
                            if (DateTime.TryParse(valorCadena, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime valorFecha))
                            {
                                // Formatear la fecha como cadena
                                string fechaFormateada = valorFecha.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                                // Asignar el valor formateado a la propiedad
                                propiedad.SetValue(viewModel.ToRegistry, fechaFormateada);
                            }
                            else
                            {
                                Console.WriteLine($"No se pudo convertir la cadena a DateTime para {propiedad.Name}.");
                            }
                        }
                        break;



                    // Agregar más casos según sea necesario para otros tipos

                    default:
                        // Lógica para otros tipos de propiedades si es necesario
                        break;
                }

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Excepción en setFormatMiles: {ex.ToString()}");
            throw;  // Lanza la excepción original para que puedas ver el mensaje completo y la pila de llamadas.
        }
    }





    private bool checkDataOtrosRubros()
    {

        // Denominacion
        if (!string.IsNullOrEmpty(denominacionDto))
        {
            if (Validator.IsNumeric(denominacionDto))
            {
                denominacionError = "No puedes ingresar un valor numérico";
                return false;
            }
            else
            {
                denominacionError = "";

            }
        }
        else
        {
            denominacionError = "El campo no puede estar vacio";
            return false;
        }

        if (importeDto > 0)
        {
            if (!Validator.IsNumeric(importeDto.ToString()))
            {
                pasivoNoCorrienteError = "No puedes ingresar con caracteres";
                return false;
            }
            else
            {
                pasivoNoCorrienteError = "";

            }
        }
        else
        {
            pasivoNoCorrienteError = "El campo no puede estar vacio";
            return false;
        }


        //OtrosRubros
        denominacionError = "";
        pasivoNoCorrienteError = "";



        return true;
    }






    public void setListOtrosRubros(List<RubroPatrimonioNeto> rubros)
    {
        if (rubros != null)
        {
            viewModel.ToRegistry.otrosRubros.Clear();

            foreach (var rubro in rubros)
            {

                viewModel.ToRegistry.otrosRubros.Add(new RubroPatrimonioNetoDto
                {

                    codigo = rubro.Codigo,
                    denominacion = rubro.Denominacion,
                    importe = rubro.Importe,
                });
            }
        }
    }

    private string FormatWithThousandSeparators(decimal value)
    {
        return string.Format("{0:N}", value);
    }

    private bool checkData()
    {

        // Tipo Balance
        if (!string.IsNullOrEmpty(viewModel.ToRegistry.tipoBalance))
        {
            if (Validator.IsNumeric(viewModel.ToRegistry.tipoBalance))
            {
                tipoBalanceError = "No puedes ingresar un valor numérico";
                return false;
            }
            else
            {
                tipoBalanceError = "";

            }
        }
        else
        {
            tipoBalanceError = "El campo no puede estar vacio";
            return false;
        }



        // Fecha Inicio
        if (viewModel.ToRegistry.fechaInicio == null)
        {
            fechaInicioError = "Seleccioná la fecha correspondiente";
            return false;
        }
        else
        {
            fechaInicioError = "";
        }

        //Fecha Estado
        if (viewModel.ToRegistry.fechaEstado == null)
        {
            fechaEstadoError = "Seleccioná la fecha correspondiente";
            return false;
        }
        else
        {
            fechaEstadoError = "";
        }


        //Fecha Reunion Directorio
        if (viewModel.ToRegistry.fechaReunionDirectorio == null)
        {
            fechaReunionDirectorioError = "Seleccioná la fecha correspondiente";
            return false;
        }
        else
        {
            fechaReunionDirectorioError = "";
        }





        //Fecha Asamblea
        if (viewModel.ToRegistry.fechaAsamblea == null)
        {
            fechaAsambleaError = "Seleccioná la fecha correspondiente";
            return false;
        }
        else
        {
            fechaAsambleaError = "";
        }




        //Caja y Bancos

        if (!string.IsNullOrEmpty(viewModel.ToRegistry.cajaYBancos.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.cajaYBancos.ToString()))
            {
                cajaYBancosError = "No puedes ingresar caracteres en el campo ";
                return false;
            }
            else
            {
                cajaYBancosError = "";
            }
        }
        else
        {
            cajaYBancosError = "El campo no puede estar vacio";
            return false;
        }



        //Inversiones
        if (!string.IsNullOrEmpty(viewModel.ToRegistry.inversionesActivoCorriente.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.inversionesActivoCorriente.ToString()))
            {
                inversionesError = "No puedes ingresar caracteres en el campo ";
                return false;
            }
            else
            {
                inversionesError = "";
            }
        }
        else
        {
            inversionesError = "El campo no puede estar vacio";
            return false;
        }

        //Bienes de Cambio
        if (!string.IsNullOrEmpty(viewModel.ToRegistry.bienesDeCambio.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.bienesDeCambio.ToString()))
            {
                bienesDeCambioError = "No puedes ingresar caracteres en el campo ";
                return false;
            }
            else
            {
                bienesDeCambioError = "";
            }
        }
        else
        {
            bienesDeCambioError = "El campo no puede estar vacio";
            return false;
        }


        //Activo  Corriente Restante

        if (!string.IsNullOrEmpty(viewModel.ToRegistry.activoCorrienteRestante.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.activoCorrienteRestante.ToString()))
            {
                activoCorrienteRestanteError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                activoCorrienteRestanteError = "";
            }
        }
        else
        {
            activoCorrienteRestanteError = "El campo no puede estar vacio";
            return false;
        }


        //Bienes de Uso
        if (!string.IsNullOrEmpty(viewModel.ToRegistry.bienesDeUso.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.bienesDeUso.ToString()))
            {
                bienesDeUsoError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                bienesDeUsoError = "";
            }
        }
        else
        {
            bienesDeUsoError = "El campo no puede estar vacio";
            return false;
        }

        //Propiedades de Inversion

        if (!string.IsNullOrEmpty(viewModel.ToRegistry.propiedadesDeInversion.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.propiedadesDeInversion.ToString()))
            {
                propiedadesDeInversionError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                propiedadesDeInversionError = "";
            }
        }
        else
        {
            propiedadesDeInversionError = "El campo no puede estar vacio";
            return false;
        }

        //Activo No Corriente Restante

        if (!string.IsNullOrEmpty(viewModel.ToRegistry.activoNoCorrienteRestante.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.activoNoCorrienteRestante.ToString()))
            {
                activoNoCorrienteRestanteError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                activoNoCorrienteRestanteError = "";
            }
        }
        else
        {
            activoNoCorrienteRestanteError = "El campo no puede estar vacio";
            return false;
        }



        //Deudas del Pasivo Corriente

        if (!string.IsNullOrEmpty(viewModel.ToRegistry.deudorPasivoCorriente.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.capitalSuscripto.ToString()))
            {
                deudasPasivoCorrienteError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                deudasPasivoCorrienteError = "";
            }
        }
        else
        {
            deudasPasivoCorrienteError = "El campo no puede estar vacio";
            return false;
        }

        //Deudas del Pasivo No Corriente

        if (!string.IsNullOrEmpty(viewModel.ToRegistry.deudorPasivoNoCorriente.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.deudorPasivoNoCorriente.ToString()))
            {
                deudasPasivoNoCorrienteError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                deudasPasivoNoCorrienteError = "";
            }
        }
        else
        {
            deudasPasivoNoCorrienteError = "El campo no puede estar vacio";
            return false;
        }


        //Capital Sucripto

        if (!string.IsNullOrEmpty(viewModel.ToRegistry.capitalSuscripto.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.capitalSuscripto.ToString()))
            {
                capitalSuscriptoError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                capitalSuscriptoError = "";
            }
        }
        else
        {
            capitalSuscriptoError = "El campo no puede estar vacio";
            return false;
        }

        //Ajuste al capital
        if (!string.IsNullOrEmpty(viewModel.ToRegistry.ajusteCapital.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.ajusteCapital.ToString()))
            {
                ajusteCapitalError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                ajusteCapitalError = "";
            }
        }
        else
        {
            ajusteCapitalError = "El campo no puede estar vacio";
            return false;
        }

        //Aporte Irrevocables
        if (!string.IsNullOrEmpty(viewModel.ToRegistry.aportesIrrevocables.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.aportesIrrevocables.ToString()))
            {
                aportesIrrevocablesError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                aportesIrrevocablesError = "";
            }
        }
        else
        {
            aportesIrrevocablesError = "El campo no puede estar vacio";
            return false;
        }


        //Prima Emision

        if (!string.IsNullOrEmpty(viewModel.ToRegistry.primaEmision.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.primaEmision.ToString()))
            {
                primaEmisionError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                primaEmisionError = "";
            }
        }
        else
        {
            primaEmisionError = "El campo no puede estar vacio";
            return false;
        }

        //Ganancias Reservadas

        if (!string.IsNullOrEmpty(viewModel.ToRegistry.gananciasReservadas.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.gananciasReservadas.ToString()))
            {
                gananciasReservadasError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                gananciasReservadasError = "";
            }
        }
        else
        {
            gananciasReservadasError = "El campo no puede estar vacio";
            return false;
        }

        //Perdidas Acumuladas
        if (!string.IsNullOrEmpty(viewModel.ToRegistry.perdidasAcumuladas.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.perdidasAcumuladas.ToString()))
            {
                perdidasAcumuladasError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                perdidasAcumuladasError = "";
            }
        }
        else
        {
            perdidasAcumuladasError = "El campo no puede estar vacio";
            return false;
        }


        //Ganancias  Perdidas del Ejercicio
        if (!string.IsNullOrEmpty(viewModel.ToRegistry.gananciasPerdidasEjercicio.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.gananciasPerdidasEjercicio.ToString()))
            {
                gananciasPerdidasEjercicioError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                gananciasPerdidasEjercicioError = "";
            }
        }
        else
        {
            gananciasPerdidasEjercicioError = "El campo no puede estar vacio";
            return false;
        }


        //Reserva Legal

        if (!string.IsNullOrEmpty(viewModel.ToRegistry.reservaLegal.ToString()))
        {
            if (!Validator.IsNumeric(viewModel.ToRegistry.reservaLegal.ToString()))
            {
                reservaLegalError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                reservaLegalError = "";
            }
        }
        else
        {
            reservaLegalError = "El campo no puede estar vacio";
            return false;
        }


        tipoBalanceError = "";
        fechaInicioError = "";
        fechaAsambleaError = "";
        fechaEstadoError = "";
        fechaReunionDirectorioError = "";


        cajaYBancosError = "";
        inversionesError = "";
        bienesDeCambioError = "";
        activoCorrienteRestanteError = "";
        activoNoCorrienteRestanteError = "";
        ajusteCapitalError = "";
        aportesIrrevocablesError = "";
        bienesDeUsoError = "";
        capitalSuscriptoError = "";
        deudasPasivoCorrienteError = "";
        deudasPasivoNoCorrienteError = "";

        gananciasPerdidasEjercicioError = "";
        gananciasReservadasError = "";


        primaEmisionError = "";
        perdidasAcumuladasError = "";
        propiedadesDeInversionError = "";
        reservaLegalError = "";



        return true;
    }


}
