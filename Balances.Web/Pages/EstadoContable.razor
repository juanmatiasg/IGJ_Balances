@page "/EstadoContable"
@using Balances.DTO;
@using Balances.Model;
@using Balances.Utilities;
@using Balances.Web.Services.Implementation;
@using System.Globalization;
@using System.Text.RegularExpressions;
@using System.Reflection;
@using Blazorise.Extensions;
@inject IEstadoContableService estadoContableService;
@inject NavigationManager NavigationManager
@{
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Estado Contable</title>
    <!-- Agrega los enlaces a los estilos de Bootstrap y otros recursos aquí -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

 
</head>
<body>

    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="EstadoContable" TramiteIniciado = "true" ></Navegacion>

    <!---------------------------------------------------------------->
    <div class="container mt-4">
        <h2 class="text-center">Estado Contable</h2>
         <div class="row">
            <div class="col">
           
                    <!-- Período -->
                    <div class="card mb-4">
                        <div class="card-body">
                            <h5 class="card-title d-flex justify-content-center">Período</h5>
                            <div class="form-group">

                                <input type="text" class="form-control" id="fechaInicio" placeholder="Tipo de balance" @bind=estadoContableDto.tipoBalance @onblur="insertEECC">
                                <small id="tipoBalanceError" class="text-danger">@tipoBalanceError</small>

                            </div>
                            <div class="form-group">
                                <label for="fechaInicio">Fecha de Inicio</label>
                                <input type="date" class="form-control" id="fechaInicio" placeholder="Fecha de Inicio" @bind=estadoContableDto.fechaInicio @onblur="insertEECC">
                                <small id="tipoBalanceError" class="text-danger">@fechaInicioError</small>

                            </div>
                   
                            <div class="form-group">
                                <label for="fechaEstado">Fecha de Cierre</label>
                            <input type="date" class="form-control" id="fechaEstado" placeholder="Fecha de Cierre" @bind=estadoContableDto.fechaEstado @onblur="insertEECC">
                            <small id="tipoBalanceError" class="text-danger">@fechaEstadoError</small>

                        </div>
                        </div>
                    </div>

                    <!-- Aprobado por -->
                    <div class="card mb-4">
                        <div class="card-body">
                        <h5 class="card-title d-flex justify-content-center">Aprobado por</h5>
                            <div class="form-group">
                                <label for="fechaReunionDirectorio">Fecha de Acta de Reunión de Autoridades</label>
                            <input type="date" class="form-control" id="fechaReunionDirectorio" placeholder="Fecha de Acta de Renión de Autoridades" @bind=estadoContableDto.fechaReunionDirectorio @onblur="insertEECC">
                            <small id="tipoBalanceError" class="text-danger">@fechaReunionDirectorioError</small>

                        </div>
                            <div class="form-group">
                                <label for="fechaAsamblea">Fecha de Acta de Reunión de Socios</label>
                                <input type="date" class="form-control" id="fechaAsamblea" placeholder="Fecha de Acta de Reunión de Socios" @bind=estadoContableDto.fechaAsamblea @onblur="insertEECC">
                                <small id="tipoBalanceError" class="text-danger">@fechaAsambleaError</small>
                            </div>
                        </div>
                    </div>

                    <!-- Rubros del Balance -->
                    <div class="card mb-4">
                        <div class="card-body">
                        <h5 class="card-title d-flex justify-content-center">Rubros del Balance</h5>

                            <div class="row">
                            <!--Columna 1-->
                                <div class="col">
                                    <div class="form-group">
                                        <label for="activoCorriente">Caja Y Bancos</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                        <input type="text" class="form-control" id="numero" @bind-value=estadoContableDto.cajaYBancos @onblur="insertEECC" />
                                        
                                    </div>
                                    <small id="tipoBalanceError" class="text-danger">@cajaYBancosError</small>

                                    </div>

                                    <div class="form-group">
                                        <label for="activoCorriente">Inversiones</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                            <input type="text" class="form-control" @bind="estadoContableDto.inversionesActivoCorriente" placeholder="$00.000" @onblur="insertEECC" />
                                        </div>
                                        <small id="tipoBalanceError" class="text-danger">@inversionesError</small>
                                    </div>

                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Bienes de Cambios</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                        <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.bienesDeCambio"  placeholder="0.000,00" @onblur="insertEECC" />
                                        </div>
                                    <small id="tipoBalanceError" class="text-danger">@bienesDeCambioError</small>

                                    </div>
                                    
                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Activo Corriente Restante</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
    
                                            <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.activoCorrienteRestante"  placeholder="0.000,00" @onblur="insertEECC" />
                                        </div>
                                        <small id="tipoBalanceError" class="text-danger">@activoCorrienteRestanteError</small>

                                    </div>

                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Total Activo Corriente</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                            <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.activoCorriente"  placeholder="0.000,00" @onblur="insertEECC" disabled/>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Bienes de Uso</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                            <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.bienesDeUso"  placeholder="0.000,00" @onblur="insertEECC"  />
                                        </div>
                                    <small id="tipoBalanceError" class="text-danger">@bienesDeUsoError</small>

                                    </div>

                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Propiedades de Inversión</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                            <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.propiedadesDeInversion"  placeholder="0.000,00" @onblur="insertEECC"  />
                                        </div>
                                        <small id="tipoBalanceError" class="text-danger">@propiedadesDeInversionError</small>

                                    </div>

                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Activo No Corriente Restante</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                            <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.activoNoCorrienteRestante" placeholder="0.000,00" @onblur="insertEECC" />
                                        </div>
                                        <small id="tipoBalanceError" class="text-danger">@activoNoCorrienteRestanteError</small>
                                    </div>

                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Total Activo No Corriente</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                            <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.activoNoCorriente" placeholder="0.000,00" @onblur="insertEECC" disabled />
                                        </div>
                                    </div>



                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Total Activo</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                            <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.totalActivo"  placeholder="0.000,00" @onblur="insertEECC" disabled />
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Deudas del Pasivo Corriente</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                            <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.deudorPasivoCorriente"  placeholder="0.000,00" @onblur="insertEECC" />
                                        </div>
                                        <small id="tipoBalanceError" class="text-danger">@deudasPasivoCorrienteError</small>

                                    </div>


                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Deudas del Pasivo No Corriente</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                            <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.deudorPasivoNoCorriente"  placeholder="0.000,00" @onblur="insertEECC" />
                                        </div>
                                        <small id="tipoBalanceError" class="text-danger">@deudasPasivoNoCorrienteError</small>
                                    </div>



                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Total Pasivo</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                            <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.totalPasivo"placeholder="0.000,00" @onblur="insertEECC" disabled />
                                        </div>
                                    </div>


                                    <div class="form-group">
                                        <label for="inversionesActivoCorriente">Patrimonio Neto</label>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">ARS $</span>
                                            </div>
                                            <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.patrimonioNeto"  placeholder="0.000,00" @onblur="insertEECC" disabled />
                                        </div>

                                    </div>

                                    @if (statusPatrimonioNeto)
                                    {
                                        <div class="alert alert-danger" role="alert">
                                            No coinciden el Patrimonio Neto de Activo y Pasivo con 
                                            el Detalle del Patrimonio Neto
                                        </div>
                                    }
                                </div>

                        </div>
                    </div>
                </div>
            </div>
            <!-- Rubros del Patrimonio Neto -->
            <div class="col">
                <div class="card mb-4">
                    <div class="card-body">

                        <h5 class="card-title d-flex justify-content-center">Rubros del Patrimonio Neto</h5>
                        <!-- Repite esta estructura para otros campos -->


                        <div class="form-group">
                            <label for="inversionesActivoCorriente">Capital Suscripto</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">ARS $</span>
                                </div>
                                <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.capitalSuscripto"  placeholder="0.000,00" @onblur="insertEECC" />
                            </div>
                            <small id="tipoBalanceError" class="text-danger">@capitalSuscriptoError</small>


                            <div class="form-group">
                                <label for="inversionesActivoCorriente">Ajuste de Capital</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">ARS $</span>
                                    </div>
                                    <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.ajusteCapital"  placeholder="0.000,00" @onblur="insertEECC" />
                                </div>
                                <small id="tipoBalanceError" class="text-danger">@ajusteCapitalError</small>
                            </div>


                            <div class="form-group">
                                <label for="inversionesActivoCorriente">Aportes Irrevocables</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">ARS $</span>
                                    </div>
                                    <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.aportesIrrevocables"  placeholder="0.000,00" @onblur="insertEECC" />

                                </div>
                                <small id="tipoBalanceError" class="text-danger">@aportesIrrevocablesError</small>

                            </div>


                            <div class="form-group">
                                <label for="inversionesActivoCorriente">Prima Emisión</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">ARS $</span>
                                    </div>
                                    <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.primaEmision" placeholder="0.000,00" @onblur="insertEECC" />
                                </div>
                                <small id="tipoBalanceError" class="text-danger">@primaEmisionError</small>

                            </div>



                            <div class="form-group">
                                <label for="inversionesActivoCorriente">Ganancias Reservadas</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">ARS $</span>
                                    </div>
                                    <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.gananciasReservadas" placeholder="0.000,00" @onblur="insertEECC" />
                                </div>
                                <small id="tipoBalanceError" class="text-danger">@gananciasReservadasError</small>

                            </div>


                            <div class="form-group">
                                <label for="inversionesActivoCorriente">Pérdidas Acumuladas</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">ARS $</span>
                                    </div>
                                    <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.perdidasAcumuladas"  placeholder="0.000,00" @onblur="insertEECC" />
                                </div>
                                <small id="tipoBalanceError" class="text-danger">@perdidasAcumuladasError</small>

                            </div>



                            <div class="form-group">
                                <label for="inversionesActivoCorriente">Ganancias / Pérdidas del Ejercicio</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">ARS $</span>
                                    </div>
                                    <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.gananciasPerdidasEjercicio" placeholder="0.000,00" @onblur="insertEECC" />
                                </div>
                                <small id="tipoBalanceError" class="text-danger">@gananciasPerdidasEjercicioError</small>

                            </div>


                            <div class="form-group">
                                <label for="inversionesActivoCorriente">Reserva Legal</label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text">ARS $</span>
                                    </div>
                                    <input type="text" class="form-control" id="activoCorriente" @bind="estadoContableDto.reservaLegal" placeholder="0.000,00" @onblur="insertEECC"  />
                                </div>
                                <small id="tipoBalanceError" class="text-danger">@reservaLegalError</small>

                            </div>     
                        </div>
                    </div>

                </div>
                <!--Otros Rubros PN -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="form-group">
                            <h5 class="card-title d-flex justify-content-center">
                                Otros Rubros del Patrimonio Neto
                            </h5>

                            <label for="capitalSuscripto">Denominación</label>
                            <input type="text" class="form-control" id="capitalSuscripto"  @bind ="rubroDto.denominacion">
                            <small id="tipoBalanceError" class="text-danger">@denominacionError</small>

                        </div>
                        <div class="form-group">
                            <label for="inversionesActivoCorriente">Pasivo No Corriente</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">ARS $</span>
                                </div>
                                <input type="text" class="form-control" id="activoCorriente" @bind="rubroDto.importe"  placeholder="$00.000" />
                                <small id="tipoBalanceError" class="text-danger">@pasivoNoCorrienteError</small>

                            </div>
                        </div>


                        <button type="button" class="btn btn-primary w-100" @onclick ="insertRubro">Agregar</button>
                    </div>
                </div>

                <div class="card-body">
                    @if (lista.Count > 0)
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th scope="col"></th>
                                    <th scope="col">Denominación</th>
                                    <th scope="col">Importe</th>
                                    <th scope="col">Acción</th>

                                </tr>
                            </thead>
                            @foreach (var rubro in lista)
                            {
                                <tbody>
                                    <tr>
                                        <th scope="row"></th>
                                        <td>@rubro.Denominacion</td>
                                        <td>$@rubro.Importe</td>

                                        <td>
                                            <button type="button" class="btn btn-danger" @onclick="() => deleteRubro(rubro)">Eliminar</button>
                                        </td>
                                    </tr>
                                </tbody>
                            }
                        </table>
                    }
                </div>
            </div>

        </div>
    </div>
   



</body>
</html>



@code {
    [Parameter] public string? TipoEntidad { get; set; }

    private string tipoBalanceError = "";

    private string fechaInicioError = "";
    private string fechaAsambleaError = "";
    private string fechaEstadoError = "";
    private string fechaReunionDirectorioError ="";

    private string cajaYBancosError = "";
    private string inversionesError = "";
    private string bienesDeCambioError = "";
    private string activoCorrienteRestanteError = "";
    private string activoNoCorrienteRestanteError = "";
    private string ajusteCapitalError = "";
    private string aportesIrrevocablesError = "";
    private string bienesDeUsoError="";
    private string capitalSuscriptoError="";
    private string deudasPasivoCorrienteError="";
    private string deudasPasivoNoCorrienteError="";

    private string gananciasPerdidasEjercicioError = "";
    private string gananciasReservadasError = "";

    private string perdidasAcumuladasError = "";

    private string primaEmisionError="";

    private string propiedadesDeInversionError = "";
    private string reservaLegalError = "";

    //OtrosRubros
    private string denominacionError = "";
    private string pasivoNoCorrienteError="";




    private EstadoContableDto estadoContableDto = new EstadoContableDto();
    private RubroPatrimonioNetoDto rubroDto = new RubroPatrimonioNetoDto();
    private List<RubroPatrimonioNeto> lista = new List<RubroPatrimonioNeto>();
    private Boolean statusPatrimonioNeto = false;

    private string otraCosa = "";


    decimal cantidad;
    string cantidadStr;
    private bool firstTimeInput = true;


    protected override async Task OnInitializedAsync()
    {

        setDate();

        await Load();

        await base.OnInitializedAsync();
    }





    private void setDate()
    {
        estadoContableDto.fechaInicio = DateTime.UtcNow;
        estadoContableDto.fechaAsamblea = DateTime.UtcNow;
        estadoContableDto.fechaEstado = DateTime.UtcNow;
        estadoContableDto.fechaReunionDirectorio = DateTime.UtcNow;


    }


    private async Task Load()
    {
        try
        {
            var idSession = await estadoContableService.getSession();

            if (idSession.IsSuccess)
            {
                var response = await estadoContableService.getBalance(idSession.Result);

                if (idSession.IsSuccess == true)
                {

                    try
                    {
                        var rsp = response.Result.EstadoContable;
                        TipoEntidad = response.Result.Caratula.Entidad.TipoEntidad;

                        estadoContableDto = new EstadoContableDto(rsp);

                        setListOtrosRubros(rsp.otrosRubros);

                        StateHasChanged();

                    }
                    catch (Exception ex)
                    {

                        Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
                    }
                }
            }
            else
            {
                Console.WriteLine($"No se ha encontrado el idSession");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }

    private EstadoContableDto convertToEstadoContableDTO(Model.EstadoContable estadoContable) => new EstadoContableDto(estadoContable);



    private async Task<ResponseDTO<BalanceDto>> insertEECC()
    {
        setFormatMiles();
        sumatoriaTotalActivoCorriente();
        sumatoriaTotalActivoNoCorriente();
        sumatorialTotalActivo();
        sumatoriaTotalPasivo();
        resultadoPatrimonioNeto();
        resultadoPatNetDetailPatNeto();

        ResponseDTO<BalanceDto> respuesta = new();

        try
        {
            if (checkData())
            {
                
                respuesta = await estadoContableService.insertEEC(estadoContableDto);

                if (respuesta.IsSuccess)
                {
                    respuesta.Message = "Se inserto el Estado Contable sastifactoriamente";
                }
                else
                {
                    respuesta.Message = "No se inserto el Estado Contable";

                }
                
            }

        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }

        return respuesta;
    }


    private void sumatoriaTotalActivoCorriente()
    {
        var sumatoriaTotalActivoCorriente = Convert.ToDecimal(estadoContableDto.cajaYBancos) + estadoContableDto.inversionesActivoCorriente + estadoContableDto.bienesDeCambio + estadoContableDto.activoCorrienteRestante;
        estadoContableDto.activoCorriente = sumatoriaTotalActivoCorriente;


    }

    private void sumatoriaTotalActivoNoCorriente()
    {
        var sumatoriaTotalActivoNoCorriente = estadoContableDto.bienesDeCambio + estadoContableDto.propiedadesDeInversion + estadoContableDto.inversionesActivoNoCorriente + estadoContableDto.activoNoCorrienteRestante;
        estadoContableDto.activoNoCorriente = sumatoriaTotalActivoNoCorriente;
    }

    private void sumatorialTotalActivo()
    {
        var sumatorialTotalActivo = estadoContableDto.activoCorriente + estadoContableDto.activoNoCorriente;
        estadoContableDto.totalActivo = sumatorialTotalActivo;
    }

    private void sumatoriaTotalPasivo()
    {
        var sumatoriaTotalPasivo = estadoContableDto.deudorPasivoCorriente + estadoContableDto.deudorPasivoNoCorriente;
        estadoContableDto.totalPasivo = sumatoriaTotalPasivo;
    }

    private decimal resultadoPatrimonioNeto()
    {
        if (estadoContableDto.totalActivo != 0 && estadoContableDto.totalPasivo != 0)
        {
            return estadoContableDto.patrimonioNeto = estadoContableDto.totalActivo - estadoContableDto.totalPasivo;
        }
        else
        {
            return 0;
        }
    }

    private  void resultadoPatNetDetailPatNeto()
    {
        
        
        if (resultadoPatrimonioNeto() > 0)
        {
            if (!(lista.Count > 0))
            {
                if (estadoContableDto.reservaLegal > 0)
                {
                    var sumatoriaDetallePatNeto = estadoContableDto.capitalSuscripto + estadoContableDto.ajusteCapital + estadoContableDto.aportesIrrevocables + estadoContableDto.reservaLegal + estadoContableDto.primaEmision + estadoContableDto.perdidasAcumuladas + estadoContableDto.gananciasPerdidasEjercicio;


                    if (resultadoPatrimonioNeto().Equals(sumatoriaDetallePatNeto))
                    {
                        statusPatrimonioNeto = false;
                       
                    }
                    else
                    {
                        statusPatrimonioNeto = true;
                      
                    }
                }
            }
            else
            {
                foreach (var rubro in lista)
                {
                    var sumatoriaDetallePatNeto = estadoContableDto.capitalSuscripto + estadoContableDto.ajusteCapital + estadoContableDto.aportesIrrevocables + estadoContableDto.reservaLegal + estadoContableDto.primaEmision + estadoContableDto.perdidasAcumuladas + estadoContableDto.gananciasPerdidasEjercicio + rubro.Importe;
                    if (estadoContableDto.reservaLegal > 0)
                    {
                        if (resultadoPatrimonioNeto() == sumatoriaDetallePatNeto)
                        {
                            statusPatrimonioNeto = false;
                            
                        }
                        else
                        {
                            statusPatrimonioNeto = true;
                           
                        }
                    }
                }
            }
        }

    }

    private void setFormatMiles()
    {
        try
        {
            // Obtener todas las propiedades públicas de EstadoContableDto
            PropertyInfo[] propiedades = estadoContableDto.GetType().GetProperties();

            foreach (PropertyInfo propiedad in propiedades)
            {
                switch (propiedad.PropertyType.Name)
                {

                    case "Decimal":
                        object valorOriginal = propiedad.GetValue(estadoContableDto);

                        // Verificar si el valor es un decimal
                        if (valorOriginal != null && valorOriginal is decimal)
                        {
                            decimal valorDecimal = (decimal)valorOriginal;

                            // Crear una nueva cultura con la configuración específica
                            CultureInfo culturaAR = new CultureInfo("es-AR");
                            culturaAR.NumberFormat.CurrencyDecimalSeparator = ",";
                            culturaAR.NumberFormat.CurrencyGroupSeparator = ".";

                            // Formatear el valor como cadena en la cultura modificada
                            //string valorFormateado = valorDecimal.ToString("#,##0.00", culturaAR);

                            string valorFormateado = valorDecimal.ToString("N2");

                            //Intentar convertir la cadena formateada a decimal
                            if (decimal.TryParse(valorFormateado, NumberStyles.Currency, culturaAR, out decimal valorDecimalNuevo))
                            {
                                // Asignar el nuevo valor decimal a la propiedad
                                propiedad.SetValue(estadoContableDto, valorDecimalNuevo);
                            }
                            else
                            {
                                Console.WriteLine($"No se pudo convertir la cadena a un valor decimal para {propiedad.Name}.");
                            }
                        }
                        break;

                    case "DateTime":
                        object valorOriginalDate = propiedad.GetValue(estadoContableDto);
                        // Verificar si el valor es una cadena
                        if (valorOriginalDate != null && valorOriginalDate is string)
                        {
                            string valorCadena = (string)valorOriginalDate;

                            // Intentar convertir la cadena a DateTime
                            if (DateTime.TryParse(valorCadena, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime valorFecha))
                            {
                                // Formatear la fecha como cadena
                                string fechaFormateada = valorFecha.ToString("dd/MM/yyyy", CultureInfo.InvariantCulture);
                                // Asignar el valor formateado a la propiedad
                                propiedad.SetValue(estadoContableDto, fechaFormateada);
                            }
                            else
                            {
                                Console.WriteLine($"No se pudo convertir la cadena a DateTime para {propiedad.Name}.");
                            }
                        }
                        break;



                    // Agregar más casos según sea necesario para otros tipos

                    default:
                        // Lógica para otros tipos de propiedades si es necesario
                        break;
                }

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Excepción en setFormatMiles: {ex.ToString()}");
            throw;  // Lanza la excepción original para que puedas ver el mensaje completo y la pila de llamadas.
        }
    }



    private async Task<ResponseDTO<BalanceDto>> insertRubro()
    {

        var respuesta = new ResponseDTO<BalanceDto>();
        try
        {

            respuesta = await estadoContableService.insertRubro(rubroDto);

            if (respuesta.IsSuccess)
            {
                var result = respuesta.Result.EstadoContable.otrosRubros;

                setListOtrosRubros(result);

                Console.WriteLine("Se inserto el rubro sastifactoriamente");

            }
            else
            {
                Console.WriteLine("No se inserto el rubro");

            }


        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
        return respuesta;
    }

    public void setListOtrosRubros(List<RubroPatrimonioNeto>list)
    {
        this.lista = list;
    }

    private async Task<ResponseDTO<BalanceDto>> deleteRubro(RubroPatrimonioNeto rubro)
    {

        var respuesta = new ResponseDTO<BalanceDto>();


        try
        {

            var rubroDto = ConvertToPatrimonioNetoDTO(rubro);
            respuesta = await estadoContableService.deleteRubro(rubroDto);

            if (respuesta.IsSuccess)
            {
                respuesta.Message = "Se eliminó el rubro sastifactoriamente";
                this.lista.Remove(rubro);
                StateHasChanged();
            }

            else
            {
                respuesta.Message = "No eliminó el rubro sastifactoriamente";

            }


        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
        return respuesta;
    }


    private RubroPatrimonioNetoDto ConvertToPatrimonioNetoDTO(RubroPatrimonioNeto rubroPatrimonioNeto) => new RubroPatrimonioNetoDto(rubroPatrimonioNeto);

    private string FormatWithThousandSeparators(decimal value)
    {
        return string.Format("{0:N}", value);
    }

    private bool checkData()
    {

        // Tipo Balance
        if (!string.IsNullOrEmpty(estadoContableDto.tipoBalance))
        {
            if (Validator.IsNumeric(estadoContableDto.tipoBalance))
            {
                tipoBalanceError = "No puedes ingresar un valor numérico";
                return false;
            }
            else
            {
                tipoBalanceError = "";

            }
        }
        else
        {
            tipoBalanceError = "El campo no puede estar vacio";
            return false;
        }



        // Fecha Inicio
        if (estadoContableDto.fechaInicio == DateTime.MinValue)

        {
            fechaInicioError = "Seleccioná la fecha correspondiente";
        }

        //Fecha Asamblea
        if (estadoContableDto.fechaAsamblea == DateTime.MinValue)
        {
            fechaAsambleaError = "Seleccioná la fecha correspondiente";
        }

        //Fecha Estado
        if (estadoContableDto.fechaAsamblea == DateTime.MinValue)
        {
            fechaEstadoError = "Seleccioná la fecha correspondiente";
        }

        //Fecha Reunion Directorio
        if (estadoContableDto.fechaReunionDirectorio == DateTime.MinValue)
        {
            fechaReunionDirectorioError = "Seleccioná la fecha correspondiente";
        }

        //Caja y Bancos

        if (!string.IsNullOrEmpty(estadoContableDto.cajaYBancos.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.cajaYBancos.ToString()))
            {
                cajaYBancosError = "No puedes ingresar caracteres en el campo ";
                return false;
            }
            else
            {
                cajaYBancosError = "";
            }
        }
        else
        {
            cajaYBancosError = "El campo no puede estar vacio";
            return false;
        }



        //Inversiones
        if (!string.IsNullOrEmpty(estadoContableDto.inversionesActivoCorriente.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.inversionesActivoCorriente.ToString()))
            {
                inversionesError = "No puedes ingresar caracteres en el campo ";
                return false;
            }
            else
            {
                inversionesError = "";
            }
        }
        else
        {
            inversionesError = "El campo no puede estar vacio";
            return false;
        }

        //Bienes de Cambio
        if (!string.IsNullOrEmpty(estadoContableDto.bienesDeCambio.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.bienesDeCambio.ToString()))
            {
                bienesDeCambioError = "No puedes ingresar caracteres en el campo ";
                return false;
            }
            else
            {
                bienesDeCambioError = "";
            }
        }
        else
        {
            bienesDeCambioError = "El campo no puede estar vacio";
            return false;
        }
    

        //Activo  Corriente Restante

        if (!string.IsNullOrEmpty(estadoContableDto.activoCorrienteRestante.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.activoCorrienteRestante.ToString()))
            {
                activoCorrienteRestanteError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                activoCorrienteRestanteError = "";
            }
        }
        else
        {
            activoCorrienteRestanteError = "El campo no puede estar vacio";
            return false;
        }
  

        //Bienes de Uso
        if (!string.IsNullOrEmpty(estadoContableDto.bienesDeUso.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.bienesDeUso.ToString()))
            {
                bienesDeUsoError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                bienesDeUsoError = "";
            }
        }
        else
        {
            bienesDeUsoError = "El campo no puede estar vacio";
            return false;
        }

        //Propiedades de Inversion

        if (!string.IsNullOrEmpty(estadoContableDto.propiedadesDeInversion.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.propiedadesDeInversion.ToString()))
            {
                propiedadesDeInversionError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                propiedadesDeInversionError = "";
            }
        }
        else
        {
            propiedadesDeInversionError = "El campo no puede estar vacio";
            return false;
        }

        //Activo No Corriente Restante

        if (!string.IsNullOrEmpty(estadoContableDto.activoNoCorrienteRestante.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.activoNoCorrienteRestante.ToString()))
            {
                activoNoCorrienteRestanteError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                activoNoCorrienteRestanteError = "";
            }
        }
        else
        {
            activoNoCorrienteRestanteError = "El campo no puede estar vacio";
            return false;
        }



        //Deudas del Pasivo Corriente

        if (!string.IsNullOrEmpty(estadoContableDto.deudorPasivoCorriente.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.capitalSuscripto.ToString()))
            {
                deudasPasivoCorrienteError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                deudasPasivoCorrienteError = "";
            }
        }
        else
        {
            deudasPasivoCorrienteError = "El campo no puede estar vacio";
            return false;
        }

        //Deudas del Pasivo No Corriente

        if (!string.IsNullOrEmpty(estadoContableDto.deudorPasivoNoCorriente.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.deudorPasivoNoCorriente.ToString()))
            {
                deudasPasivoNoCorrienteError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                deudasPasivoNoCorrienteError = "";
            }
        }
        else
        {
            deudasPasivoNoCorrienteError = "El campo no puede estar vacio";
            return false;
        }


        //Capital Sucripto

        if (!string.IsNullOrEmpty(estadoContableDto.capitalSuscripto.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.capitalSuscripto.ToString()))
            {
                capitalSuscriptoError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                capitalSuscriptoError = "";
            }
        }
        else
        {
            capitalSuscriptoError = "El campo no puede estar vacio";
            return false;
        }

        //Ajuste al capital
        if (!string.IsNullOrEmpty(estadoContableDto.ajusteCapital.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.ajusteCapital.ToString()))
            {
                ajusteCapitalError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                ajusteCapitalError = "";
            }
        }
        else
        {
            ajusteCapitalError = "El campo no puede estar vacio";
            return false;
        }

        //Aporte Irrevocables
        if (!string.IsNullOrEmpty(estadoContableDto.aportesIrrevocables.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.aportesIrrevocables.ToString()) )
            {
                aportesIrrevocablesError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                aportesIrrevocablesError = "";
            }
        }
        else
        {
            aportesIrrevocablesError = "El campo no puede estar vacio";
            return false;
        }

     
        //Prima Emision

        if (!string.IsNullOrEmpty(estadoContableDto.primaEmision.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.primaEmision.ToString()))
            {
                primaEmisionError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                primaEmisionError = "";
            }
        }
        else
        {
            primaEmisionError = "El campo no puede estar vacio";
            return false;
        }

        //Ganancias Reservadas

        if (!string.IsNullOrEmpty(estadoContableDto.gananciasReservadas.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.gananciasReservadas.ToString()))
            {
                gananciasReservadasError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                gananciasReservadasError = "";
            }
        }
        else
        {
            gananciasReservadasError = "El campo no puede estar vacio";
            return false;
        }

        //Perdidas Acumuladas
        if (!string.IsNullOrEmpty(estadoContableDto.perdidasAcumuladas.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.perdidasAcumuladas.ToString()))
            {
                perdidasAcumuladasError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                perdidasAcumuladasError = "";
            }
        }
        else
        {
            perdidasAcumuladasError = "El campo no puede estar vacio";
            return false;
        }


        //Ganancias  Perdidas del Ejercicio
        if (!string.IsNullOrEmpty(estadoContableDto.gananciasPerdidasEjercicio.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.gananciasPerdidasEjercicio.ToString()))
            {
                gananciasPerdidasEjercicioError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                gananciasPerdidasEjercicioError = "";
            }
        }
        else
        {
            gananciasPerdidasEjercicioError = "El campo no puede estar vacio";
            return false;
        }


        //Reserva Legal

        if (!string.IsNullOrEmpty(estadoContableDto.reservaLegal.ToString()))
        {
            if (Validator.IsNumeric(estadoContableDto.reservaLegal.ToString()))
            {
                reservaLegalError = "No puedes ingresar caracteres en el campo";
                return false;
            }
            else
            {
                reservaLegalError = "";
            }
        }
        else
        {
            reservaLegalError = "El campo no puede estar vacio";
            return false;
        }


        tipoBalanceError = "";
        fechaInicioError = "";
        fechaAsambleaError = "";
        fechaEstadoError = "";
        fechaReunionDirectorioError = "";


        cajaYBancosError = "";
        inversionesError = "";
        bienesDeCambioError = "";
        activoCorrienteRestanteError = "";
        activoNoCorrienteRestanteError = "";
        ajusteCapitalError = "";
        aportesIrrevocablesError = "";
        bienesDeUsoError = "";
        capitalSuscriptoError = "";
        deudasPasivoCorrienteError = "";
        deudasPasivoNoCorrienteError = "";
       
        gananciasPerdidasEjercicioError = "";
        gananciasReservadasError = "";
      
        
        primaEmisionError = "";
        perdidasAcumuladasError = "";
        propiedadesDeInversionError = "";
        reservaLegalError = "";

        //OtrosRubros
        denominacionError = "";
        pasivoNoCorrienteError = "";


        return true;
    }
   

}
