@page "/EstadoContable/{balid?}"
@using Balances.DTO;
@using Balances.Model;
@using Balances.Utilities;
@using Balances.Web.Services
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using System.Globalization;
@using System.Text.RegularExpressions;
@using System.Reflection;
@using Blazorise.Extensions;
@using Microsoft.AspNetCore.Http;
@using CurrieTechnologies.Razor.SweetAlert2;

@inject IEstadoContableClientService estadoContableService;
@inject NavigationManager NavigationManager
@inject IBalanceClientService balanceService
@inject ISessionClientService sesionService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject SweetAlertService swal

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Estado Contable</title>
    <!-- Agrega los enlaces a los estilos de Bootstrap y otros recursos aquí -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

 
</head>
<body>
    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="EstadoContable" TramiteIniciado="true" balid="@balid"></Navegacion>

    <!---------------------------------------------------------------->
    <div class="container mt-4">
        <h2 class="text-center">Estado Contable</h2>
        <div class="row">
            <EditForm Model="estadoContableDto">
            <div class="col">
               
                    <FluentValidationValidator />
                <!-- Período -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title d-flex justify-content-center">Período</h5>
                            
                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Tipo de balance" Style="width:100%">
                                <RadzenTextBox @bind-Value="@estadoContableDto.tipoBalance"> </RadzenTextBox>
                            </RadzenFormField>

                                <ValidationMessage For="@(()=> estadoContableDto.tipoBalance)" />
                        </RadzenStack>

                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Fecha de Inicio" Style="width:100%" Component="DatePickerTimeOnlyType">
                                <RadzenDatePicker @bind-Value="@(estadoContableDto.fechaInicio)" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType"  Disabled></RadzenDatePicker>
                            </RadzenFormField>

                                <ValidationMessage For="@(()=> estadoContableDto.fechaInicio)" />
                        </RadzenStack>

                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Fecha de Cierre" Style="width:100%" Component="DatePickerTimeOnlyType">
                                <RadzenDatePicker @bind-Value="@(estadoContableDto.fechaEstado)" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType"   Disabled></RadzenDatePicker>
                            </RadzenFormField>
                                <ValidationMessage For="@(()=> estadoContableDto.fechaEstado)" />
                        </RadzenStack>
                    </div>
                </div>

                <!-- Aprobado por -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title d-flex justify-content-center">Aprobado por</h5>

                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Fecha de Acta de Reunión de Autoridades" Component="DatePickerTimeOnlyType" Style="width:100%">
                                <RadzenDatePicker @bind-Value="@(estadoContableDto.fechaReunionDirectorio)" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Placeholder="dia/mes/año" ></RadzenDatePicker>
                            </RadzenFormField>
                                <ValidationMessage For="@(()=> estadoContableDto.fechaReunionDirectorio)" />
                        </RadzenStack>
                           

                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Fecha de Acta de Reunión de Socios" Component="DatePickerTimeOnlyType" Style="width:100%">
                                    <RadzenDatePicker @bind-Value="@(estadoContableDto.fechaAsamblea)" DateFormat="dd/MM/yyyy" Name="DatePickerTimeOnlyType" Placeholder="dia/mes/año"></RadzenDatePicker>
                            </RadzenFormField>
                                <ValidationMessage For="@(()=> estadoContableDto.fechaAsamblea)" />
                        </RadzenStack>
                          

                    </div>
                </div>

                    <RadzenStack class="mt-2 mb-2">
                        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Click="@insertEECC" ButtonStyle="ButtonStyle.Primary">Guardar</RadzenButton>
                    </RadzenStack>
                  
                

                
                <!-- Rubros del Balance -->
                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title d-flex justify-content-center">Rubros del Balance</h5>

                        <div class="row">
                            <!--Columna 1-->
                            <div class="col">
                                <RadzenStack class="mt-2 mb-2">
                                    <RadzenFormField Text="Caja Y Bancos" Style="width:100%">
                                        <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.cajaYBancos InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(()=> estadoContableDto.cajaYBancos)" />
                                </RadzenStack>

                               

                                <RadzenStack class="mt-2 mb-2">
                                        <RadzenFormField Text="Bienes de Uso" Style="width:100%">
                                            <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.bienesDeUso InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" Style="width:100%" />
                                        </RadzenFormField>
                                        <ValidationMessage For="@(()=> estadoContableDto.bienesDeUso)" />
                                </RadzenStack>

                                <RadzenStack class="mt-2 mb-2">
                                    <RadzenFormField Text="Bienes de Cambios" Style="width:100%">
                                        <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.bienesDeCambio InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(()=> estadoContableDto.bienesDeCambio)" />
                                </RadzenStack>

                                <RadzenStack class="mt-2 mb-2">
                                        <RadzenFormField Text="Propiedades de Inversión" Style="width:100%">
                                            <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.propiedadesDeInversion InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" Change="insertEECC" Style="width:100%" />
                                        </RadzenFormField>
                                        <ValidationMessage For="@(()=> estadoContableDto.propiedadesDeInversion)" />
                                </RadzenStack>

                                <RadzenStack class="mt-2 mb-2">
                                        <RadzenFormField Text="Inversiones" Style="width:100%">
                                            <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.inversionesActivoCorriente InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" Style="width:100%" />
                                        </RadzenFormField>
                                        <ValidationMessage For="@(()=> estadoContableDto.inversionesActivoCorriente)" />
                                </RadzenStack>
                                
                                <RadzenStack class="mt-2 mb-2">
                                    <RadzenFormField Text="Activo Corriente Restante" Style="width:100%">
                                        <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.activoCorrienteRestante InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(()=> estadoContableDto.activoCorrienteRestante)" />
                                </RadzenStack>

                                <RadzenStack class="mt-2 mb-2">
                                    <RadzenFormField Text="Activo No Corriente Restante" Style="width:100%">
                                        <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.activoNoCorrienteRestante InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" />
                                    </RadzenFormField>
                                        <ValidationMessage For="@(()=> estadoContableDto.activoNoCorrienteRestante)" />
                                </RadzenStack>

                                <RadzenStack class="mt-2 mb-2">
                                    <RadzenFormField Text="Total Activo No Corriente" Style="width:100%">
                                        <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.activoNoCorriente InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" Disabled />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(()=> estadoContableDto.activoNoCorriente)" />
                                </RadzenStack>


                                <RadzenStack class="mt-2 mb-2">
                                    <RadzenFormField Text="Total Activo" Style="width:100%">
                                        <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.totalActivo InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" Style="width:100%" Disabled />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(()=> estadoContableDto.totalActivo)" />
                                </RadzenStack>
                                

                                <RadzenStack class="mt-2 mb-2">
                                    <RadzenFormField Text="Deudas del Pasivo Corriente" Style="width:100%">
                                        <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.deudorPasivoCorriente InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(()=> estadoContableDto.deudorPasivoCorriente)" />
                                </RadzenStack>

                                <RadzenStack class="mt-2 mb-2">
                                    <RadzenFormField Text="Deudas del Pasivo No Corriente" Style="width:100%">
                                        <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.deudorPasivoNoCorriente InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" Style="width:100%" />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(()=> estadoContableDto.deudorPasivoNoCorriente)" />
                                </RadzenStack>


                                <RadzenStack class="mt-2 mb-2">
                                    <RadzenFormField Text="Total Pasivo" Style="width:100%">
                                        <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.totalPasivo InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" Disabled />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(()=> estadoContableDto.totalPasivo)" />
                                </RadzenStack>


                                <RadzenStack class="mt-2 mb-2">
                                    <RadzenFormField Text="Patrimonio Neto" Style="width:100%">
                                        <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.patrimonioNeto InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" Disabled />
                                    </RadzenFormField>
                                    <ValidationMessage For="@(()=> estadoContableDto.patrimonioNeto)" />
                                </RadzenStack>

                                    <RadzenStack class="mt-2 mb-2">
                                        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Click="@insertEECC" ButtonStyle="ButtonStyle.Primary">Guardar</RadzenButton>
                                    </RadzenStack>

                              @*   @if (statusPatrimonioNeto)
                                {
                                    <div class="alert alert-danger" role="alert">
                                        No coinciden el Patrimonio Neto de Activo y Pasivo con
                                        el Detalle del Patrimonio Neto
                                    </div>
                                } *@
                            </div>
                        </div>
                    </div>
                </div>
                
            </div>
            <!-- Rubros del Patrimonio Neto -->
            <div class="col">
                <div class="card mb-4">
                    <div class="card-body">

                        <h5 class="card-title d-flex justify-content-center">Rubros del Patrimonio Neto</h5>
                        <!-- Repite esta estructura para otros campos -->

                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Capital Suscripto" Style="width:100%">
                                <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.capitalSuscripto InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> estadoContableDto.capitalSuscripto)" />
                        </RadzenStack>

                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Ajuste de Capital" Style="width:100%">
                                <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.ajusteCapital InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> estadoContableDto.ajusteCapital)" />
                        </RadzenStack>

                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Aportes Irrevocables" Style="width:100%">
                                <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.aportesIrrevocables InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> estadoContableDto.aportesIrrevocables)" />
                        </RadzenStack>

                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Prima Emisión" Style="width:100%">
                                <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.primaEmision InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" Style="width:100%" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> estadoContableDto.primaEmision)" />
                        </RadzenStack>

                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Ganancias Reservadas" Style="width:100%">
                                <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.gananciasReservadas InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" Style="width:100%" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> estadoContableDto.gananciasReservadas)" />
                        </RadzenStack>




                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Pérdidas Acumuladas" Style="width:100%">
                                <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.perdidasAcumuladas InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> estadoContableDto.perdidasAcumuladas)" />
                        </RadzenStack>


                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Ganancias / Pérdidas del Ejercicio" Style="width:100%">
                                <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.gananciasPerdidasEjercicio InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> estadoContableDto.gananciasPerdidasEjercicio)" />
                        </RadzenStack>


                        <RadzenStack class="mt-2 mb-2">
                            <RadzenFormField Text="Reserva Legal" Style="width:100%">
                                <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@estadoContableDto.reservaLegal InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})"  Style="width:100%" />
                            </RadzenFormField>
                            <ValidationMessage For="@(()=> estadoContableDto.reservaLegal)" />
                        </RadzenStack>

                    </div>
                        <RadzenStack class="mt-2 mb-2">
                            <RadzenButton ButtonType="Radzen.ButtonType.Submit" Click="@insertEECC" ButtonStyle="ButtonStyle.Primary">Guardar</RadzenButton>
                        </RadzenStack>
                </div>
           
                <!--Otros Rubros PN -->
                <div class="card mb-4">
                        <Form   Model="rubroDto">
                            <FluentValidationValidator />
                    <div class="card-body">
                        <div class="form-group">
                            <h5 class="card-title d-flex justify-content-center">
                                Otros Rubros del Patrimonio Neto
                            </h5>
                            <RadzenStack  class="mt-2 mb-2">
                                <RadzenFormField Text="Denominación" Style="width:100%">
                                    <RadzenTextBox @bind-Value=@rubroDto.denominacion id="txtAddress" />
                                </RadzenFormField>
                                     
                            </RadzenStack>
                        </div>

                        <RadzenStack  class="mt-2 mb-2">
                            <RadzenFormField   Text="Importe" Style="width:100%">
                                <RadzenNumeric TValue="decimal" Format="c" Culture=@argentinianCulture @bind-Value=@rubroDto.importe InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" Change="insertEECC" Style="width:100%" />
                            </RadzenFormField>
                                    <ValidationMessage For="@(()=>rubroDto.importe)" />
                        </RadzenStack>

                        <RadzenButton ButtonStyle="ButtonStyle.Primary" class="d-flex justify-content-center" Click="@insertRubro">Agregar</RadzenButton>

                    </div>
                        </Form>
                </div>

               

                <RadzenGrid Data="estadoContableDto.otrosRubros.AsEnumerable()" TItem="RubroPatrimonioNetoDto">
                    <Columns>
                        <RadzenGridColumn TItem="RubroPatrimonioNetoDto" Property="denominacion" Title="Denominación" />
                        <RadzenGridColumn TItem="RubroPatrimonioNetoDto" Property="importe" Title="Importe" Format="{0.00}" Type="decimal" />
                        <RadzenGridColumn TItem="RubroPatrimonioNetoDto">
                            <Template Context="rubro">
                                <RadzenGridColumn TItem="RubroPatrimonioNetoDto" Title="Acción" />
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Click="@(() => deleteRubro(rubro))">Eliminar</RadzenButton>
                            </Template>
                        </RadzenGridColumn>
                    </Columns>
                </RadzenGrid>
            </div>
            </EditForm>
        </div>
    </div>
    </body>
</html>



@code {

    private CultureInfo argentinianCulture = new CultureInfo("es-AR");


    [Parameter]
    public string? TipoEntidad { get; set; }

    private RubroPatrimonioNetoDto rubroDto = new RubroPatrimonioNetoDto();
    private EstadoContableDto estadoContableDto = new EstadoContableDto();

    private Boolean statusPatrimonioNeto = false;



    [Parameter]
    public string? balid { get; set; }

    [Parameter]
    public string sesionId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        ResponseDTO<BalanceDto> rsp = new();
        try
        {
            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();
                sesionId = sesionRespuesta.Result;
                sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rst = await sesionService.getBalanceId(sesionId);
                if (rst is not null)
                {
                    balid = rst;
                    rsp = await balanceService.getBalance(balid);
                    if (rsp.IsSuccess)
                    {
                        TipoEntidad = rsp.Result.Caratula.Entidad.TipoEntidad;

                        estadoContableDto.fechaInicio = rsp.Result.Caratula.FechaInicio;
                        estadoContableDto.fechaEstado = rsp.Result.Caratula.FechaDeCierre;
                        estadoContableDto = new EstadoContableDto(rsp.Result.EstadoContable);
                    }
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");
        }
    }

    private async Task<ResponseDTO<BalanceDto>> insertEECC()
    {
        ResponseDTO<BalanceDto> rsp = new();
        try
        {

            estadoContableDto.totalActivo = SumaEECC.TotalActivo(estadoContableDto);
            estadoContableDto.totalPasivo = SumaEECC.TotalPasivo(estadoContableDto);
            estadoContableDto.activoCorriente = SumaEECC.ActivoCorriente(estadoContableDto);
            estadoContableDto.activoNoCorriente = SumaEECC.ActivoNoCorriente(estadoContableDto);
            estadoContableDto.patrimonioNeto = SumaEECC.PatrimonioNeto(estadoContableDto);
            decimal OtrosRubrosPatrimonioNeto = SumaEECC.OtrosRubrosPatrimonioNeto(estadoContableDto);

            if(estadoContableDto.patrimonioNeto != OtrosRubrosPatrimonioNeto)
            {
                var alerta = await swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error en el balanceo",
                        Text = $"El total del patrimonio neto: ${estadoContableDto.patrimonioNeto} ARS no coincide con el total de Rubros del Patrimonio neto: ${OtrosRubrosPatrimonioNeto} ARS",
                        Icon = SweetAlertIcon.Warning,
                        ConfirmButtonText = "Cerrar"
                      
                    });
                
            }

            StateHasChanged();

            estadoContableDto.SesionId = sesionId;
            rsp = await estadoContableService.insertEECC(estadoContableDto);
            if (rsp.IsSuccess)
            {
                rsp.Message = "Se inserto el Estado Contable sastifactoriamente";
            }
            else
            {
                rsp.Message = "No se inserto el Estado Contable";
            }

        }
        catch (Exception ex)
        {
            rsp.Message = ex.Message;
        }

        return rsp;
    }

    private async Task<ResponseDTO<BalanceDto>> insertRubro()
    {
        var rsp = new ResponseDTO<BalanceDto>();
        try
        {
            rubroDto.SesionId = sesionId;
            RubroDtoValidator rubrodtovalidator = new();

            ValidationResult resultadoValidacion = rubrodtovalidator.Validate(rubroDto);

            if (resultadoValidacion.IsValid)
            {
                rsp = await estadoContableService.insertRubro(rubroDto);
                if (rsp.IsSuccess)
                {
                    var result = rsp.Result;
                    if (result != null)
                    {
                        setListOtrosRubros(result.EstadoContable.OtrosRubros);
                        rsp.Message = "Se inserto el rubro sastifactoriamente";
                        StateHasChanged();
                    }
                }
            }
            }
            catch (Exception ex)
            {
                rsp.Message = ex.Message;
            }

            return rsp;
        }

        private async Task<ResponseDTO<BalanceDto>> deleteRubro(RubroPatrimonioNetoDto rubroDto)
        {
            var respuesta = new ResponseDTO<BalanceDto>();
            try
            {
                rubroDto.SesionId = sesionId;
                respuesta = await estadoContableService.deleteRubro(rubroDto);
                if (respuesta.IsSuccess)
                {
                    estadoContableDto.otrosRubros.Remove(rubroDto);
                    respuesta.Message = "Se eliminó el rubro sastifactoriamente";
                    StateHasChanged();
                }
                else
                {
                    respuesta.Message = "No se eliminó el rubro sastifactoriamente";
                }
            }
            catch (Exception ex)
            {
                respuesta.Message = ex.Message;
            }

            return respuesta;
        }

      

      

       

        public void setListOtrosRubros(List<RubroPatrimonioNeto> rubros)
        {
            if (rubros != null)
            {
                estadoContableDto.otrosRubros.Clear();
                foreach (var rubro in rubros)
                {
                    estadoContableDto.otrosRubros.Add(new RubroPatrimonioNetoDto { codigo = rubro.Codigo, denominacion = rubro.Denominacion, importe = rubro.Importe, });
                }
            }
        }

      
       
    }
}