@page "/Libros"
@using Balances.DTO;
@using Balances.Model;
@using Balances.Web.Services.Implementation;
@using System.Text;
@using System.Reflection;
@inject ILibrosService serviceLibro;
@{
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Datos de Libros</title>
    <!-- Agrega los enlaces a los estilos de Bootstrap y otros recursos que puedas necesitar -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>


    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="Libros" TramiteIniciado="true"></Navegacion>

    <div class="container mt-2">
        <div class="card mx-auto">
            <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                Datos de Libros
            </div>

            <div class="card-body">

                <Libro libroP="modelo.Asamblea" OnBlur="() => HandleBlur(modelo.Asamblea)"></Libro>
                <Libro libroP="modelo.Administracion" OnBlur="() => HandleBlur(modelo.Administracion)"></Libro>
                <Libro libroP="modelo.AsistenciaAsamblea" OnBlur="() => HandleBlur(modelo.AsistenciaAsamblea)"></Libro>
                <Libro libroP="modelo.Auditor" OnBlur="() => HandleBlur(modelo.Auditor)"></Libro>
                <Libro libroP="modelo.Efectivo" OnBlur="() => HandleBlur(modelo.Efectivo)"></Libro>
                <Libro libroP="modelo.Fiscalizacion" OnBlur="() => HandleBlur(modelo.Fiscalizacion)"></Libro>
                <Libro libroP="modelo.IVA" OnBlur="() => HandleBlur(modelo.IVA)"></Libro>
                <Libro libroP="modelo.IVACompras" OnBlur="() => HandleBlur(modelo.IVACompras)"></Libro>
                <Libro libroP="modelo.IVAVentas" OnBlur="() => HandleBlur(modelo.IVAVentas)"></Libro>
                <Libro libroP="modelo.Resultados" OnBlur="() => HandleBlur(modelo.Resultados)"></Libro>
                <Libro libroP="modelo.EstadosContablesConsolidados" OnBlur="() => HandleBlur(modelo.EstadosContablesConsolidados)"></Libro>
                <Libro libroP="modelo.PatrimonioNeto" OnBlur="() => HandleBlur(modelo.PatrimonioNeto)"></Libro>
                <Libro libroP="modelo.SituacionPatrimonial" OnBlur="() => HandleBlur(modelo.SituacionPatrimonial)"></Libro>
                <Libro libroP="modelo.Memoria" OnBlur="() => HandleBlur(modelo.Memoria)"></Libro>
                <Libro libroP="modelo.Informacion" OnBlur="() => HandleBlur(modelo.Informacion)"></Libro>

            </div >
            
           
        </div>

        <!--<div class="row mt-4">
            <div class="col d-flex justify-content-center w-100">
                <button type="button" class="btn btn-primary w-100" @onclick="() => insertLibros(modelo)">Enviar</button>
            </div>
         </div>-->

        <div class="mt-3 mb-4">
            <button class="btn btn-primary w-100" @onclick="ToggleSelectAll">Seleccionar/Deseleccionar todos</button>
        </div>
    </div>


</body>
</html>



@code {

    private LibrosDto modelo = new LibrosDto();

    [Parameter] public string? TipoEntidad { get; set; }

    private bool allSelected = false;


    protected override async void OnInitialized()
    {
        await Load();
        base.OnInitialized();
    }


    private async Task HandleBlur(LibroDto libro)
    {

        // Encuentra el libro correspondiente en el modelo y actualiza sus valores
        if (libro != null)
        {
            if (modelo.Asamblea == libro)
            {
                modelo.Asamblea = libro;
            }
            else if (modelo.Administracion == libro)
            {
                modelo.Administracion = libro;
            }
            else if (modelo.AsistenciaAsamblea == libro)
            {
                modelo.AsistenciaAsamblea = libro;
            }
            else if (modelo.Auditor == libro)
            {
                modelo.Auditor = libro;
            }

            else if (modelo.Efectivo == libro)
            {
                modelo.Efectivo = libro;
            }
            else if (modelo.Fiscalizacion == libro)
            {
                modelo.Fiscalizacion = libro;
            }
            else if (modelo.IVA == libro)
            {
                modelo.IVA = libro;
            }

            else if (modelo.IVACompras == libro)
            {
                modelo.IVACompras = libro;
            }
            else if (modelo.IVAVentas == libro)
            {
                modelo.IVAVentas = libro;
            }
            else if (modelo.Resultados == libro)
            {
                modelo.Resultados = libro;
            }

            else if (modelo.EstadosContablesConsolidados == libro)
            {
                modelo.EstadosContablesConsolidados = libro;
            }
            else if (modelo.PatrimonioNeto == libro)
            {
                modelo.PatrimonioNeto = libro;
            }
            else if (modelo.SituacionPatrimonial == libro)
            {
                modelo.SituacionPatrimonial = libro;
            }
            else if (modelo.Memoria == libro)
            {
                modelo.Memoria = libro;
            }
            else if (modelo.Informacion == libro)
            {
                modelo.Informacion = libro;
            }   



        }   
        await insertLibros(modelo);
    }



    private async Task ToggleSelectAll()
    {
        // Cambiar el estado de la selección
        allSelected = !allSelected;



        foreach (var libro in ObtenerTodosLosLibros())
        {
            if (!LibroEstaCompleto(libro))
            {
                libro.NoSabeNoContesta = allSelected;
                libro.Nombre = allSelected ? "NC" : libro.Nombre;
                libro.NumeroRubrica = allSelected ? "NC" : libro.NumeroRubrica;
                libro.FechaUltimaRegistracion = allSelected ? DateTime.MinValue : DateTime.Now;
                libro.FechaRubrica = allSelected ? DateTime.MinValue : DateTime.Now;
                libro.Folio = allSelected ? "NC" : libro.Folio;
            }

           

        }
        
        // Insertar los libros actualizados
        await insertLibros(modelo);


       
    }

    private bool LibroEstaCompleto(LibroDto libro)
    {
        // Aquí debes implementar la lógica para verificar si todas las propiedades del libro están completas
        // Devuelve true si todas las propiedades están completas, de lo contrario, devuelve false

        // Por ejemplo, podrías verificar si todas las propiedades tienen valores distintos de "NC" o si las propiedades de fecha no están en su valor mínimo

        bool estaCompleto = !string.IsNullOrEmpty(libro.Nombre) &&
                            !string.IsNullOrEmpty(libro.NumeroRubrica) &&
                            libro.FechaUltimaRegistracion != DateTime.MinValue &&
                            libro.FechaRubrica != DateTime.MinValue &&
                            !string.IsNullOrEmpty(libro.Folio);

        return estaCompleto;
    }

    private List<LibroDto> ObtenerTodosLosLibros()
    {
        // Aquí debes implementar la lógica para obtener todos los libros del modelo
        // Devuelve una lista que contenga todos los libros
        var todosLosLibros = new List<LibroDto>
    {
        modelo.Asamblea,
        modelo.Administracion,
        modelo.AsistenciaAsamblea,
        modelo.Auditor,
        modelo.Efectivo,
        modelo.Fiscalizacion,
        modelo.IVA,
        modelo.IVACompras,
        modelo.IVAVentas,
        modelo.Resultados,
        modelo.EstadosContablesConsolidados,
        modelo.PatrimonioNeto,
        modelo.SituacionPatrimonial,
        modelo.Memoria,
        modelo.Informacion
    };

        return todosLosLibros;
    }

    private async Task HandleBlur(LibrosDto libro)
    {
        await insertLibros(libro); // Llama al método que deseas ejecutar cuando se produce el evento onblur
    }



    private async Task Load()
    {
        try
        {
            var idSession = await serviceLibro.getSession();

            if (idSession.IsSuccess)
            {
                var response = await serviceLibro.getBalance(idSession.Result);

                if (idSession.IsSuccess == true)
                {

                    try
                    {
                        TipoEntidad = response.Result.Caratula.Entidad.TipoEntidad;

                        setLibros(response.Result.Libros);

                        StateHasChanged();

                    }
                    catch (Exception ex)
                    {

                        Console.WriteLine($"GetBalance: Hubo un problema con la solicitud fetch: {ex.Message}");
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }

    private void setLibros(LibrosDto libros)
    {
        if (libros != null)
        {
            this.modelo = libros;  
        }
    }


    private async Task<ResponseDTO<BalanceDto>> insertLibros(LibrosDto libros)
    {

        ResponseDTO<BalanceDto> respuesta = new();

        try
        {
          
            respuesta = await serviceLibro.insertLibros(libros);

        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
        return respuesta;
    }
 

   
  

   

}


    

