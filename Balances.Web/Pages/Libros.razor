@page "/Libros/{balid?}"
@using Balances.DTO;
@using Balances.Model;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using System.Text;
@using System.Reflection;
@inject ILibrosClientService serviceLibro;
@inject IBalanceClientService balanceService
@inject ISessionClientService sesionService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Datos de Libros</title>
    <!-- Agrega los enlaces a los estilos de Bootstrap y otros recursos que puedas necesitar -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
</head>
<body>


    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="Libros" TramiteIniciado="true" balid="@balid"></Navegacion>

    <div class="container-fluid mt-2 mb-4">
        <div class="card">
            <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                Datos de Libros
            </div>

            <div class="card-body" >
                <div class="row d-flex justify-content-center">
                    <div class="col-md-2 mt-1">
                        <label class="text-primary">Tipo de Asiento</label>
                    </div>
                    <div class="col-md-2 mt-1">
                        <label class="text-primary">Nombre del Libro</label>
                    </div>

                    <div class="col-md-1  mt-1">
                        <label class="text-primary">Nro de Rúbrica</label>
                    </div>

                    <div class="col-md-1  mt-1">
                        <label class="text-primary">Fecha Rúbrica</label>
                    </div>
                    <div class="col-md-1  mt-1">
                        <label class ="text-primary">Folio en el que obra la transcripción</label>
                    </div>

                    <div class="col-md-1  mt-1">
                        <label class="text-primary">Última Registración del Libro</label>
                    </div>

                    <div class="col-md-1  mt-1">
                        <label class="text-primary">Folio de la última Reg.</label>
                    </div>

                 
                    <div class="col-md-1 mt-1">
                        <label class="text-primary">No sabe / No contesta</label>
                    </div>

                </div>
                <Libro libroP="modelo.Memoria" OnBlur="() => HandleBlur(modelo.Memoria)"></Libro>
                <Libro libroP="modelo.Administracion" OnBlur="() => HandleBlur(modelo.Administracion)"></Libro>
                <Libro libroP="modelo.Asamblea" OnBlur="() => HandleBlur(modelo.Asamblea)"></Libro>
                <Libro libroP="modelo.SituacionPatrimonial" OnBlur="() => HandleBlur(modelo.SituacionPatrimonial)"></Libro>
                <Libro libroP="modelo.Resultados" OnBlur="() => HandleBlur(modelo.Resultados)"></Libro>
                <Libro libroP="modelo.PatrimonioNeto" OnBlur="() => HandleBlur(modelo.PatrimonioNeto)"></Libro>
                <Libro libroP="modelo.Efectivo" OnBlur="() => HandleBlur(modelo.Efectivo)"></Libro>
                <Libro libroP="modelo.Informacion" OnBlur="() => HandleBlur(modelo.Informacion)"></Libro>
                <Libro libroP="modelo.EstadosContablesConsolidados" OnBlur="() => HandleBlur(modelo.EstadosContablesConsolidados)"></Libro>
                <Libro libroP="modelo.Fiscalizacion" OnBlur="() => HandleBlur(modelo.Fiscalizacion)"></Libro>
                <Libro libroP="modelo.Auditor" OnBlur="() => HandleBlur(modelo.Auditor)"></Libro>
                <Libro libroP="modelo.AsistenciaAsamblea" OnBlur="() => HandleBlur(modelo.AsistenciaAsamblea)"></Libro>
                <Libro libroP="modelo.IVA" OnBlur="() => HandleBlur(modelo.IVA)"></Libro>
                <Libro libroP="modelo.IVACompras" OnBlur="() => HandleBlur(modelo.IVACompras)"></Libro>
                <Libro libroP="modelo.IVAVentas" OnBlur="() => HandleBlur(modelo.IVAVentas)"></Libro>
              
               

            </div>


        </div>
      
    </div>


</body>
</html>



@code {

    private LibrosDto modelo = new LibrosDto();

    [Parameter] public string? TipoEntidad { get; set; }

    private bool allSelected = false;

    [Parameter]
    public string? balid { get; set; }
    
    [Parameter]
    public string sesionId { get; set; }

    protected override async void OnInitialized()
    {
        await Load();
        base.OnInitialized();
    }


    private async Task HandleBlur(LibroDto libro)
    {

        // Encuentra el libro correspondiente en el modelo y actualiza sus valores
        if (libro != null)
        {

            if (modelo.Asamblea == libro)
            {
                modelo.Asamblea = libro;
            }
            else if (modelo.Administracion == libro)
            {
                modelo.Administracion = libro;
            }
            else if (modelo.AsistenciaAsamblea == libro)
            {
                modelo.AsistenciaAsamblea = libro;
            }
            else if (modelo.Auditor == libro)
            {
                modelo.Auditor = libro;
            }

            else if (modelo.Efectivo == libro)
            {
                modelo.Efectivo = libro;
            }
            else if (modelo.Fiscalizacion == libro)
            {
                modelo.Fiscalizacion = libro;
            }
            else if (modelo.IVA == libro)
            {
                modelo.IVA = libro;
            }

            else if (modelo.IVACompras == libro)
            {
                modelo.IVACompras = libro;
            }
            else if (modelo.IVAVentas == libro)
            {
                modelo.IVAVentas = libro;
            }
            else if (modelo.Resultados == libro)
            {
                modelo.Resultados = libro;
            }

            else if (modelo.EstadosContablesConsolidados == libro)
            {
                modelo.EstadosContablesConsolidados = libro;
            }
            else if (modelo.PatrimonioNeto == libro)
            {
                modelo.PatrimonioNeto = libro;
            }
            else if (modelo.SituacionPatrimonial == libro)
            {
                modelo.SituacionPatrimonial = libro;
            }
            else if (modelo.Memoria == libro)
            {
                modelo.Memoria = libro;
            }
            else if (modelo.Informacion == libro)
            {
                modelo.Informacion = libro;
            }

        }

        await insertLibros(modelo);
    }

    private async Task Load()
    {
        ResponseDTO<BalanceDto> rsp = new();
        try
        {

            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();

                sesionId = sesionRespuesta.Result;
                sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rst = await sesionService.getBalanceId(sesionId);

                if (rst is not null)
                {
                    balid = rst;
                    rsp = await balanceService.getBalance(balid);

                    if (rsp.IsSuccess)
                    {
                        TipoEntidad = rsp.Result.Caratula.Entidad.TipoEntidad;

                        setLibros(rsp.Result.Libros);

                        StateHasChanged();

                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }

  
    private void setLibros(LibrosDto libros)
    {
        if (libros != null)
        {
            this.modelo = libros;
        }
    }


    private async Task<ResponseDTO<BalanceDto>> insertLibros(LibrosDto libros)
    {

        ResponseDTO<BalanceDto> respuesta = new();

        try
        {
            libros.SessionId = sesionId;
            respuesta = await serviceLibro.insertLibros(libros);

        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
       
        return respuesta;
    }
}
