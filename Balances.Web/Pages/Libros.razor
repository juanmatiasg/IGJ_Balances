@page "/Libros/{balid?}"
@using Balances.DTO;
@using Balances.Model;
@using Balances.Utilities;
@using Balances.Web.Services.Contracts;
@using Balances.Web.Services.Implementation;
@using System.Text;
@using System.Reflection;
@inject ILibrosClientService serviceLibro;
@inject IBalanceClientService balanceService
@inject ISessionClientService sesionService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject SweetAlertService swal
@inject NotificationService notificationService

<Navegacion PaginaActiva="Libros" TramiteIniciado="true" balid="@balid"></Navegacion>


<div class="container">
    <div class="card">

        <div class="card-header" style="color: white; font-weight: bold; text-align: center; background-color:#15153D;">
            Datos de Libros
        </div>
        <div class="d-flex">
            <h5 class="card-header" style="width:33%">Asiento</h5>
            <h5 class="card-header" style="width:33%">Rubrica</h5>
            <h5 class="card-header" style="width:33%">Ultima registracion</h5>
        </div>
        <div class="card-body d-flex flex-column gap-3 justify-content-center">
            <Libro libroP="modelo.Memoria" ></Libro>
            <Libro libroP="modelo.Administracion" ></Libro>
            <Libro libroP="modelo.Asamblea"></Libro>
            <Libro libroP="modelo.SituacionPatrimonial "></Libro>
            <Libro libroP="modelo.Resultados" ></Libro>
            <Libro libroP="modelo.PatrimonioNeto" ></Libro>
            <Libro libroP="modelo.Efectivo" ></Libro>
            <Libro libroP="modelo.Informacion" ></Libro>
            <Libro libroP="modelo.EstadosContablesConsolidados" ></Libro>
            <Libro libroP="modelo.Fiscalizacion" ></Libro>
            <Libro libroP="modelo.Auditor" ></Libro>
            <Libro libroP="modelo.AsistenciaAsamblea"></Libro>
            <Libro libroP="modelo.IVACompras" ></Libro>
            <Libro libroP="modelo.IVAVentas" ></Libro>
            <Libro libroP="modelo.LibroDiario"></Libro>

        </div>
            <RadzenStack class="mt-4 mb-2">
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Click="@(() => insertLibros(modelo))">Guardar</RadzenButton>
            </RadzenStack>
    </div>


</div>


@code{
    private LibrosDto modelo = new LibrosDto();



    [Parameter]
    public string? TipoEntidad { get; set; }

    [Parameter]
    public string? balid { get; set; }

    [Parameter]
    public string sesionId { get; set; }

    protected override async void OnInitialized()
    {
        await Load();
        base.OnInitialized();
    }


    private async Task Load()
    {
        ResponseDTO<BalanceDto> rsp = new();
        try
        {
            sesionId = await sessionStorage.GetItemAsync<string>("SessionId");
            if (sesionId == null)
            {
                var sesionRespuesta = await sesionService.getNewSession();
                sesionId = sesionRespuesta.Result;
                sessionStorage.SetItemAsync("SessionId", sesionId);
            }
            else
            {
                var rst = await sesionService.getBalanceId(sesionId);
                if (rst is not null)
                {
                    balid = rst;
                    rsp = await balanceService.getBalance(balid);
                    if (rsp.IsSuccess)
                    {
                        TipoEntidad = rsp.Result.Caratula.Entidad.TipoEntidad;
                        setLibros(rsp.Result.Libros);
                        StateHasChanged();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");
        }
    }

    private void setLibros(LibrosDto libros)
    {
        if (libros != null)
        {
            this.modelo = libros;
        }
    }

    private async Task<ResponseDTO<BalanceDto>> insertLibros(LibrosDto libros)
    {
        ResponseDTO<BalanceDto> respuesta = new();

        try
        {

            if (libros.Asamblea.Nombre is null || libros.Asamblea.Nombre == "" ||
          libros.LibroDiario.Nombre is null || libros.LibroDiario.Nombre == "" ||
          libros.Memoria.Nombre is null || libros.Memoria.Nombre == "" ||
          libros.Resultados.Nombre is null || libros.Resultados.Nombre == "" ||
          libros.Administracion.Nombre is null || libros.Administracion.Nombre == "" ||
          libros.PatrimonioNeto.Nombre is null || libros.PatrimonioNeto.Nombre == "" ||
          libros.SituacionPatrimonial.Nombre is null || libros.SituacionPatrimonial.Nombre == "" ||
          libros.Efectivo.Nombre is null || libros.Efectivo.Nombre == "" ||
          libros.Informacion.Nombre is null || libros.Informacion.Nombre == "" ||
          libros.Auditor.Nombre is null || libros.Auditor.Nombre == "" ||
          libros.AsistenciaAsamblea.Nombre is null || libros.AsistenciaAsamblea.Nombre == "" )
            {
                var alerta = await swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = $"Faltan completar datos",
                        Icon = SweetAlertIcon.Warning,
                        ConfirmButtonText = "Cerrar"

                    });
            }
            else
            {
                libros.SessionId = sesionId;
                respuesta = await serviceLibro.insertLibros(libros);

                notificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Duration = 3000,
                        Summary = "Datos guardados correctamente"
                    });
            }
        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }

        return respuesta;
    }

}





