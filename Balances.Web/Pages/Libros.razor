@page "/Libros"
@using Balances.DTO;
@using Balances.Model;
@using Balances.Web.Services.Implementation;
@using System.Text;
@inject ILibrosService serviceLibro;
@{
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Datos de Libros</title>
    <!-- Agrega los enlaces a los estilos de Bootstrap y otros recursos que puedas necesitar -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>


    <Navegacion Entidad="@($"{TipoEntidad}")" PaginaActiva="Libros" TramiteIniciado="true"></Navegacion>

    <div class="container mt-2">
        <div class="card mx-auto">
            <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                Datos de Libros
            </div>

            <div class="card-body">
                <Libro libroP="modelo.Asamblea"></Libro>
                <Libro libroP="modelo.Administracion"></Libro>
                <Libro libroP="modelo.AsistenciaAsamblea"></Libro>
                <Libro libroP="modelo.Auditor"></Libro>
                <Libro libroP="modelo.Efectivo"></Libro>
                <Libro libroP="modelo.Fiscalizacion"></Libro>
                <Libro libroP="modelo.IVA"></Libro>
                <Libro libroP="modelo.IVACompras"></Libro>
                <Libro libroP="modelo.IVAVentas"></Libro>
                <Libro libroP="modelo.Resultados"></Libro>
                <Libro libroP="modelo.EstadosContablesConsolidados"></Libro>
                <Libro libroP="modelo.PatrimonioNeto"></Libro>
                <Libro libroP="modelo.SituacionPatrimonial"></Libro>
                <Libro libroP="modelo.Memoria"></Libro>
                <Libro libroP="modelo.Informacion"></Libro>

            </div >
            
           
        </div>

        <div class="row mt-4">
            <div class="col d-flex justify-content-center w-100">
                <button type="button" class="btn btn-primary w-100" @onclick="() => insertLibros(modelo)">Enviar</button>
            </div>
         </div>

        <div class="mt-3">
            <button class="btn btn-primary w-100" @onclick="ToggleSelectAll">Seleccionar/Deseleccionar Todos</button>
        </div>
    </div>


</body>
</html>



@code {

    private LibrosDto modelo = new LibrosDto();

    [Parameter] public string? TipoEntidad { get; set; }

    private bool allSelected = false;


    protected override async void OnInitialized()
    {
        await Load();
        base.OnInitialized();
    }
    private async Task HandleBlur(LibrosDto libro)
    {

        await insertLibros(libro);
    }

    private void ToggleSelectAll()
    {
        // Cambiar el estado de la selección
        allSelected = !allSelected;

        // Actualizar el estado de selección de cada libro en el modelo
        modelo.Asamblea.NoSabeNoContesta = allSelected;
        modelo.Administracion.NoSabeNoContesta = allSelected;
        modelo.AsistenciaAsamblea.NoSabeNoContesta = allSelected;
        modelo.Auditor.NoSabeNoContesta = allSelected;
        modelo.Efectivo.NoSabeNoContesta = allSelected;
        modelo.Fiscalizacion.NoSabeNoContesta = allSelected;
        modelo.IVA.NoSabeNoContesta = allSelected;
        modelo.IVACompras.NoSabeNoContesta = allSelected;
        modelo.IVAVentas.NoSabeNoContesta = allSelected;
        modelo.Resultados.NoSabeNoContesta = allSelected;
        modelo.EstadosContablesConsolidados.NoSabeNoContesta = allSelected;
        modelo.PatrimonioNeto.NoSabeNoContesta = allSelected;
        modelo.SituacionPatrimonial.NoSabeNoContesta = allSelected;
        modelo.Memoria.NoSabeNoContesta = allSelected;
        modelo.Informacion.NoSabeNoContesta = allSelected;
    }
    private async Task Load()
    {
        try
        {
            var idSession = await serviceLibro.getSession();

            if (idSession.IsSuccess)
            {
                var response = await serviceLibro.getBalance(idSession.Result);

                if (idSession.IsSuccess == true)
                {

                    try
                    {
                        TipoEntidad = response.Result.Caratula.Entidad.TipoEntidad;
                        setLibros(response.Result.Libros);
                        

                        StateHasChanged();

                    }
                    catch (Exception ex)
                    {

                        Console.WriteLine($"GetBalance: Hubo un problema con la solicitud fetch: {ex.Message}");
                    }
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }

    private void setLibros(LibrosDto libros)
    {
        if (libros != null)
        {
            this.modelo = libros;
        }
    }

    private void getLibros(LibrosDto libros)
    {
        this.modelo= libros;
    }

    private async Task<ResponseDTO<BalanceDto>> insertLibros(LibrosDto libros)
    {

        ResponseDTO<BalanceDto> respuesta = new();

        try
        {

            respuesta = await serviceLibro.insertLibros(libros);

        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
        return respuesta;
    }
 

    private void cleanInputs()
    {
        // Restablecer los valores de los campos a su estado inicial o vacío
        modelo = new LibrosDto();
    }
  

   

}


    

