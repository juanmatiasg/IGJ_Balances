@page "/Libros"
@using Balances.DTO;
@using Balances.Web.Services.Implementation;
@inject ILibroService serviceLibro;
@{
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Datos de Libros</title>
    <!-- Agrega los enlaces a los estilos de Bootstrap y otros recursos que puedas necesitar -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <!--Navegacion-->
    <div class="d-flex justify-content-center align-items-center">
        <h3 class="fs-2 font-weight mt-4 mb-4">
            <p>Entidad:</p>
        </h3>
    </div>
    <ul class="nav nav-tabs d-flex justify-content-center">
        <li class="nav-item">
            <a class="nav-link" disabled href="/Caratula">Caratula</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/EstadoContable">Estado</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/Libros">Libros</a>
        </li>
        <li class="nav-item" active disabled>
            <a class="nav-link" href="/Contador">Contador</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/Autoridad">Autoridad</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/Integrante">Integrante</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/Archivos">Archivos</a>
        </li>
        <li class="nav-item" disabled>
            <a class="nav-link" href="/Confirmacion">Confirmación DJ</a>
        </li>
    </ul>

    <div class="container mt-2">
        <div class="card mx-auto">
            <div class="card-header" style="color: #0375bc; font-weight: bold; text-align: center;">
                Datos de Libros
            </div>
            @for (int i = 0; i <= 12; i++)
            {
                <div class="d-flex justify-content-center align-items-center content-input">
                    <div class="col-md-2 mt-2">
                        <p style="text-align: center;">
                            Campo @libroModel.Tipo
                        </p>
                    </div>

                    <div class="col-md-3">
                        <input name="campo@i" placeholder="Nombre del Libro @i" class="form-control" @bind="libroModel.Nombre" />
                    </div>
                    <div class="col-md-3">
                        <input name="campo@i" placeholder="Nro.Rúbrica/Fecha/Folio @i" class="form-control" @bind=libroModel.NumeroRubrica />
                    </div>
                    <div class="col-md-3">
                        <input name="campo@i" placeholder="Denominación @i" class="form-control" @bind=libroModel.Denominacion />
                    </div>
                    <div class="col-md-3">
                        <input type="date" name="campo@i" placeholder="Fecha Ultima Registración @i" class="form-control" @bind=libroModel.FechaUltimaRegistracion/>
                    </div>
                    <div class="col-md-3">
                        <input name="campo@i" placeholder="Folio @i" class="form-control" @bind=libroModel.Folio />
                    </div>
                    <div class="col-md-1 m-2">
                        <div class="form-check">
                            <input type="checkbox"  class="form-check-input" @bind ="libroModel.NoSabeNoContesta" />
                            <label class="form-check-label">NC</label>
                        </div>
                    </div>

                </div>
            }
        </div>

    </div>

    <div class="row mt-4">
        <div class="col d-flex justify-content-center w-100">
            <button type="button" class="btn btn-primary w-100" onclick="">Enviar</button>
        </div>
    </div>

</body>
</html>



@code {
    private LibroDto libroModel = new LibroDto();
    
    /*protected override async Task OnInitializedAsync()
    {

        await Load();

        await base.OnInitializedAsync();
    }

    private async Task Load()
    {
        try
        {
            var idSession = await serviceLibro.getSession();

            if (idSession.IsSuccess)
            {
                var response = await serviceLibro.getBalance(idSession.Result);

                if (idSession.IsSuccess == true)
                {

                    try
                    {
                      

                        StateHasChanged();

                    }
                    catch (Exception ex)
                    {

                        Console.WriteLine($"Hubo un problema con la solicitud fetch: {ex.Message}");
                    }
                }
            }
            else
            {
                Console.WriteLine($"No se ha encontrado el idSession");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SessionId: Hubo un problema con la solicitud fetch: {ex.Message}");

        }

    }


    private async Task<ResponseDTO<BalanceDto>> insertAutoridad()
    {

        ResponseDTO<BalanceDto> respuesta = new();


        try
        {

            respuesta = await serviceLibro.insertLibro(libroModel);


            if (respuesta.IsSuccess)
            {
           


                // Limpiar los campos después de una inserción exitosa
                cleanInputs();


            }

        }
        catch (Exception ex)
        {
            respuesta.Message = ex.Message;
        }
        return respuesta;
    }

    private void cleanInputs()
    {
        // Restablecer los valores de los campos a su estado inicial o vacío
        libroModel = new LibroDto();
    }*/
}
