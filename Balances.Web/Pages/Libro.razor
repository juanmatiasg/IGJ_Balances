


@using Balances.DTO;
@using Balances.Utilities;
@functions {
    string SepararMayusculas(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return string.Empty; 
        }

        return System.Text.RegularExpressions.Regex.Replace(input, @"(?<=[a-z])(?=[A-Z])", " ");
    }
}

@if (!libext.Original.NoSabeNoContesta && !string.IsNullOrEmpty(libext.Tipo))
{
    <div class="row">
        <div class="col-md-2 mt-1">
            <label>@SepararMayusculas(@libext.Tipo)</label>
        </div>
        <div class="col-md-2 mt-1">
            <input placeholder="Nombre del Libro" class="form-control" @bind="libext.Nombre" @onblur="OnBlurHandler" />
            <small id="msgError" class="text-danger">@msgErrorNombre</small>
        </div>

        <div class="col-md-1  mt-1">
            <input placeholder="Nro.Rúbrica" class="form-control" @bind=libext.NumeroRubrica @onblur="OnBlurHandler" />
            <small id="msgError" class="text-danger">@msgErrorNroRubrica</small>
        </div>

        <div class="col-md-2  mt-1">
            <input type="date" placeholder="Fecha Rúbrica" class="form-control" @bind=libext.FechaRubrica @onblur="OnBlurHandler" />
            <small id="msgError" class="text-danger">@msgErrorFechaRubrica</small>
        </div>

        <div class="col-md-1  mt-1">
            <input placeholder="Folio" class="form-control" @bind=libext.Folio @onblur="OnBlurHandler" />
            <small id="msgError" class="text-danger">@msgErrorFolio</small>
        </div>

        <div class="col-md-2  mt-1">
            <input type="date" placeholder="Fecha última Registración" class="form-control" @bind=libext.FechaUltimaRegistracion @onblur="OnBlurHandler" />
            <small id="msgError" class="text-danger">@msgErrorFechaUltimaRegistracion</small>

        </div>

        <div class="col-md-2 mt-1">
            <div class="form-check">
                <input type="checkbox" class="form-check-input" @bind="libext.NoSabeNoContesta" @onblur="OnBlurHandler" />
                <label class="form-check-label">N/C</label>
            </div>
        </div>
        <small id="msgError" class="text-danger"></small>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-2 mt-1">
            <label>@SepararMayusculas(@libext.Tipo)</label>
        </div>
        <div class="col-md-2 mt-1">
            <input placeholder="N/C" @bind="libext.Nombre" class="form-control" disabled @onblur="OnBlurHandler" />
        </div>
        <div class="col-md-1  mt-1">
            <input placeholder="N/C" @bind=libext.NumeroRubrica class="form-control" disabled @onblur="OnBlurHandler" />
        </div>
        <div class="col-md-2  mt-1">
            <input type="date" placeholder="N/C" @bind=libext.FechaRubrica class="form-control" disabled @onblur="OnBlurHandler" />
        </div>
        <div class="col-md-1  mt-1">
            <input placeholder="N/C" @bind=libext.Folio class="form-control" disabled @onblur="OnBlurHandler" />
        </div>
        <div class="col-md-2  mt-1">
            <input type="date" @bind=libext.FechaUltimaRegistracion placeholder="N/C" class="form-control" disabled @onblur="OnBlurHandler" />
        </div>

        <div class="col-md-2 mt-1">
            <div class="form-check">
                <input type="checkbox" class="form-check-input" @bind="libext.NoSabeNoContesta" @onblur="OnBlurHandler" />
                <label class="form-check-label">N/C</label>
            </div>
        </div>
    </div>
}

@code {
    private string msgErrorFolio = "";
    private string msgErrorNroRubrica = "";
    private string msgErrorNombre = "";
    private string msgErrorFechaRubrica = "";    
    private string msgErrorFechaUltimaRegistracion = "";


    [Parameter]
    public LibroDto libroP {
        set { libext.Original = value;}
        get { return libext.Original; }
    }

    private LibroDtoExtended libext = new LibroDtoExtended();


    [Parameter]
    public EventCallback<LibroDto> OnBlur { get; set; }



    private async Task OnBlurHandler()
    {
        if (checkData())
        {
            await OnBlur.InvokeAsync(libroP);
        }
        await OnBlur.InvokeAsync(libroP);
        
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    private bool checkData()
    {
        // Nombre
        if (string.IsNullOrEmpty(libroP.Nombre))
        {
            msgErrorNombre = "El campo no puede estar vacío";
            return false;
        }
        else if (Validator.IsNumeric(libroP.Nombre))
        {
            msgErrorNombre = "No puedes ingresar un valor numérico";
            return false;
        }
        else
        {
            msgErrorNombre = "";
        }

        // Nro Rubrica
        if (string.IsNullOrEmpty(libroP.NumeroRubrica))
        {
            msgErrorNroRubrica = "El campo no puede estar vacío";
            return false;
        }
        else if (!Validator.IsNumeric(libroP.NumeroRubrica))
        {
            msgErrorNroRubrica = "No puedes ingresar caracteres";
            return false;
        }
        else
        {
            msgErrorNroRubrica = "";
        }

        // Fecha Rubrica
        if (libroP.FechaRubrica == null)
        {
            msgErrorFechaRubrica = "No seleccionaste la fecha correspondiente";
            return false;
        }
        else
        {
            msgErrorFechaRubrica = "";
        }

        // Folio
        if (string.IsNullOrEmpty(libroP.Folio))
        {
            msgErrorFolio = "El campo no puede estar vacío";
            return false;
        }
        else if (Validator.IsNumeric(libroP.Folio))
        {
            msgErrorFolio = "No puedes ingresar un valor numérico";
            return false;
        }
        else
        {
            msgErrorFolio = "";
        }

        // FechaUltimaRegistracion
        if (libroP.FechaUltimaRegistracion == null)
        {
            msgErrorFechaUltimaRegistracion = "No seleccionaste la fecha correspondiente";
            return false;
        }
        else
        {
            msgErrorFechaUltimaRegistracion = "";
        }

        // Si todos los campos pasan la validación o si algunos campos son "N/C", entonces retorna true
        return true;
    }


}
